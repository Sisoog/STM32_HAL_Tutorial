
16_Timer encoder mode_Rotary Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003094  08003094  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003094  08003094  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003094  08003094  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800309c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  0800310c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800310c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa33  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afb  00000000  00000000  0002aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001868f  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c528  00000000  00000000  000463ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9c4  00000000  00000000  00052927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de2eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad0  00000000  00000000  000de33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f7c 	.word	0x08002f7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f7c 	.word	0x08002f7c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
uint8_t pinState = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
uint32_t counterValue = 0;
 8000156:	2300      	movs	r3, #0
 8000158:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800015a:	f000 fb11 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015e:	f000 f847 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000162:	f000 f909 	bl	8000378 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000166:	f000 f889 	bl	800027c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f8db 	bl	8000324 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800016e:	481a      	ldr	r0, [pc, #104]	; (80001d8 <main+0x8c>)
 8000170:	f000 fab2 	bl	80006d8 <RetargetInit>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000174:	213c      	movs	r1, #60	; 0x3c
 8000176:	4819      	ldr	r0, [pc, #100]	; (80001dc <main+0x90>)
 8000178:	f001 faa0 	bl	80016bc <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if((pinState != HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) || (counterValue != TIM2->CNT))
 800017c:	2104      	movs	r1, #4
 800017e:	4818      	ldr	r0, [pc, #96]	; (80001e0 <main+0x94>)
 8000180:	f000 fdc8 	bl	8000d14 <HAL_GPIO_ReadPin>
 8000184:	4603      	mov	r3, r0
 8000186:	461a      	mov	r2, r3
 8000188:	79fb      	ldrb	r3, [r7, #7]
 800018a:	4293      	cmp	r3, r2
 800018c:	d105      	bne.n	800019a <main+0x4e>
 800018e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000194:	683a      	ldr	r2, [r7, #0]
 8000196:	429a      	cmp	r2, r3
 8000198:	d014      	beq.n	80001c4 <main+0x78>
	  {
		  pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800019a:	2104      	movs	r1, #4
 800019c:	4810      	ldr	r0, [pc, #64]	; (80001e0 <main+0x94>)
 800019e:	f000 fdb9 	bl	8000d14 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
		  counterValue = TIM2->CNT;
 80001a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001ac:	603b      	str	r3, [r7, #0]

		  printf("Switch state: %s \t Counter value: %lu \r\n",
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <main+0x6c>
 80001b4:	4b0b      	ldr	r3, [pc, #44]	; (80001e4 <main+0x98>)
 80001b6:	e000      	b.n	80001ba <main+0x6e>
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <main+0x9c>)
 80001ba:	683a      	ldr	r2, [r7, #0]
 80001bc:	4619      	mov	r1, r3
 80001be:	480b      	ldr	r0, [pc, #44]	; (80001ec <main+0xa0>)
 80001c0:	f001 fe7a 	bl	8001eb8 <iprintf>
				  pinState ? "Not Pressed" : "Pressed", counterValue);
	  }

	  if(!pinState)
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d1d8      	bne.n	800017c <main+0x30>
	  {
		  TIM2->CNT = 32767;
 80001ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80001d2:	625a      	str	r2, [r3, #36]	; 0x24
	  if((pinState != HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)) || (counterValue != TIM2->CNT))
 80001d4:	e7d2      	b.n	800017c <main+0x30>
 80001d6:	bf00      	nop
 80001d8:	200000d4 	.word	0x200000d4
 80001dc:	2000008c 	.word	0x2000008c
 80001e0:	40010800 	.word	0x40010800
 80001e4:	08002f94 	.word	0x08002f94
 80001e8:	08002fa0 	.word	0x08002fa0
 80001ec:	08002fa8 	.word	0x08002fa8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fe52 	bl	8001ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fd83 	bl	8000d44 <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f8ce 	bl	80003e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fff0 	bl	8001248 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f8b9 	bl	80003e4 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b08c      	sub	sp, #48	; 0x30
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000282:	f107 030c 	add.w	r3, r7, #12
 8000286:	2224      	movs	r2, #36	; 0x24
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe0c 	bl	8001ea8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <MX_TIM2_Init+0xa4>)
 800029a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ba:	4b19      	ldr	r3, [pc, #100]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002c4:	2300      	movs	r3, #0
 80002c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002c8:	2301      	movs	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002d4:	2300      	movs	r3, #0
 80002d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002d8:	2301      	movs	r3, #1
 80002da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002e4:	f107 030c 	add.w	r3, r7, #12
 80002e8:	4619      	mov	r1, r3
 80002ea:	480d      	ldr	r0, [pc, #52]	; (8000320 <MX_TIM2_Init+0xa4>)
 80002ec:	f001 f944 	bl	8001578 <HAL_TIM_Encoder_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80002f6:	f000 f875 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	; (8000320 <MX_TIM2_Init+0xa4>)
 8000308:	f001 faec 	bl	80018e4 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000312:	f000 f867 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3730      	adds	r7, #48	; 0x30
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	2000008c 	.word	0x2000008c

08000324 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800032a:	4a12      	ldr	r2, [pc, #72]	; (8000374 <MX_USART1_UART_Init+0x50>)
 800032c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800034a:	220c      	movs	r2, #12
 800034c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <MX_USART1_UART_Init+0x4c>)
 800035c:	f001 fb20 	bl	80019a0 <HAL_UART_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000366:	f000 f83d 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	200000d4 	.word	0x200000d4
 8000374:	40013800 	.word	0x40013800

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b086      	sub	sp, #24
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_GPIO_Init+0x64>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_GPIO_Init+0x64>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b10      	ldr	r3, [pc, #64]	; (80003dc <MX_GPIO_Init+0x64>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	607b      	str	r3, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a4:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <MX_GPIO_Init+0x64>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a0c      	ldr	r2, [pc, #48]	; (80003dc <MX_GPIO_Init+0x64>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_GPIO_Init+0x64>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	603b      	str	r3, [r7, #0]
 80003ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80003bc:	2304      	movs	r3, #4
 80003be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c8:	f107 0308 	add.w	r3, r7, #8
 80003cc:	4619      	mov	r1, r3
 80003ce:	4804      	ldr	r0, [pc, #16]	; (80003e0 <MX_GPIO_Init+0x68>)
 80003d0:	f000 fb1c 	bl	8000a0c <HAL_GPIO_Init>

}
 80003d4:	bf00      	nop
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000472:	d123      	bne.n	80004bc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a12      	ldr	r2, [pc, #72]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	61d3      	str	r3, [r2, #28]
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	f003 0301 	and.w	r3, r3, #1
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b0d      	ldr	r3, [pc, #52]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <HAL_TIM_Encoder_MspInit+0x70>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0304 	and.w	r3, r3, #4
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a4:	2303      	movs	r3, #3
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <HAL_TIM_Encoder_MspInit+0x74>)
 80004b8:	f000 faa8 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80004bc:	bf00      	nop
 80004be:	3720      	adds	r7, #32
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800

080004cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a1c      	ldr	r2, [pc, #112]	; (8000558 <HAL_UART_MspInit+0x8c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d131      	bne.n	8000550 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <HAL_UART_MspInit+0x90>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a1a      	ldr	r2, [pc, #104]	; (800055c <HAL_UART_MspInit+0x90>)
 80004f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <HAL_UART_MspInit+0x90>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_UART_MspInit+0x90>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_UART_MspInit+0x90>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_UART_MspInit+0x90>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800051c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000522:	2302      	movs	r3, #2
 8000524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000526:	2303      	movs	r3, #3
 8000528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	4619      	mov	r1, r3
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <HAL_UART_MspInit+0x94>)
 8000532:	f000 fa6b 	bl	8000a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800053a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053c:	2300      	movs	r3, #0
 800053e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <HAL_UART_MspInit+0x94>)
 800054c:	f000 fa5e 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000550:	bf00      	nop
 8000552:	3720      	adds	r7, #32
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40013800 	.word	0x40013800
 800055c:	40021000 	.word	0x40021000
 8000560:	40010800 	.word	0x40010800

08000564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <NMI_Handler+0x4>

0800056a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056e:	e7fe      	b.n	800056e <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	e7fe      	b.n	8000574 <MemManage_Handler+0x4>

08000576 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>

08000582 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr

0800059a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005aa:	f000 f92f 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005d8:	605a      	str	r2, [r3, #4]
	return 0;
 80005da:	2300      	movs	r3, #0
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_isatty>:

int _isatty(int file)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
	return 1;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b085      	sub	sp, #20
 80005fe:	af00      	add	r7, sp, #0
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	60b9      	str	r1, [r7, #8]
 8000604:	607a      	str	r2, [r7, #4]
	return 0;
 8000606:	2300      	movs	r3, #0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
	...

08000614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <_sbrk+0x5c>)
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_sbrk+0x60>)
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <_sbrk+0x64>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d102      	bne.n	8000636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <_sbrk+0x64>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <_sbrk+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <_sbrk+0x64>)
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	693a      	ldr	r2, [r7, #16]
 8000640:	429a      	cmp	r2, r3
 8000642:	d207      	bcs.n	8000654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000644:	f001 fc06 	bl	8001e54 <__errno>
 8000648:	4603      	mov	r3, r0
 800064a:	220c      	movs	r2, #12
 800064c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	e009      	b.n	8000668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <_sbrk+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <_sbrk+0x64>)
 8000664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000666:	68fb      	ldr	r3, [r7, #12]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20005000 	.word	0x20005000
 8000674:	00000400 	.word	0x00000400
 8000678:	20000118 	.word	0x20000118
 800067c:	20000138 	.word	0x20000138

08000680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800068e:	490d      	ldr	r1, [pc, #52]	; (80006c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0a      	ldr	r2, [pc, #40]	; (80006cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006a4:	4c0a      	ldr	r4, [pc, #40]	; (80006d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006b2:	f7ff ffe5 	bl	8000680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f001 fbd3 	bl	8001e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fd47 	bl	800014c <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80006c8:	0800309c 	.word	0x0800309c
  ldr r2, =_sbss
 80006cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80006d0:	20000134 	.word	0x20000134

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <RetargetInit>:


UART_HandleTypeDef *gHuart;

//Initialization function sets the uart handler
void RetargetInit(UART_HandleTypeDef *huart) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <RetargetInit+0x28>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <RetargetInit+0x2c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	6898      	ldr	r0, [r3, #8]
 80006ec:	2300      	movs	r3, #0
 80006ee:	2202      	movs	r2, #2
 80006f0:	2100      	movs	r1, #0
 80006f2:	f001 fbf9 	bl	8001ee8 <setvbuf>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000011c 	.word	0x2000011c
 8000704:	2000000c 	.word	0x2000000c

08000708 <_write>:

//Definition of the underlying function for std out
int _write(int fd, char* ptr, int len) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <_write+0x38>)
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	b29a      	uxth	r2, r3
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	f001 f98a 	bl	8001a3a <HAL_UART_Transmit>
 8000726:	4603      	mov	r3, r0
 8000728:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d101      	bne.n	8000734 <_write+0x2c>
    	return len;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	e001      	b.n	8000738 <_write+0x30>
    else
    	return -1;
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000011c 	.word	0x2000011c

08000744 <_read>:

//Definition of the underlying function for std in
int _read(int fd, char* ptr, int len) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <_read+0x38>)
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	2201      	movs	r2, #1
 800075a:	68b9      	ldr	r1, [r7, #8]
 800075c:	f001 f9ff 	bl	8001b5e <HAL_UART_Receive>
 8000760:	4603      	mov	r3, r0
 8000762:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <_read+0x2a>
    	return 1;
 800076a:	2301      	movs	r3, #1
 800076c:	e001      	b.n	8000772 <_read+0x2e>
    else
    	return -1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000011c 	.word	0x2000011c

08000780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f907 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fe28 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f911 	bl	80009f2 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f8e7 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	; (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	20000120 	.word	0x20000120

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	; (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000120 	.word	0x20000120

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	; (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff90 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff49 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff5e 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffb0 	bl	8000960 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e169      	b.n	8000cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f040 8158 	bne.w	8000cee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a9a      	ldr	r2, [pc, #616]	; (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d05e      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a48:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d875      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a4e:	4a98      	ldr	r2, [pc, #608]	; (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d058      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a54:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d86f      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a5a:	4a96      	ldr	r2, [pc, #600]	; (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d052      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a60:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d869      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a66:	4a94      	ldr	r2, [pc, #592]	; (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d04c      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d863      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a72:	4a92      	ldr	r2, [pc, #584]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d046      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a78:	4a90      	ldr	r2, [pc, #576]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d85d      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d82a      	bhi.n	8000ad8 <HAL_GPIO_Init+0xcc>
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d859      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <HAL_GPIO_Init+0x80>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000b07 	.word	0x08000b07
 8000a90:	08000ae1 	.word	0x08000ae1
 8000a94:	08000af3 	.word	0x08000af3
 8000a98:	08000b35 	.word	0x08000b35
 8000a9c:	08000b3b 	.word	0x08000b3b
 8000aa0:	08000b3b 	.word	0x08000b3b
 8000aa4:	08000b3b 	.word	0x08000b3b
 8000aa8:	08000b3b 	.word	0x08000b3b
 8000aac:	08000b3b 	.word	0x08000b3b
 8000ab0:	08000b3b 	.word	0x08000b3b
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b3b 	.word	0x08000b3b
 8000abc:	08000b3b 	.word	0x08000b3b
 8000ac0:	08000b3b 	.word	0x08000b3b
 8000ac4:	08000b3b 	.word	0x08000b3b
 8000ac8:	08000b3b 	.word	0x08000b3b
 8000acc:	08000b3b 	.word	0x08000b3b
 8000ad0:	08000ae9 	.word	0x08000ae9
 8000ad4:	08000afd 	.word	0x08000afd
 8000ad8:	4a79      	ldr	r2, [pc, #484]	; (8000cc0 <HAL_GPIO_Init+0x2b4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ade:	e02c      	b.n	8000b3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e029      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	3304      	adds	r3, #4
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e024      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	3308      	adds	r3, #8
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e01f      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	330c      	adds	r3, #12
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e01a      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e013      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d105      	bne.n	8000b28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	611a      	str	r2, [r3, #16]
          break;
 8000b26:	e009      	b.n	8000b3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	615a      	str	r2, [r3, #20]
          break;
 8000b32:	e003      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          break;
 8000b3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d801      	bhi.n	8000b46 <HAL_GPIO_Init+0x13a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	e001      	b.n	8000b4a <HAL_GPIO_Init+0x13e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d802      	bhi.n	8000b58 <HAL_GPIO_Init+0x14c>
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x152>
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	3b08      	subs	r3, #8
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	210f      	movs	r1, #15
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	6a39      	ldr	r1, [r7, #32]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 80b1 	beq.w	8000cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba4:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <HAL_GPIO_Init+0x2c0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1ec>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a3f      	ldr	r2, [pc, #252]	; (8000cd0 <HAL_GPIO_Init+0x2c4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3e      	ldr	r2, [pc, #248]	; (8000cd4 <HAL_GPIO_Init+0x2c8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1e0>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c0a:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	492c      	ldr	r1, [pc, #176]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	600b      	str	r3, [r1, #0]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4928      	ldr	r1, [pc, #160]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	4922      	ldr	r1, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	604b      	str	r3, [r1, #4]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	491e      	ldr	r1, [pc, #120]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	608b      	str	r3, [r1, #8]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4914      	ldr	r1, [pc, #80]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d021      	beq.n	8000ce0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	490e      	ldr	r1, [pc, #56]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60cb      	str	r3, [r1, #12]
 8000ca8:	e021      	b.n	8000cee <HAL_GPIO_Init+0x2e2>
 8000caa:	bf00      	nop
 8000cac:	10320000 	.word	0x10320000
 8000cb0:	10310000 	.word	0x10310000
 8000cb4:	10220000 	.word	0x10220000
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	10120000 	.word	0x10120000
 8000cc0:	10110000 	.word	0x10110000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_GPIO_Init+0x304>)
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4909      	ldr	r1, [pc, #36]	; (8000d10 <HAL_GPIO_Init+0x304>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f47f ae8e 	bne.w	8000a20 <HAL_GPIO_Init+0x14>
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	372c      	adds	r7, #44	; 0x2c
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
	...

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e272      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8087 	beq.w	8000e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d64:	4b92      	ldr	r3, [pc, #584]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4b8f      	ldr	r3, [pc, #572]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d112      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d88:	d10b      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	4b89      	ldr	r3, [pc, #548]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d06c      	beq.n	8000e70 <HAL_RCC_OscConfig+0x12c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d168      	bne.n	8000e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e24c      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x76>
 8000dac:	4b80      	ldr	r3, [pc, #512]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a7f      	ldr	r2, [pc, #508]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e02e      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x98>
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7a      	ldr	r2, [pc, #488]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b78      	ldr	r3, [pc, #480]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e01d      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0xbc>
 8000de6:	4b72      	ldr	r3, [pc, #456]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a71      	ldr	r2, [pc, #452]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6e      	ldr	r2, [pc, #440]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e00b      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000e00:	4b6b      	ldr	r3, [pc, #428]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a6a      	ldr	r2, [pc, #424]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b68      	ldr	r3, [pc, #416]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a67      	ldr	r2, [pc, #412]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fd06 	bl	8000830 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fd02 	bl	8000830 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e200      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe4>
 8000e46:	e014      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fcf2 	bl	8000830 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fcee 	bl	8000830 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1ec      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	4b53      	ldr	r3, [pc, #332]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x10c>
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d063      	beq.n	8000f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8a:	4b49      	ldr	r3, [pc, #292]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d11c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
 8000e96:	4b46      	ldr	r3, [pc, #280]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	4b43      	ldr	r3, [pc, #268]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d001      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e1c0      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b3d      	ldr	r3, [pc, #244]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4939      	ldr	r1, [pc, #228]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	e03a      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d020      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fca7 	bl	8000830 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fca3 	bl	8000830 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e1a1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4927      	ldr	r1, [pc, #156]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc86 	bl	8000830 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f28:	f7ff fc82 	bl	8000830 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e180      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03a      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc66 	bl	8000830 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc62 	bl	8000830 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e160      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 fad8 	bl	800153c <RCC_Delay>
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f94:	f7ff fc4c 	bl	8000830 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e00f      	b.n	8000fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc48 	bl	8000830 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d908      	bls.n	8000fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e146      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	42420000 	.word	0x42420000
 8000fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a6 	beq.w	8001122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b88      	ldr	r3, [pc, #544]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a87      	ldr	r2, [pc, #540]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b85      	ldr	r3, [pc, #532]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b82      	ldr	r3, [pc, #520]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b7f      	ldr	r3, [pc, #508]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7e      	ldr	r2, [pc, #504]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101a:	f7ff fc09 	bl	8000830 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fc05 	bl	8000830 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e103      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b75      	ldr	r3, [pc, #468]	; (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x312>
 8001048:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a6e      	ldr	r2, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e02d      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x334>
 800105e:	4b6a      	ldr	r3, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a69      	ldr	r2, [pc, #420]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a66      	ldr	r2, [pc, #408]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	e01c      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x356>
 8001080:	4b61      	ldr	r3, [pc, #388]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a60      	ldr	r2, [pc, #384]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	4b5e      	ldr	r3, [pc, #376]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a5d      	ldr	r2, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 800109a:	4b5b      	ldr	r3, [pc, #364]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a5a      	ldr	r2, [pc, #360]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a57      	ldr	r2, [pc, #348]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d015      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fbb9 	bl	8000830 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fbb5 	bl	8000830 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0b1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ee      	beq.n	80010c2 <HAL_RCC_OscConfig+0x37e>
 80010e4:	e014      	b.n	8001110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fba3 	bl	8000830 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb9f 	bl	8000830 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e09b      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ee      	bne.n	80010ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d105      	bne.n	8001122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001116:	4b3c      	ldr	r3, [pc, #240]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b36      	ldr	r3, [pc, #216]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d061      	beq.n	80011fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d146      	bne.n	80011ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb73 	bl	8000830 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fb6f 	bl	8000830 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e06d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f0      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d108      	bne.n	8001188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4921      	ldr	r1, [pc, #132]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a19      	ldr	r1, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001198:	430b      	orrs	r3, r1
 800119a:	491b      	ldr	r1, [pc, #108]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb43 	bl	8000830 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fb3f 	bl	8000830 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e03d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x46a>
 80011cc:	e035      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb2c 	bl	8000830 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fb28 	bl	8000830 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e026      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x498>
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e019      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8001208:	40021000 	.word	0x40021000
 800120c:	40007000 	.word	0x40007000
 8001210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x500>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0d0      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b6a      	ldr	r3, [pc, #424]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d910      	bls.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b67      	ldr	r3, [pc, #412]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 0207 	bic.w	r2, r3, #7
 8001272:	4965      	ldr	r1, [pc, #404]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0b8      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a4:	4b59      	ldr	r3, [pc, #356]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a58      	ldr	r2, [pc, #352]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b50      	ldr	r3, [pc, #320]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	494d      	ldr	r1, [pc, #308]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d040      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d115      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e07f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b41      	ldr	r3, [pc, #260]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e073      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e06b      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4936      	ldr	r1, [pc, #216]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fa7a 	bl	8000830 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fa76 	bl	8000830 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	; 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e053      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d210      	bcs.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4922      	ldr	r1, [pc, #136]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e032      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	490e      	ldr	r1, [pc, #56]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d6:	f000 f821 	bl	800141c <HAL_RCC_GetSysClockFreq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b0b      	ldr	r3, [pc, #44]	; (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	490a      	ldr	r1, [pc, #40]	; (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <HAL_RCC_ClockConfig+0x1cc>)
 80013f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f9d8 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000
 800140c:	40021000 	.word	0x40021000
 8001410:	08002fe4 	.word	0x08002fe4
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	b490      	push	{r4, r7}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001424:	1d3c      	adds	r4, r7, #4
 8001426:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001428:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800142c:	f240 2301 	movw	r3, #513	; 0x201
 8001430:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d002      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x40>
 8001456:	2b08      	cmp	r3, #8
 8001458:	d003      	beq.n	8001462 <HAL_RCC_GetSysClockFreq+0x46>
 800145a:	e02b      	b.n	80014b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800145e:	623b      	str	r3, [r7, #32]
      break;
 8001460:	e02b      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	0c9b      	lsrs	r3, r3, #18
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	3328      	adds	r3, #40	; 0x28
 800146c:	443b      	add	r3, r7
 800146e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001472:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d012      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	0c5b      	lsrs	r3, r3, #17
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	3328      	adds	r3, #40	; 0x28
 800148a:	443b      	add	r3, r7
 800148c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001490:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001496:	fb03 f202 	mul.w	r2, r3, r2
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	e004      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	623b      	str	r3, [r7, #32]
      break;
 80014b2:	e002      	b.n	80014ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014b6:	623b      	str	r3, [r7, #32]
      break;
 80014b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ba:	6a3b      	ldr	r3, [r7, #32]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3728      	adds	r7, #40	; 0x28
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc90      	pop	{r4, r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	08002fd4 	.word	0x08002fd4
 80014cc:	40021000 	.word	0x40021000
 80014d0:	007a1200 	.word	0x007a1200
 80014d4:	003d0900 	.word	0x003d0900

080014d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014dc:	4b02      	ldr	r3, [pc, #8]	; (80014e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000

080014ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014f0:	f7ff fff2 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	4903      	ldr	r1, [pc, #12]	; (8001510 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001502:	5ccb      	ldrb	r3, [r1, r3]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	08002ff4 	.word	0x08002ff4

08001514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001518:	f7ff ffde 	bl	80014d8 <HAL_RCC_GetHCLKFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0adb      	lsrs	r3, r3, #11
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	08002ff4 	.word	0x08002ff4

0800153c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <RCC_Delay+0x34>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <RCC_Delay+0x38>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a5b      	lsrs	r3, r3, #9
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001558:	bf00      	nop
  }
  while (Delay --);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	60fa      	str	r2, [r7, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f9      	bne.n	8001558 <RCC_Delay+0x1c>
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	20000000 	.word	0x20000000
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e093      	b.n	80016b4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d106      	bne.n	80015a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7fe ff57 	bl	8000454 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015bc:	f023 0307 	bic.w	r3, r3, #7
 80015c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f000 f903 	bl	80017d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	4313      	orrs	r3, r2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001618:	f023 030c 	bic.w	r3, r3, #12
 800161c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001628:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	4313      	orrs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	011a      	lsls	r2, r3, #4
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	031b      	lsls	r3, r3, #12
 8001648:	4313      	orrs	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001656:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	4313      	orrs	r3, r2
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80016cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80016d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80016e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d110      	bne.n	800170e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80016f2:	7b7b      	ldrb	r3, [r7, #13]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d001      	beq.n	80016fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e069      	b.n	80017d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800170c:	e031      	b.n	8001772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	2b04      	cmp	r3, #4
 8001712:	d110      	bne.n	8001736 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d102      	bne.n	8001720 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d001      	beq.n	8001724 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e055      	b.n	80017d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001734:	e01d      	b.n	8001772 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8001742:	7b7b      	ldrb	r3, [r7, #13]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d102      	bne.n	800174e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d001      	beq.n	8001752 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e03e      	b.n	80017d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2202      	movs	r2, #2
 800175e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2202      	movs	r2, #2
 8001766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2202      	movs	r2, #2
 800176e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_TIM_Encoder_Start+0xc4>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d008      	beq.n	8001790 <HAL_TIM_Encoder_Start+0xd4>
 800177e:	e00f      	b.n	80017a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f887 	bl	800189c <TIM_CCxChannelCmd>
      break;
 800178e:	e016      	b.n	80017be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	2104      	movs	r1, #4
 8001798:	4618      	mov	r0, r3
 800179a:	f000 f87f 	bl	800189c <TIM_CCxChannelCmd>
      break;
 800179e:	e00e      	b.n	80017be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 f877 	bl	800189c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	2104      	movs	r1, #4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f870 	bl	800189c <TIM_CCxChannelCmd>
      break;
 80017bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0201 	orr.w	r2, r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a29      	ldr	r2, [pc, #164]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00b      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f6:	d007      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a26      	ldr	r2, [pc, #152]	; (8001894 <TIM_Base_SetConfig+0xbc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <TIM_Base_SetConfig+0x30>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a25      	ldr	r2, [pc, #148]	; (8001898 <TIM_Base_SetConfig+0xc0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d108      	bne.n	800181a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800180e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4313      	orrs	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00b      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001828:	d007      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <TIM_Base_SetConfig+0xbc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d003      	beq.n	800183a <TIM_Base_SetConfig+0x62>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <TIM_Base_SetConfig+0xc0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d108      	bne.n	800184c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <TIM_Base_SetConfig+0xb8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d103      	bne.n	8001880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	615a      	str	r2, [r3, #20]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800

0800189c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	2201      	movs	r2, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	621a      	str	r2, [r3, #32]
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e046      	b.n	800198a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2202      	movs	r2, #2
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a16      	ldr	r2, [pc, #88]	; (8001994 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00e      	beq.n	800195e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001948:	d009      	beq.n	800195e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d004      	beq.n	800195e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a10      	ldr	r2, [pc, #64]	; (800199c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10c      	bne.n	8001978 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001964:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	4313      	orrs	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68ba      	ldr	r2, [r7, #8]
 8001976:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40012c00 	.word	0x40012c00
 8001998:	40000400 	.word	0x40000400
 800199c:	40000800 	.word	0x40000800

080019a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e03f      	b.n	8001a32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fd80 	bl	80004cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9a7 	bl	8001d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b08a      	sub	sp, #40	; 0x28
 8001a3e:	af02      	add	r7, sp, #8
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	603b      	str	r3, [r7, #0]
 8001a46:	4613      	mov	r3, r2
 8001a48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d17c      	bne.n	8001b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_UART_Transmit+0x2c>
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e075      	b.n	8001b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_UART_Transmit+0x3e>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e06e      	b.n	8001b56 <HAL_UART_Transmit+0x11c>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	; 0x21
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a8e:	f7fe fecf 	bl	8000830 <HAL_GetTick>
 8001a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa8:	d108      	bne.n	8001abc <HAL_UART_Transmit+0x82>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d104      	bne.n	8001abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	e003      	b.n	8001ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001acc:	e02a      	b.n	8001b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8e2 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e036      	b.n	8001b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10b      	bne.n	8001b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3302      	adds	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	e007      	b.n	8001b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1cf      	bne.n	8001ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f8b2 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e006      	b.n	8001b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e000      	b.n	8001b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b08a      	sub	sp, #40	; 0x28
 8001b62:	af02      	add	r7, sp, #8
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	f040 808c 	bne.w	8001c98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_UART_Receive+0x2e>
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e084      	b.n	8001c9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_UART_Receive+0x40>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e07d      	b.n	8001c9a <HAL_UART_Receive+0x13c>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2222      	movs	r2, #34	; 0x22
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bba:	f7fe fe39 	bl	8000830 <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd4:	d108      	bne.n	8001be8 <HAL_UART_Receive+0x8a>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d104      	bne.n	8001be8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	e003      	b.n	8001bf0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bf8:	e043      	b.n	8001c82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2120      	movs	r1, #32
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 f84c 	bl	8001ca2 <UART_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e042      	b.n	8001c9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	e01f      	b.n	8001c74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3c:	d007      	beq.n	8001c4e <HAL_UART_Receive+0xf0>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_UART_Receive+0xfe>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e008      	b.n	8001c6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1b6      	bne.n	8001bfa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	e000      	b.n	8001c9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001c98:	2302      	movs	r3, #2
  }
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb2:	e02c      	b.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cba:	d028      	beq.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	f7fe fdb5 	bl	8000830 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d21d      	bcs.n	8001d0e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e00f      	b.n	8001d2e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d0c3      	beq.n	8001cb4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d72:	f023 030c 	bic.w	r3, r3, #12
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <UART_SetConfig+0x114>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001da0:	f7ff fbb8 	bl	8001514 <HAL_RCC_GetPCLK2Freq>
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	e002      	b.n	8001dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da8:	f7ff fba0 	bl	80014ec <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <UART_SetConfig+0x118>)
 8001de6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	fb00 f303 	mul.w	r3, r0, r3
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	3332      	adds	r3, #50	; 0x32
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <UART_SetConfig+0x118>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	4419      	add	r1, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <UART_SetConfig+0x118>)
 8001e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	3332      	adds	r3, #50	; 0x32
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	440a      	add	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	51eb851f 	.word	0x51eb851f

08001e54 <__errno>:
 8001e54:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <__errno+0x8>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000000c 	.word	0x2000000c

08001e60 <__libc_init_array>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	2600      	movs	r6, #0
 8001e64:	4d0c      	ldr	r5, [pc, #48]	; (8001e98 <__libc_init_array+0x38>)
 8001e66:	4c0d      	ldr	r4, [pc, #52]	; (8001e9c <__libc_init_array+0x3c>)
 8001e68:	1b64      	subs	r4, r4, r5
 8001e6a:	10a4      	asrs	r4, r4, #2
 8001e6c:	42a6      	cmp	r6, r4
 8001e6e:	d109      	bne.n	8001e84 <__libc_init_array+0x24>
 8001e70:	f001 f884 	bl	8002f7c <_init>
 8001e74:	2600      	movs	r6, #0
 8001e76:	4d0a      	ldr	r5, [pc, #40]	; (8001ea0 <__libc_init_array+0x40>)
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <__libc_init_array+0x44>)
 8001e7a:	1b64      	subs	r4, r4, r5
 8001e7c:	10a4      	asrs	r4, r4, #2
 8001e7e:	42a6      	cmp	r6, r4
 8001e80:	d105      	bne.n	8001e8e <__libc_init_array+0x2e>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e88:	4798      	blx	r3
 8001e8a:	3601      	adds	r6, #1
 8001e8c:	e7ee      	b.n	8001e6c <__libc_init_array+0xc>
 8001e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e92:	4798      	blx	r3
 8001e94:	3601      	adds	r6, #1
 8001e96:	e7f2      	b.n	8001e7e <__libc_init_array+0x1e>
 8001e98:	08003094 	.word	0x08003094
 8001e9c:	08003094 	.word	0x08003094
 8001ea0:	08003094 	.word	0x08003094
 8001ea4:	08003098 	.word	0x08003098

08001ea8 <memset>:
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4402      	add	r2, r0
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <memset+0xa>
 8001eb0:	4770      	bx	lr
 8001eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb6:	e7f9      	b.n	8001eac <memset+0x4>

08001eb8 <iprintf>:
 8001eb8:	b40f      	push	{r0, r1, r2, r3}
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <iprintf+0x2c>)
 8001ebc:	b513      	push	{r0, r1, r4, lr}
 8001ebe:	681c      	ldr	r4, [r3, #0]
 8001ec0:	b124      	cbz	r4, 8001ecc <iprintf+0x14>
 8001ec2:	69a3      	ldr	r3, [r4, #24]
 8001ec4:	b913      	cbnz	r3, 8001ecc <iprintf+0x14>
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f000 f9ea 	bl	80022a0 <__sinit>
 8001ecc:	ab05      	add	r3, sp, #20
 8001ece:	4620      	mov	r0, r4
 8001ed0:	9a04      	ldr	r2, [sp, #16]
 8001ed2:	68a1      	ldr	r1, [r4, #8]
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	f000 fbf5 	bl	80026c4 <_vfiprintf_r>
 8001eda:	b002      	add	sp, #8
 8001edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee0:	b004      	add	sp, #16
 8001ee2:	4770      	bx	lr
 8001ee4:	2000000c 	.word	0x2000000c

08001ee8 <setvbuf>:
 8001ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001eec:	461d      	mov	r5, r3
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <setvbuf+0x17c>)
 8001ef0:	4604      	mov	r4, r0
 8001ef2:	681f      	ldr	r7, [r3, #0]
 8001ef4:	460e      	mov	r6, r1
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	b127      	cbz	r7, 8001f04 <setvbuf+0x1c>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	b913      	cbnz	r3, 8001f04 <setvbuf+0x1c>
 8001efe:	4638      	mov	r0, r7
 8001f00:	f000 f9ce 	bl	80022a0 <__sinit>
 8001f04:	4b58      	ldr	r3, [pc, #352]	; (8002068 <setvbuf+0x180>)
 8001f06:	429c      	cmp	r4, r3
 8001f08:	d167      	bne.n	8001fda <setvbuf+0xf2>
 8001f0a:	687c      	ldr	r4, [r7, #4]
 8001f0c:	f1b8 0f02 	cmp.w	r8, #2
 8001f10:	d006      	beq.n	8001f20 <setvbuf+0x38>
 8001f12:	f1b8 0f01 	cmp.w	r8, #1
 8001f16:	f200 809f 	bhi.w	8002058 <setvbuf+0x170>
 8001f1a:	2d00      	cmp	r5, #0
 8001f1c:	f2c0 809c 	blt.w	8002058 <setvbuf+0x170>
 8001f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f22:	07db      	lsls	r3, r3, #31
 8001f24:	d405      	bmi.n	8001f32 <setvbuf+0x4a>
 8001f26:	89a3      	ldrh	r3, [r4, #12]
 8001f28:	0598      	lsls	r0, r3, #22
 8001f2a:	d402      	bmi.n	8001f32 <setvbuf+0x4a>
 8001f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f2e:	f000 fa55 	bl	80023dc <__retarget_lock_acquire_recursive>
 8001f32:	4621      	mov	r1, r4
 8001f34:	4638      	mov	r0, r7
 8001f36:	f000 f91f 	bl	8002178 <_fflush_r>
 8001f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f3c:	b141      	cbz	r1, 8001f50 <setvbuf+0x68>
 8001f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f42:	4299      	cmp	r1, r3
 8001f44:	d002      	beq.n	8001f4c <setvbuf+0x64>
 8001f46:	4638      	mov	r0, r7
 8001f48:	f000 fab8 	bl	80024bc <_free_r>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8001f50:	2300      	movs	r3, #0
 8001f52:	61a3      	str	r3, [r4, #24]
 8001f54:	6063      	str	r3, [r4, #4]
 8001f56:	89a3      	ldrh	r3, [r4, #12]
 8001f58:	0619      	lsls	r1, r3, #24
 8001f5a:	d503      	bpl.n	8001f64 <setvbuf+0x7c>
 8001f5c:	4638      	mov	r0, r7
 8001f5e:	6921      	ldr	r1, [r4, #16]
 8001f60:	f000 faac 	bl	80024bc <_free_r>
 8001f64:	89a3      	ldrh	r3, [r4, #12]
 8001f66:	f1b8 0f02 	cmp.w	r8, #2
 8001f6a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	81a3      	strh	r3, [r4, #12]
 8001f74:	d06c      	beq.n	8002050 <setvbuf+0x168>
 8001f76:	ab01      	add	r3, sp, #4
 8001f78:	466a      	mov	r2, sp
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	4638      	mov	r0, r7
 8001f7e:	f000 fa2f 	bl	80023e0 <__swhatbuf_r>
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	4318      	orrs	r0, r3
 8001f86:	81a0      	strh	r0, [r4, #12]
 8001f88:	2d00      	cmp	r5, #0
 8001f8a:	d130      	bne.n	8001fee <setvbuf+0x106>
 8001f8c:	9d00      	ldr	r5, [sp, #0]
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f000 fa8c 	bl	80024ac <malloc>
 8001f94:	4606      	mov	r6, r0
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d155      	bne.n	8002046 <setvbuf+0x15e>
 8001f9a:	f8dd 9000 	ldr.w	r9, [sp]
 8001f9e:	45a9      	cmp	r9, r5
 8001fa0:	d14a      	bne.n	8002038 <setvbuf+0x150>
 8001fa2:	f04f 35ff 	mov.w	r5, #4294967295
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60a2      	str	r2, [r4, #8]
 8001faa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001fae:	6022      	str	r2, [r4, #0]
 8001fb0:	6122      	str	r2, [r4, #16]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fb8:	6162      	str	r2, [r4, #20]
 8001fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	07d2      	lsls	r2, r2, #31
 8001fc2:	81a3      	strh	r3, [r4, #12]
 8001fc4:	d405      	bmi.n	8001fd2 <setvbuf+0xea>
 8001fc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001fca:	d102      	bne.n	8001fd2 <setvbuf+0xea>
 8001fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001fce:	f000 fa06 	bl	80023de <__retarget_lock_release_recursive>
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	b003      	add	sp, #12
 8001fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <setvbuf+0x184>)
 8001fdc:	429c      	cmp	r4, r3
 8001fde:	d101      	bne.n	8001fe4 <setvbuf+0xfc>
 8001fe0:	68bc      	ldr	r4, [r7, #8]
 8001fe2:	e793      	b.n	8001f0c <setvbuf+0x24>
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <setvbuf+0x188>)
 8001fe6:	429c      	cmp	r4, r3
 8001fe8:	bf08      	it	eq
 8001fea:	68fc      	ldreq	r4, [r7, #12]
 8001fec:	e78e      	b.n	8001f0c <setvbuf+0x24>
 8001fee:	2e00      	cmp	r6, #0
 8001ff0:	d0cd      	beq.n	8001f8e <setvbuf+0xa6>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	b913      	cbnz	r3, 8001ffc <setvbuf+0x114>
 8001ff6:	4638      	mov	r0, r7
 8001ff8:	f000 f952 	bl	80022a0 <__sinit>
 8001ffc:	f1b8 0f01 	cmp.w	r8, #1
 8002000:	bf08      	it	eq
 8002002:	89a3      	ldrheq	r3, [r4, #12]
 8002004:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002008:	bf04      	itt	eq
 800200a:	f043 0301 	orreq.w	r3, r3, #1
 800200e:	81a3      	strheq	r3, [r4, #12]
 8002010:	89a2      	ldrh	r2, [r4, #12]
 8002012:	6026      	str	r6, [r4, #0]
 8002014:	f012 0308 	ands.w	r3, r2, #8
 8002018:	d01c      	beq.n	8002054 <setvbuf+0x16c>
 800201a:	07d3      	lsls	r3, r2, #31
 800201c:	bf41      	itttt	mi
 800201e:	2300      	movmi	r3, #0
 8002020:	426d      	negmi	r5, r5
 8002022:	60a3      	strmi	r3, [r4, #8]
 8002024:	61a5      	strmi	r5, [r4, #24]
 8002026:	bf58      	it	pl
 8002028:	60a5      	strpl	r5, [r4, #8]
 800202a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800202c:	f015 0501 	ands.w	r5, r5, #1
 8002030:	d115      	bne.n	800205e <setvbuf+0x176>
 8002032:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002036:	e7c8      	b.n	8001fca <setvbuf+0xe2>
 8002038:	4648      	mov	r0, r9
 800203a:	f000 fa37 	bl	80024ac <malloc>
 800203e:	4606      	mov	r6, r0
 8002040:	2800      	cmp	r0, #0
 8002042:	d0ae      	beq.n	8001fa2 <setvbuf+0xba>
 8002044:	464d      	mov	r5, r9
 8002046:	89a3      	ldrh	r3, [r4, #12]
 8002048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204c:	81a3      	strh	r3, [r4, #12]
 800204e:	e7d0      	b.n	8001ff2 <setvbuf+0x10a>
 8002050:	2500      	movs	r5, #0
 8002052:	e7a8      	b.n	8001fa6 <setvbuf+0xbe>
 8002054:	60a3      	str	r3, [r4, #8]
 8002056:	e7e8      	b.n	800202a <setvbuf+0x142>
 8002058:	f04f 35ff 	mov.w	r5, #4294967295
 800205c:	e7b9      	b.n	8001fd2 <setvbuf+0xea>
 800205e:	2500      	movs	r5, #0
 8002060:	e7b7      	b.n	8001fd2 <setvbuf+0xea>
 8002062:	bf00      	nop
 8002064:	2000000c 	.word	0x2000000c
 8002068:	08003020 	.word	0x08003020
 800206c:	08003040 	.word	0x08003040
 8002070:	08003000 	.word	0x08003000

08002074 <__sflush_r>:
 8002074:	898a      	ldrh	r2, [r1, #12]
 8002076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002078:	4605      	mov	r5, r0
 800207a:	0710      	lsls	r0, r2, #28
 800207c:	460c      	mov	r4, r1
 800207e:	d457      	bmi.n	8002130 <__sflush_r+0xbc>
 8002080:	684b      	ldr	r3, [r1, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	dc04      	bgt.n	8002090 <__sflush_r+0x1c>
 8002086:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	dc01      	bgt.n	8002090 <__sflush_r+0x1c>
 800208c:	2000      	movs	r0, #0
 800208e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002090:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002092:	2e00      	cmp	r6, #0
 8002094:	d0fa      	beq.n	800208c <__sflush_r+0x18>
 8002096:	2300      	movs	r3, #0
 8002098:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800209c:	682f      	ldr	r7, [r5, #0]
 800209e:	602b      	str	r3, [r5, #0]
 80020a0:	d032      	beq.n	8002108 <__sflush_r+0x94>
 80020a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020a4:	89a3      	ldrh	r3, [r4, #12]
 80020a6:	075a      	lsls	r2, r3, #29
 80020a8:	d505      	bpl.n	80020b6 <__sflush_r+0x42>
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	1ac0      	subs	r0, r0, r3
 80020ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020b0:	b10b      	cbz	r3, 80020b6 <__sflush_r+0x42>
 80020b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020b4:	1ac0      	subs	r0, r0, r3
 80020b6:	2300      	movs	r3, #0
 80020b8:	4602      	mov	r2, r0
 80020ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020bc:	4628      	mov	r0, r5
 80020be:	6a21      	ldr	r1, [r4, #32]
 80020c0:	47b0      	blx	r6
 80020c2:	1c43      	adds	r3, r0, #1
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	d106      	bne.n	80020d6 <__sflush_r+0x62>
 80020c8:	6829      	ldr	r1, [r5, #0]
 80020ca:	291d      	cmp	r1, #29
 80020cc:	d82c      	bhi.n	8002128 <__sflush_r+0xb4>
 80020ce:	4a29      	ldr	r2, [pc, #164]	; (8002174 <__sflush_r+0x100>)
 80020d0:	40ca      	lsrs	r2, r1
 80020d2:	07d6      	lsls	r6, r2, #31
 80020d4:	d528      	bpl.n	8002128 <__sflush_r+0xb4>
 80020d6:	2200      	movs	r2, #0
 80020d8:	6062      	str	r2, [r4, #4]
 80020da:	6922      	ldr	r2, [r4, #16]
 80020dc:	04d9      	lsls	r1, r3, #19
 80020de:	6022      	str	r2, [r4, #0]
 80020e0:	d504      	bpl.n	80020ec <__sflush_r+0x78>
 80020e2:	1c42      	adds	r2, r0, #1
 80020e4:	d101      	bne.n	80020ea <__sflush_r+0x76>
 80020e6:	682b      	ldr	r3, [r5, #0]
 80020e8:	b903      	cbnz	r3, 80020ec <__sflush_r+0x78>
 80020ea:	6560      	str	r0, [r4, #84]	; 0x54
 80020ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020ee:	602f      	str	r7, [r5, #0]
 80020f0:	2900      	cmp	r1, #0
 80020f2:	d0cb      	beq.n	800208c <__sflush_r+0x18>
 80020f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020f8:	4299      	cmp	r1, r3
 80020fa:	d002      	beq.n	8002102 <__sflush_r+0x8e>
 80020fc:	4628      	mov	r0, r5
 80020fe:	f000 f9dd 	bl	80024bc <_free_r>
 8002102:	2000      	movs	r0, #0
 8002104:	6360      	str	r0, [r4, #52]	; 0x34
 8002106:	e7c2      	b.n	800208e <__sflush_r+0x1a>
 8002108:	6a21      	ldr	r1, [r4, #32]
 800210a:	2301      	movs	r3, #1
 800210c:	4628      	mov	r0, r5
 800210e:	47b0      	blx	r6
 8002110:	1c41      	adds	r1, r0, #1
 8002112:	d1c7      	bne.n	80020a4 <__sflush_r+0x30>
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0c4      	beq.n	80020a4 <__sflush_r+0x30>
 800211a:	2b1d      	cmp	r3, #29
 800211c:	d001      	beq.n	8002122 <__sflush_r+0xae>
 800211e:	2b16      	cmp	r3, #22
 8002120:	d101      	bne.n	8002126 <__sflush_r+0xb2>
 8002122:	602f      	str	r7, [r5, #0]
 8002124:	e7b2      	b.n	800208c <__sflush_r+0x18>
 8002126:	89a3      	ldrh	r3, [r4, #12]
 8002128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212c:	81a3      	strh	r3, [r4, #12]
 800212e:	e7ae      	b.n	800208e <__sflush_r+0x1a>
 8002130:	690f      	ldr	r7, [r1, #16]
 8002132:	2f00      	cmp	r7, #0
 8002134:	d0aa      	beq.n	800208c <__sflush_r+0x18>
 8002136:	0793      	lsls	r3, r2, #30
 8002138:	bf18      	it	ne
 800213a:	2300      	movne	r3, #0
 800213c:	680e      	ldr	r6, [r1, #0]
 800213e:	bf08      	it	eq
 8002140:	694b      	ldreq	r3, [r1, #20]
 8002142:	1bf6      	subs	r6, r6, r7
 8002144:	600f      	str	r7, [r1, #0]
 8002146:	608b      	str	r3, [r1, #8]
 8002148:	2e00      	cmp	r6, #0
 800214a:	dd9f      	ble.n	800208c <__sflush_r+0x18>
 800214c:	4633      	mov	r3, r6
 800214e:	463a      	mov	r2, r7
 8002150:	4628      	mov	r0, r5
 8002152:	6a21      	ldr	r1, [r4, #32]
 8002154:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002158:	47e0      	blx	ip
 800215a:	2800      	cmp	r0, #0
 800215c:	dc06      	bgt.n	800216c <__sflush_r+0xf8>
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002168:	81a3      	strh	r3, [r4, #12]
 800216a:	e790      	b.n	800208e <__sflush_r+0x1a>
 800216c:	4407      	add	r7, r0
 800216e:	1a36      	subs	r6, r6, r0
 8002170:	e7ea      	b.n	8002148 <__sflush_r+0xd4>
 8002172:	bf00      	nop
 8002174:	20400001 	.word	0x20400001

08002178 <_fflush_r>:
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	690b      	ldr	r3, [r1, #16]
 800217c:	4605      	mov	r5, r0
 800217e:	460c      	mov	r4, r1
 8002180:	b913      	cbnz	r3, 8002188 <_fflush_r+0x10>
 8002182:	2500      	movs	r5, #0
 8002184:	4628      	mov	r0, r5
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	b118      	cbz	r0, 8002192 <_fflush_r+0x1a>
 800218a:	6983      	ldr	r3, [r0, #24]
 800218c:	b90b      	cbnz	r3, 8002192 <_fflush_r+0x1a>
 800218e:	f000 f887 	bl	80022a0 <__sinit>
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <_fflush_r+0x6c>)
 8002194:	429c      	cmp	r4, r3
 8002196:	d11b      	bne.n	80021d0 <_fflush_r+0x58>
 8002198:	686c      	ldr	r4, [r5, #4]
 800219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ef      	beq.n	8002182 <_fflush_r+0xa>
 80021a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021a4:	07d0      	lsls	r0, r2, #31
 80021a6:	d404      	bmi.n	80021b2 <_fflush_r+0x3a>
 80021a8:	0599      	lsls	r1, r3, #22
 80021aa:	d402      	bmi.n	80021b2 <_fflush_r+0x3a>
 80021ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ae:	f000 f915 	bl	80023dc <__retarget_lock_acquire_recursive>
 80021b2:	4628      	mov	r0, r5
 80021b4:	4621      	mov	r1, r4
 80021b6:	f7ff ff5d 	bl	8002074 <__sflush_r>
 80021ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021bc:	4605      	mov	r5, r0
 80021be:	07da      	lsls	r2, r3, #31
 80021c0:	d4e0      	bmi.n	8002184 <_fflush_r+0xc>
 80021c2:	89a3      	ldrh	r3, [r4, #12]
 80021c4:	059b      	lsls	r3, r3, #22
 80021c6:	d4dd      	bmi.n	8002184 <_fflush_r+0xc>
 80021c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ca:	f000 f908 	bl	80023de <__retarget_lock_release_recursive>
 80021ce:	e7d9      	b.n	8002184 <_fflush_r+0xc>
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <_fflush_r+0x70>)
 80021d2:	429c      	cmp	r4, r3
 80021d4:	d101      	bne.n	80021da <_fflush_r+0x62>
 80021d6:	68ac      	ldr	r4, [r5, #8]
 80021d8:	e7df      	b.n	800219a <_fflush_r+0x22>
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <_fflush_r+0x74>)
 80021dc:	429c      	cmp	r4, r3
 80021de:	bf08      	it	eq
 80021e0:	68ec      	ldreq	r4, [r5, #12]
 80021e2:	e7da      	b.n	800219a <_fflush_r+0x22>
 80021e4:	08003020 	.word	0x08003020
 80021e8:	08003040 	.word	0x08003040
 80021ec:	08003000 	.word	0x08003000

080021f0 <std>:
 80021f0:	2300      	movs	r3, #0
 80021f2:	b510      	push	{r4, lr}
 80021f4:	4604      	mov	r4, r0
 80021f6:	e9c0 3300 	strd	r3, r3, [r0]
 80021fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021fe:	6083      	str	r3, [r0, #8]
 8002200:	8181      	strh	r1, [r0, #12]
 8002202:	6643      	str	r3, [r0, #100]	; 0x64
 8002204:	81c2      	strh	r2, [r0, #14]
 8002206:	6183      	str	r3, [r0, #24]
 8002208:	4619      	mov	r1, r3
 800220a:	2208      	movs	r2, #8
 800220c:	305c      	adds	r0, #92	; 0x5c
 800220e:	f7ff fe4b 	bl	8001ea8 <memset>
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <std+0x38>)
 8002214:	6224      	str	r4, [r4, #32]
 8002216:	6263      	str	r3, [r4, #36]	; 0x24
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <std+0x3c>)
 800221a:	62a3      	str	r3, [r4, #40]	; 0x28
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <std+0x40>)
 800221e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002220:	4b04      	ldr	r3, [pc, #16]	; (8002234 <std+0x44>)
 8002222:	6323      	str	r3, [r4, #48]	; 0x30
 8002224:	bd10      	pop	{r4, pc}
 8002226:	bf00      	nop
 8002228:	08002c71 	.word	0x08002c71
 800222c:	08002c93 	.word	0x08002c93
 8002230:	08002ccb 	.word	0x08002ccb
 8002234:	08002cef 	.word	0x08002cef

08002238 <_cleanup_r>:
 8002238:	4901      	ldr	r1, [pc, #4]	; (8002240 <_cleanup_r+0x8>)
 800223a:	f000 b8af 	b.w	800239c <_fwalk_reent>
 800223e:	bf00      	nop
 8002240:	08002179 	.word	0x08002179

08002244 <__sfmoreglue>:
 8002244:	2268      	movs	r2, #104	; 0x68
 8002246:	b570      	push	{r4, r5, r6, lr}
 8002248:	1e4d      	subs	r5, r1, #1
 800224a:	4355      	muls	r5, r2
 800224c:	460e      	mov	r6, r1
 800224e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002252:	f000 f99b 	bl	800258c <_malloc_r>
 8002256:	4604      	mov	r4, r0
 8002258:	b140      	cbz	r0, 800226c <__sfmoreglue+0x28>
 800225a:	2100      	movs	r1, #0
 800225c:	e9c0 1600 	strd	r1, r6, [r0]
 8002260:	300c      	adds	r0, #12
 8002262:	60a0      	str	r0, [r4, #8]
 8002264:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002268:	f7ff fe1e 	bl	8001ea8 <memset>
 800226c:	4620      	mov	r0, r4
 800226e:	bd70      	pop	{r4, r5, r6, pc}

08002270 <__sfp_lock_acquire>:
 8002270:	4801      	ldr	r0, [pc, #4]	; (8002278 <__sfp_lock_acquire+0x8>)
 8002272:	f000 b8b3 	b.w	80023dc <__retarget_lock_acquire_recursive>
 8002276:	bf00      	nop
 8002278:	20000125 	.word	0x20000125

0800227c <__sfp_lock_release>:
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <__sfp_lock_release+0x8>)
 800227e:	f000 b8ae 	b.w	80023de <__retarget_lock_release_recursive>
 8002282:	bf00      	nop
 8002284:	20000125 	.word	0x20000125

08002288 <__sinit_lock_acquire>:
 8002288:	4801      	ldr	r0, [pc, #4]	; (8002290 <__sinit_lock_acquire+0x8>)
 800228a:	f000 b8a7 	b.w	80023dc <__retarget_lock_acquire_recursive>
 800228e:	bf00      	nop
 8002290:	20000126 	.word	0x20000126

08002294 <__sinit_lock_release>:
 8002294:	4801      	ldr	r0, [pc, #4]	; (800229c <__sinit_lock_release+0x8>)
 8002296:	f000 b8a2 	b.w	80023de <__retarget_lock_release_recursive>
 800229a:	bf00      	nop
 800229c:	20000126 	.word	0x20000126

080022a0 <__sinit>:
 80022a0:	b510      	push	{r4, lr}
 80022a2:	4604      	mov	r4, r0
 80022a4:	f7ff fff0 	bl	8002288 <__sinit_lock_acquire>
 80022a8:	69a3      	ldr	r3, [r4, #24]
 80022aa:	b11b      	cbz	r3, 80022b4 <__sinit+0x14>
 80022ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022b0:	f7ff bff0 	b.w	8002294 <__sinit_lock_release>
 80022b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022b8:	6523      	str	r3, [r4, #80]	; 0x50
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <__sinit+0x68>)
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <__sinit+0x6c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80022c2:	42a3      	cmp	r3, r4
 80022c4:	bf08      	it	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	4620      	mov	r0, r4
 80022ca:	bf08      	it	eq
 80022cc:	61a3      	streq	r3, [r4, #24]
 80022ce:	f000 f81f 	bl	8002310 <__sfp>
 80022d2:	6060      	str	r0, [r4, #4]
 80022d4:	4620      	mov	r0, r4
 80022d6:	f000 f81b 	bl	8002310 <__sfp>
 80022da:	60a0      	str	r0, [r4, #8]
 80022dc:	4620      	mov	r0, r4
 80022de:	f000 f817 	bl	8002310 <__sfp>
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	60e0      	str	r0, [r4, #12]
 80022e8:	6860      	ldr	r0, [r4, #4]
 80022ea:	f7ff ff81 	bl	80021f0 <std>
 80022ee:	2201      	movs	r2, #1
 80022f0:	2109      	movs	r1, #9
 80022f2:	68a0      	ldr	r0, [r4, #8]
 80022f4:	f7ff ff7c 	bl	80021f0 <std>
 80022f8:	2202      	movs	r2, #2
 80022fa:	2112      	movs	r1, #18
 80022fc:	68e0      	ldr	r0, [r4, #12]
 80022fe:	f7ff ff77 	bl	80021f0 <std>
 8002302:	2301      	movs	r3, #1
 8002304:	61a3      	str	r3, [r4, #24]
 8002306:	e7d1      	b.n	80022ac <__sinit+0xc>
 8002308:	08002ffc 	.word	0x08002ffc
 800230c:	08002239 	.word	0x08002239

08002310 <__sfp>:
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	4607      	mov	r7, r0
 8002314:	f7ff ffac 	bl	8002270 <__sfp_lock_acquire>
 8002318:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <__sfp+0x84>)
 800231a:	681e      	ldr	r6, [r3, #0]
 800231c:	69b3      	ldr	r3, [r6, #24]
 800231e:	b913      	cbnz	r3, 8002326 <__sfp+0x16>
 8002320:	4630      	mov	r0, r6
 8002322:	f7ff ffbd 	bl	80022a0 <__sinit>
 8002326:	3648      	adds	r6, #72	; 0x48
 8002328:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800232c:	3b01      	subs	r3, #1
 800232e:	d503      	bpl.n	8002338 <__sfp+0x28>
 8002330:	6833      	ldr	r3, [r6, #0]
 8002332:	b30b      	cbz	r3, 8002378 <__sfp+0x68>
 8002334:	6836      	ldr	r6, [r6, #0]
 8002336:	e7f7      	b.n	8002328 <__sfp+0x18>
 8002338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800233c:	b9d5      	cbnz	r5, 8002374 <__sfp+0x64>
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <__sfp+0x88>)
 8002340:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002344:	60e3      	str	r3, [r4, #12]
 8002346:	6665      	str	r5, [r4, #100]	; 0x64
 8002348:	f000 f847 	bl	80023da <__retarget_lock_init_recursive>
 800234c:	f7ff ff96 	bl	800227c <__sfp_lock_release>
 8002350:	2208      	movs	r2, #8
 8002352:	4629      	mov	r1, r5
 8002354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800235c:	6025      	str	r5, [r4, #0]
 800235e:	61a5      	str	r5, [r4, #24]
 8002360:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002364:	f7ff fda0 	bl	8001ea8 <memset>
 8002368:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800236c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002370:	4620      	mov	r0, r4
 8002372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002374:	3468      	adds	r4, #104	; 0x68
 8002376:	e7d9      	b.n	800232c <__sfp+0x1c>
 8002378:	2104      	movs	r1, #4
 800237a:	4638      	mov	r0, r7
 800237c:	f7ff ff62 	bl	8002244 <__sfmoreglue>
 8002380:	4604      	mov	r4, r0
 8002382:	6030      	str	r0, [r6, #0]
 8002384:	2800      	cmp	r0, #0
 8002386:	d1d5      	bne.n	8002334 <__sfp+0x24>
 8002388:	f7ff ff78 	bl	800227c <__sfp_lock_release>
 800238c:	230c      	movs	r3, #12
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	e7ee      	b.n	8002370 <__sfp+0x60>
 8002392:	bf00      	nop
 8002394:	08002ffc 	.word	0x08002ffc
 8002398:	ffff0001 	.word	0xffff0001

0800239c <_fwalk_reent>:
 800239c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a0:	4606      	mov	r6, r0
 80023a2:	4688      	mov	r8, r1
 80023a4:	2700      	movs	r7, #0
 80023a6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023ae:	f1b9 0901 	subs.w	r9, r9, #1
 80023b2:	d505      	bpl.n	80023c0 <_fwalk_reent+0x24>
 80023b4:	6824      	ldr	r4, [r4, #0]
 80023b6:	2c00      	cmp	r4, #0
 80023b8:	d1f7      	bne.n	80023aa <_fwalk_reent+0xe>
 80023ba:	4638      	mov	r0, r7
 80023bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c0:	89ab      	ldrh	r3, [r5, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d907      	bls.n	80023d6 <_fwalk_reent+0x3a>
 80023c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023ca:	3301      	adds	r3, #1
 80023cc:	d003      	beq.n	80023d6 <_fwalk_reent+0x3a>
 80023ce:	4629      	mov	r1, r5
 80023d0:	4630      	mov	r0, r6
 80023d2:	47c0      	blx	r8
 80023d4:	4307      	orrs	r7, r0
 80023d6:	3568      	adds	r5, #104	; 0x68
 80023d8:	e7e9      	b.n	80023ae <_fwalk_reent+0x12>

080023da <__retarget_lock_init_recursive>:
 80023da:	4770      	bx	lr

080023dc <__retarget_lock_acquire_recursive>:
 80023dc:	4770      	bx	lr

080023de <__retarget_lock_release_recursive>:
 80023de:	4770      	bx	lr

080023e0 <__swhatbuf_r>:
 80023e0:	b570      	push	{r4, r5, r6, lr}
 80023e2:	460e      	mov	r6, r1
 80023e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e8:	4614      	mov	r4, r2
 80023ea:	2900      	cmp	r1, #0
 80023ec:	461d      	mov	r5, r3
 80023ee:	b096      	sub	sp, #88	; 0x58
 80023f0:	da08      	bge.n	8002404 <__swhatbuf_r+0x24>
 80023f2:	2200      	movs	r2, #0
 80023f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80023f8:	602a      	str	r2, [r5, #0]
 80023fa:	061a      	lsls	r2, r3, #24
 80023fc:	d410      	bmi.n	8002420 <__swhatbuf_r+0x40>
 80023fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002402:	e00e      	b.n	8002422 <__swhatbuf_r+0x42>
 8002404:	466a      	mov	r2, sp
 8002406:	f000 fd59 	bl	8002ebc <_fstat_r>
 800240a:	2800      	cmp	r0, #0
 800240c:	dbf1      	blt.n	80023f2 <__swhatbuf_r+0x12>
 800240e:	9a01      	ldr	r2, [sp, #4]
 8002410:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002414:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002418:	425a      	negs	r2, r3
 800241a:	415a      	adcs	r2, r3
 800241c:	602a      	str	r2, [r5, #0]
 800241e:	e7ee      	b.n	80023fe <__swhatbuf_r+0x1e>
 8002420:	2340      	movs	r3, #64	; 0x40
 8002422:	2000      	movs	r0, #0
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	b016      	add	sp, #88	; 0x58
 8002428:	bd70      	pop	{r4, r5, r6, pc}
	...

0800242c <__smakebuf_r>:
 800242c:	898b      	ldrh	r3, [r1, #12]
 800242e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002430:	079d      	lsls	r5, r3, #30
 8002432:	4606      	mov	r6, r0
 8002434:	460c      	mov	r4, r1
 8002436:	d507      	bpl.n	8002448 <__smakebuf_r+0x1c>
 8002438:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800243c:	6023      	str	r3, [r4, #0]
 800243e:	6123      	str	r3, [r4, #16]
 8002440:	2301      	movs	r3, #1
 8002442:	6163      	str	r3, [r4, #20]
 8002444:	b002      	add	sp, #8
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	466a      	mov	r2, sp
 800244a:	ab01      	add	r3, sp, #4
 800244c:	f7ff ffc8 	bl	80023e0 <__swhatbuf_r>
 8002450:	9900      	ldr	r1, [sp, #0]
 8002452:	4605      	mov	r5, r0
 8002454:	4630      	mov	r0, r6
 8002456:	f000 f899 	bl	800258c <_malloc_r>
 800245a:	b948      	cbnz	r0, 8002470 <__smakebuf_r+0x44>
 800245c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002460:	059a      	lsls	r2, r3, #22
 8002462:	d4ef      	bmi.n	8002444 <__smakebuf_r+0x18>
 8002464:	f023 0303 	bic.w	r3, r3, #3
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	81a3      	strh	r3, [r4, #12]
 800246e:	e7e3      	b.n	8002438 <__smakebuf_r+0xc>
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <__smakebuf_r+0x7c>)
 8002472:	62b3      	str	r3, [r6, #40]	; 0x28
 8002474:	89a3      	ldrh	r3, [r4, #12]
 8002476:	6020      	str	r0, [r4, #0]
 8002478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800247c:	81a3      	strh	r3, [r4, #12]
 800247e:	9b00      	ldr	r3, [sp, #0]
 8002480:	6120      	str	r0, [r4, #16]
 8002482:	6163      	str	r3, [r4, #20]
 8002484:	9b01      	ldr	r3, [sp, #4]
 8002486:	b15b      	cbz	r3, 80024a0 <__smakebuf_r+0x74>
 8002488:	4630      	mov	r0, r6
 800248a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800248e:	f000 fd27 	bl	8002ee0 <_isatty_r>
 8002492:	b128      	cbz	r0, 80024a0 <__smakebuf_r+0x74>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	f023 0303 	bic.w	r3, r3, #3
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	81a3      	strh	r3, [r4, #12]
 80024a0:	89a0      	ldrh	r0, [r4, #12]
 80024a2:	4305      	orrs	r5, r0
 80024a4:	81a5      	strh	r5, [r4, #12]
 80024a6:	e7cd      	b.n	8002444 <__smakebuf_r+0x18>
 80024a8:	08002239 	.word	0x08002239

080024ac <malloc>:
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <malloc+0xc>)
 80024ae:	4601      	mov	r1, r0
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	f000 b86b 	b.w	800258c <_malloc_r>
 80024b6:	bf00      	nop
 80024b8:	2000000c 	.word	0x2000000c

080024bc <_free_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4605      	mov	r5, r0
 80024c0:	2900      	cmp	r1, #0
 80024c2:	d040      	beq.n	8002546 <_free_r+0x8a>
 80024c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024c8:	1f0c      	subs	r4, r1, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bfb8      	it	lt
 80024ce:	18e4      	addlt	r4, r4, r3
 80024d0:	f000 fd36 	bl	8002f40 <__malloc_lock>
 80024d4:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <_free_r+0x8c>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	b933      	cbnz	r3, 80024e8 <_free_r+0x2c>
 80024da:	6063      	str	r3, [r4, #4]
 80024dc:	6014      	str	r4, [r2, #0]
 80024de:	4628      	mov	r0, r5
 80024e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024e4:	f000 bd32 	b.w	8002f4c <__malloc_unlock>
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	d908      	bls.n	80024fe <_free_r+0x42>
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	1821      	adds	r1, r4, r0
 80024f0:	428b      	cmp	r3, r1
 80024f2:	bf01      	itttt	eq
 80024f4:	6819      	ldreq	r1, [r3, #0]
 80024f6:	685b      	ldreq	r3, [r3, #4]
 80024f8:	1809      	addeq	r1, r1, r0
 80024fa:	6021      	streq	r1, [r4, #0]
 80024fc:	e7ed      	b.n	80024da <_free_r+0x1e>
 80024fe:	461a      	mov	r2, r3
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	b10b      	cbz	r3, 8002508 <_free_r+0x4c>
 8002504:	42a3      	cmp	r3, r4
 8002506:	d9fa      	bls.n	80024fe <_free_r+0x42>
 8002508:	6811      	ldr	r1, [r2, #0]
 800250a:	1850      	adds	r0, r2, r1
 800250c:	42a0      	cmp	r0, r4
 800250e:	d10b      	bne.n	8002528 <_free_r+0x6c>
 8002510:	6820      	ldr	r0, [r4, #0]
 8002512:	4401      	add	r1, r0
 8002514:	1850      	adds	r0, r2, r1
 8002516:	4283      	cmp	r3, r0
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	d1e0      	bne.n	80024de <_free_r+0x22>
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4401      	add	r1, r0
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	6053      	str	r3, [r2, #4]
 8002526:	e7da      	b.n	80024de <_free_r+0x22>
 8002528:	d902      	bls.n	8002530 <_free_r+0x74>
 800252a:	230c      	movs	r3, #12
 800252c:	602b      	str	r3, [r5, #0]
 800252e:	e7d6      	b.n	80024de <_free_r+0x22>
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	1821      	adds	r1, r4, r0
 8002534:	428b      	cmp	r3, r1
 8002536:	bf01      	itttt	eq
 8002538:	6819      	ldreq	r1, [r3, #0]
 800253a:	685b      	ldreq	r3, [r3, #4]
 800253c:	1809      	addeq	r1, r1, r0
 800253e:	6021      	streq	r1, [r4, #0]
 8002540:	6063      	str	r3, [r4, #4]
 8002542:	6054      	str	r4, [r2, #4]
 8002544:	e7cb      	b.n	80024de <_free_r+0x22>
 8002546:	bd38      	pop	{r3, r4, r5, pc}
 8002548:	20000128 	.word	0x20000128

0800254c <sbrk_aligned>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	4e0e      	ldr	r6, [pc, #56]	; (8002588 <sbrk_aligned+0x3c>)
 8002550:	460c      	mov	r4, r1
 8002552:	6831      	ldr	r1, [r6, #0]
 8002554:	4605      	mov	r5, r0
 8002556:	b911      	cbnz	r1, 800255e <sbrk_aligned+0x12>
 8002558:	f000 fb7a 	bl	8002c50 <_sbrk_r>
 800255c:	6030      	str	r0, [r6, #0]
 800255e:	4621      	mov	r1, r4
 8002560:	4628      	mov	r0, r5
 8002562:	f000 fb75 	bl	8002c50 <_sbrk_r>
 8002566:	1c43      	adds	r3, r0, #1
 8002568:	d00a      	beq.n	8002580 <sbrk_aligned+0x34>
 800256a:	1cc4      	adds	r4, r0, #3
 800256c:	f024 0403 	bic.w	r4, r4, #3
 8002570:	42a0      	cmp	r0, r4
 8002572:	d007      	beq.n	8002584 <sbrk_aligned+0x38>
 8002574:	1a21      	subs	r1, r4, r0
 8002576:	4628      	mov	r0, r5
 8002578:	f000 fb6a 	bl	8002c50 <_sbrk_r>
 800257c:	3001      	adds	r0, #1
 800257e:	d101      	bne.n	8002584 <sbrk_aligned+0x38>
 8002580:	f04f 34ff 	mov.w	r4, #4294967295
 8002584:	4620      	mov	r0, r4
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	2000012c 	.word	0x2000012c

0800258c <_malloc_r>:
 800258c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002590:	1ccd      	adds	r5, r1, #3
 8002592:	f025 0503 	bic.w	r5, r5, #3
 8002596:	3508      	adds	r5, #8
 8002598:	2d0c      	cmp	r5, #12
 800259a:	bf38      	it	cc
 800259c:	250c      	movcc	r5, #12
 800259e:	2d00      	cmp	r5, #0
 80025a0:	4607      	mov	r7, r0
 80025a2:	db01      	blt.n	80025a8 <_malloc_r+0x1c>
 80025a4:	42a9      	cmp	r1, r5
 80025a6:	d905      	bls.n	80025b4 <_malloc_r+0x28>
 80025a8:	230c      	movs	r3, #12
 80025aa:	2600      	movs	r6, #0
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4630      	mov	r0, r6
 80025b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b4:	4e2e      	ldr	r6, [pc, #184]	; (8002670 <_malloc_r+0xe4>)
 80025b6:	f000 fcc3 	bl	8002f40 <__malloc_lock>
 80025ba:	6833      	ldr	r3, [r6, #0]
 80025bc:	461c      	mov	r4, r3
 80025be:	bb34      	cbnz	r4, 800260e <_malloc_r+0x82>
 80025c0:	4629      	mov	r1, r5
 80025c2:	4638      	mov	r0, r7
 80025c4:	f7ff ffc2 	bl	800254c <sbrk_aligned>
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	4604      	mov	r4, r0
 80025cc:	d14d      	bne.n	800266a <_malloc_r+0xde>
 80025ce:	6834      	ldr	r4, [r6, #0]
 80025d0:	4626      	mov	r6, r4
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	d140      	bne.n	8002658 <_malloc_r+0xcc>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	4631      	mov	r1, r6
 80025da:	4638      	mov	r0, r7
 80025dc:	eb04 0803 	add.w	r8, r4, r3
 80025e0:	f000 fb36 	bl	8002c50 <_sbrk_r>
 80025e4:	4580      	cmp	r8, r0
 80025e6:	d13a      	bne.n	800265e <_malloc_r+0xd2>
 80025e8:	6821      	ldr	r1, [r4, #0]
 80025ea:	3503      	adds	r5, #3
 80025ec:	1a6d      	subs	r5, r5, r1
 80025ee:	f025 0503 	bic.w	r5, r5, #3
 80025f2:	3508      	adds	r5, #8
 80025f4:	2d0c      	cmp	r5, #12
 80025f6:	bf38      	it	cc
 80025f8:	250c      	movcc	r5, #12
 80025fa:	4638      	mov	r0, r7
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7ff ffa5 	bl	800254c <sbrk_aligned>
 8002602:	3001      	adds	r0, #1
 8002604:	d02b      	beq.n	800265e <_malloc_r+0xd2>
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	442b      	add	r3, r5
 800260a:	6023      	str	r3, [r4, #0]
 800260c:	e00e      	b.n	800262c <_malloc_r+0xa0>
 800260e:	6822      	ldr	r2, [r4, #0]
 8002610:	1b52      	subs	r2, r2, r5
 8002612:	d41e      	bmi.n	8002652 <_malloc_r+0xc6>
 8002614:	2a0b      	cmp	r2, #11
 8002616:	d916      	bls.n	8002646 <_malloc_r+0xba>
 8002618:	1961      	adds	r1, r4, r5
 800261a:	42a3      	cmp	r3, r4
 800261c:	6025      	str	r5, [r4, #0]
 800261e:	bf18      	it	ne
 8002620:	6059      	strne	r1, [r3, #4]
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	bf08      	it	eq
 8002626:	6031      	streq	r1, [r6, #0]
 8002628:	5162      	str	r2, [r4, r5]
 800262a:	604b      	str	r3, [r1, #4]
 800262c:	4638      	mov	r0, r7
 800262e:	f104 060b 	add.w	r6, r4, #11
 8002632:	f000 fc8b 	bl	8002f4c <__malloc_unlock>
 8002636:	f026 0607 	bic.w	r6, r6, #7
 800263a:	1d23      	adds	r3, r4, #4
 800263c:	1af2      	subs	r2, r6, r3
 800263e:	d0b6      	beq.n	80025ae <_malloc_r+0x22>
 8002640:	1b9b      	subs	r3, r3, r6
 8002642:	50a3      	str	r3, [r4, r2]
 8002644:	e7b3      	b.n	80025ae <_malloc_r+0x22>
 8002646:	6862      	ldr	r2, [r4, #4]
 8002648:	42a3      	cmp	r3, r4
 800264a:	bf0c      	ite	eq
 800264c:	6032      	streq	r2, [r6, #0]
 800264e:	605a      	strne	r2, [r3, #4]
 8002650:	e7ec      	b.n	800262c <_malloc_r+0xa0>
 8002652:	4623      	mov	r3, r4
 8002654:	6864      	ldr	r4, [r4, #4]
 8002656:	e7b2      	b.n	80025be <_malloc_r+0x32>
 8002658:	4634      	mov	r4, r6
 800265a:	6876      	ldr	r6, [r6, #4]
 800265c:	e7b9      	b.n	80025d2 <_malloc_r+0x46>
 800265e:	230c      	movs	r3, #12
 8002660:	4638      	mov	r0, r7
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	f000 fc72 	bl	8002f4c <__malloc_unlock>
 8002668:	e7a1      	b.n	80025ae <_malloc_r+0x22>
 800266a:	6025      	str	r5, [r4, #0]
 800266c:	e7de      	b.n	800262c <_malloc_r+0xa0>
 800266e:	bf00      	nop
 8002670:	20000128 	.word	0x20000128

08002674 <__sfputc_r>:
 8002674:	6893      	ldr	r3, [r2, #8]
 8002676:	b410      	push	{r4}
 8002678:	3b01      	subs	r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	6093      	str	r3, [r2, #8]
 800267e:	da07      	bge.n	8002690 <__sfputc_r+0x1c>
 8002680:	6994      	ldr	r4, [r2, #24]
 8002682:	42a3      	cmp	r3, r4
 8002684:	db01      	blt.n	800268a <__sfputc_r+0x16>
 8002686:	290a      	cmp	r1, #10
 8002688:	d102      	bne.n	8002690 <__sfputc_r+0x1c>
 800268a:	bc10      	pop	{r4}
 800268c:	f000 bb34 	b.w	8002cf8 <__swbuf_r>
 8002690:	6813      	ldr	r3, [r2, #0]
 8002692:	1c58      	adds	r0, r3, #1
 8002694:	6010      	str	r0, [r2, #0]
 8002696:	7019      	strb	r1, [r3, #0]
 8002698:	4608      	mov	r0, r1
 800269a:	bc10      	pop	{r4}
 800269c:	4770      	bx	lr

0800269e <__sfputs_r>:
 800269e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a0:	4606      	mov	r6, r0
 80026a2:	460f      	mov	r7, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	18d5      	adds	r5, r2, r3
 80026a8:	42ac      	cmp	r4, r5
 80026aa:	d101      	bne.n	80026b0 <__sfputs_r+0x12>
 80026ac:	2000      	movs	r0, #0
 80026ae:	e007      	b.n	80026c0 <__sfputs_r+0x22>
 80026b0:	463a      	mov	r2, r7
 80026b2:	4630      	mov	r0, r6
 80026b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b8:	f7ff ffdc 	bl	8002674 <__sfputc_r>
 80026bc:	1c43      	adds	r3, r0, #1
 80026be:	d1f3      	bne.n	80026a8 <__sfputs_r+0xa>
 80026c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026c4 <_vfiprintf_r>:
 80026c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c8:	460d      	mov	r5, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	4698      	mov	r8, r3
 80026ce:	4606      	mov	r6, r0
 80026d0:	b09d      	sub	sp, #116	; 0x74
 80026d2:	b118      	cbz	r0, 80026dc <_vfiprintf_r+0x18>
 80026d4:	6983      	ldr	r3, [r0, #24]
 80026d6:	b90b      	cbnz	r3, 80026dc <_vfiprintf_r+0x18>
 80026d8:	f7ff fde2 	bl	80022a0 <__sinit>
 80026dc:	4b89      	ldr	r3, [pc, #548]	; (8002904 <_vfiprintf_r+0x240>)
 80026de:	429d      	cmp	r5, r3
 80026e0:	d11b      	bne.n	800271a <_vfiprintf_r+0x56>
 80026e2:	6875      	ldr	r5, [r6, #4]
 80026e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026e6:	07d9      	lsls	r1, r3, #31
 80026e8:	d405      	bmi.n	80026f6 <_vfiprintf_r+0x32>
 80026ea:	89ab      	ldrh	r3, [r5, #12]
 80026ec:	059a      	lsls	r2, r3, #22
 80026ee:	d402      	bmi.n	80026f6 <_vfiprintf_r+0x32>
 80026f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026f2:	f7ff fe73 	bl	80023dc <__retarget_lock_acquire_recursive>
 80026f6:	89ab      	ldrh	r3, [r5, #12]
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	d501      	bpl.n	8002700 <_vfiprintf_r+0x3c>
 80026fc:	692b      	ldr	r3, [r5, #16]
 80026fe:	b9eb      	cbnz	r3, 800273c <_vfiprintf_r+0x78>
 8002700:	4629      	mov	r1, r5
 8002702:	4630      	mov	r0, r6
 8002704:	f000 fb5c 	bl	8002dc0 <__swsetup_r>
 8002708:	b1c0      	cbz	r0, 800273c <_vfiprintf_r+0x78>
 800270a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800270c:	07dc      	lsls	r4, r3, #31
 800270e:	d50e      	bpl.n	800272e <_vfiprintf_r+0x6a>
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	b01d      	add	sp, #116	; 0x74
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800271a:	4b7b      	ldr	r3, [pc, #492]	; (8002908 <_vfiprintf_r+0x244>)
 800271c:	429d      	cmp	r5, r3
 800271e:	d101      	bne.n	8002724 <_vfiprintf_r+0x60>
 8002720:	68b5      	ldr	r5, [r6, #8]
 8002722:	e7df      	b.n	80026e4 <_vfiprintf_r+0x20>
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <_vfiprintf_r+0x248>)
 8002726:	429d      	cmp	r5, r3
 8002728:	bf08      	it	eq
 800272a:	68f5      	ldreq	r5, [r6, #12]
 800272c:	e7da      	b.n	80026e4 <_vfiprintf_r+0x20>
 800272e:	89ab      	ldrh	r3, [r5, #12]
 8002730:	0598      	lsls	r0, r3, #22
 8002732:	d4ed      	bmi.n	8002710 <_vfiprintf_r+0x4c>
 8002734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002736:	f7ff fe52 	bl	80023de <__retarget_lock_release_recursive>
 800273a:	e7e9      	b.n	8002710 <_vfiprintf_r+0x4c>
 800273c:	2300      	movs	r3, #0
 800273e:	9309      	str	r3, [sp, #36]	; 0x24
 8002740:	2320      	movs	r3, #32
 8002742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002746:	2330      	movs	r3, #48	; 0x30
 8002748:	f04f 0901 	mov.w	r9, #1
 800274c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002750:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002910 <_vfiprintf_r+0x24c>
 8002754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002758:	4623      	mov	r3, r4
 800275a:	469a      	mov	sl, r3
 800275c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002760:	b10a      	cbz	r2, 8002766 <_vfiprintf_r+0xa2>
 8002762:	2a25      	cmp	r2, #37	; 0x25
 8002764:	d1f9      	bne.n	800275a <_vfiprintf_r+0x96>
 8002766:	ebba 0b04 	subs.w	fp, sl, r4
 800276a:	d00b      	beq.n	8002784 <_vfiprintf_r+0xc0>
 800276c:	465b      	mov	r3, fp
 800276e:	4622      	mov	r2, r4
 8002770:	4629      	mov	r1, r5
 8002772:	4630      	mov	r0, r6
 8002774:	f7ff ff93 	bl	800269e <__sfputs_r>
 8002778:	3001      	adds	r0, #1
 800277a:	f000 80aa 	beq.w	80028d2 <_vfiprintf_r+0x20e>
 800277e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002780:	445a      	add	r2, fp
 8002782:	9209      	str	r2, [sp, #36]	; 0x24
 8002784:	f89a 3000 	ldrb.w	r3, [sl]
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <_vfiprintf_r+0x20e>
 800278e:	2300      	movs	r3, #0
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002798:	f10a 0a01 	add.w	sl, sl, #1
 800279c:	9304      	str	r3, [sp, #16]
 800279e:	9307      	str	r3, [sp, #28]
 80027a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027a4:	931a      	str	r3, [sp, #104]	; 0x68
 80027a6:	4654      	mov	r4, sl
 80027a8:	2205      	movs	r2, #5
 80027aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027ae:	4858      	ldr	r0, [pc, #352]	; (8002910 <_vfiprintf_r+0x24c>)
 80027b0:	f000 fbb8 	bl	8002f24 <memchr>
 80027b4:	9a04      	ldr	r2, [sp, #16]
 80027b6:	b9d8      	cbnz	r0, 80027f0 <_vfiprintf_r+0x12c>
 80027b8:	06d1      	lsls	r1, r2, #27
 80027ba:	bf44      	itt	mi
 80027bc:	2320      	movmi	r3, #32
 80027be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027c2:	0713      	lsls	r3, r2, #28
 80027c4:	bf44      	itt	mi
 80027c6:	232b      	movmi	r3, #43	; 0x2b
 80027c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027cc:	f89a 3000 	ldrb.w	r3, [sl]
 80027d0:	2b2a      	cmp	r3, #42	; 0x2a
 80027d2:	d015      	beq.n	8002800 <_vfiprintf_r+0x13c>
 80027d4:	4654      	mov	r4, sl
 80027d6:	2000      	movs	r0, #0
 80027d8:	f04f 0c0a 	mov.w	ip, #10
 80027dc:	9a07      	ldr	r2, [sp, #28]
 80027de:	4621      	mov	r1, r4
 80027e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027e4:	3b30      	subs	r3, #48	; 0x30
 80027e6:	2b09      	cmp	r3, #9
 80027e8:	d94e      	bls.n	8002888 <_vfiprintf_r+0x1c4>
 80027ea:	b1b0      	cbz	r0, 800281a <_vfiprintf_r+0x156>
 80027ec:	9207      	str	r2, [sp, #28]
 80027ee:	e014      	b.n	800281a <_vfiprintf_r+0x156>
 80027f0:	eba0 0308 	sub.w	r3, r0, r8
 80027f4:	fa09 f303 	lsl.w	r3, r9, r3
 80027f8:	4313      	orrs	r3, r2
 80027fa:	46a2      	mov	sl, r4
 80027fc:	9304      	str	r3, [sp, #16]
 80027fe:	e7d2      	b.n	80027a6 <_vfiprintf_r+0xe2>
 8002800:	9b03      	ldr	r3, [sp, #12]
 8002802:	1d19      	adds	r1, r3, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	9103      	str	r1, [sp, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	bfbb      	ittet	lt
 800280c:	425b      	neglt	r3, r3
 800280e:	f042 0202 	orrlt.w	r2, r2, #2
 8002812:	9307      	strge	r3, [sp, #28]
 8002814:	9307      	strlt	r3, [sp, #28]
 8002816:	bfb8      	it	lt
 8002818:	9204      	strlt	r2, [sp, #16]
 800281a:	7823      	ldrb	r3, [r4, #0]
 800281c:	2b2e      	cmp	r3, #46	; 0x2e
 800281e:	d10c      	bne.n	800283a <_vfiprintf_r+0x176>
 8002820:	7863      	ldrb	r3, [r4, #1]
 8002822:	2b2a      	cmp	r3, #42	; 0x2a
 8002824:	d135      	bne.n	8002892 <_vfiprintf_r+0x1ce>
 8002826:	9b03      	ldr	r3, [sp, #12]
 8002828:	3402      	adds	r4, #2
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	9203      	str	r2, [sp, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	bfb8      	it	lt
 8002834:	f04f 33ff 	movlt.w	r3, #4294967295
 8002838:	9305      	str	r3, [sp, #20]
 800283a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002914 <_vfiprintf_r+0x250>
 800283e:	2203      	movs	r2, #3
 8002840:	4650      	mov	r0, sl
 8002842:	7821      	ldrb	r1, [r4, #0]
 8002844:	f000 fb6e 	bl	8002f24 <memchr>
 8002848:	b140      	cbz	r0, 800285c <_vfiprintf_r+0x198>
 800284a:	2340      	movs	r3, #64	; 0x40
 800284c:	eba0 000a 	sub.w	r0, r0, sl
 8002850:	fa03 f000 	lsl.w	r0, r3, r0
 8002854:	9b04      	ldr	r3, [sp, #16]
 8002856:	3401      	adds	r4, #1
 8002858:	4303      	orrs	r3, r0
 800285a:	9304      	str	r3, [sp, #16]
 800285c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002860:	2206      	movs	r2, #6
 8002862:	482d      	ldr	r0, [pc, #180]	; (8002918 <_vfiprintf_r+0x254>)
 8002864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002868:	f000 fb5c 	bl	8002f24 <memchr>
 800286c:	2800      	cmp	r0, #0
 800286e:	d03f      	beq.n	80028f0 <_vfiprintf_r+0x22c>
 8002870:	4b2a      	ldr	r3, [pc, #168]	; (800291c <_vfiprintf_r+0x258>)
 8002872:	bb1b      	cbnz	r3, 80028bc <_vfiprintf_r+0x1f8>
 8002874:	9b03      	ldr	r3, [sp, #12]
 8002876:	3307      	adds	r3, #7
 8002878:	f023 0307 	bic.w	r3, r3, #7
 800287c:	3308      	adds	r3, #8
 800287e:	9303      	str	r3, [sp, #12]
 8002880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002882:	443b      	add	r3, r7
 8002884:	9309      	str	r3, [sp, #36]	; 0x24
 8002886:	e767      	b.n	8002758 <_vfiprintf_r+0x94>
 8002888:	460c      	mov	r4, r1
 800288a:	2001      	movs	r0, #1
 800288c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002890:	e7a5      	b.n	80027de <_vfiprintf_r+0x11a>
 8002892:	2300      	movs	r3, #0
 8002894:	f04f 0c0a 	mov.w	ip, #10
 8002898:	4619      	mov	r1, r3
 800289a:	3401      	adds	r4, #1
 800289c:	9305      	str	r3, [sp, #20]
 800289e:	4620      	mov	r0, r4
 80028a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028a4:	3a30      	subs	r2, #48	; 0x30
 80028a6:	2a09      	cmp	r2, #9
 80028a8:	d903      	bls.n	80028b2 <_vfiprintf_r+0x1ee>
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0c5      	beq.n	800283a <_vfiprintf_r+0x176>
 80028ae:	9105      	str	r1, [sp, #20]
 80028b0:	e7c3      	b.n	800283a <_vfiprintf_r+0x176>
 80028b2:	4604      	mov	r4, r0
 80028b4:	2301      	movs	r3, #1
 80028b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80028ba:	e7f0      	b.n	800289e <_vfiprintf_r+0x1da>
 80028bc:	ab03      	add	r3, sp, #12
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	462a      	mov	r2, r5
 80028c2:	4630      	mov	r0, r6
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <_vfiprintf_r+0x25c>)
 80028c6:	a904      	add	r1, sp, #16
 80028c8:	f3af 8000 	nop.w
 80028cc:	4607      	mov	r7, r0
 80028ce:	1c78      	adds	r0, r7, #1
 80028d0:	d1d6      	bne.n	8002880 <_vfiprintf_r+0x1bc>
 80028d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028d4:	07d9      	lsls	r1, r3, #31
 80028d6:	d405      	bmi.n	80028e4 <_vfiprintf_r+0x220>
 80028d8:	89ab      	ldrh	r3, [r5, #12]
 80028da:	059a      	lsls	r2, r3, #22
 80028dc:	d402      	bmi.n	80028e4 <_vfiprintf_r+0x220>
 80028de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e0:	f7ff fd7d 	bl	80023de <__retarget_lock_release_recursive>
 80028e4:	89ab      	ldrh	r3, [r5, #12]
 80028e6:	065b      	lsls	r3, r3, #25
 80028e8:	f53f af12 	bmi.w	8002710 <_vfiprintf_r+0x4c>
 80028ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028ee:	e711      	b.n	8002714 <_vfiprintf_r+0x50>
 80028f0:	ab03      	add	r3, sp, #12
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	462a      	mov	r2, r5
 80028f6:	4630      	mov	r0, r6
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <_vfiprintf_r+0x25c>)
 80028fa:	a904      	add	r1, sp, #16
 80028fc:	f000 f882 	bl	8002a04 <_printf_i>
 8002900:	e7e4      	b.n	80028cc <_vfiprintf_r+0x208>
 8002902:	bf00      	nop
 8002904:	08003020 	.word	0x08003020
 8002908:	08003040 	.word	0x08003040
 800290c:	08003000 	.word	0x08003000
 8002910:	08003060 	.word	0x08003060
 8002914:	08003066 	.word	0x08003066
 8002918:	0800306a 	.word	0x0800306a
 800291c:	00000000 	.word	0x00000000
 8002920:	0800269f 	.word	0x0800269f

08002924 <_printf_common>:
 8002924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002928:	4616      	mov	r6, r2
 800292a:	4699      	mov	r9, r3
 800292c:	688a      	ldr	r2, [r1, #8]
 800292e:	690b      	ldr	r3, [r1, #16]
 8002930:	4607      	mov	r7, r0
 8002932:	4293      	cmp	r3, r2
 8002934:	bfb8      	it	lt
 8002936:	4613      	movlt	r3, r2
 8002938:	6033      	str	r3, [r6, #0]
 800293a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800293e:	460c      	mov	r4, r1
 8002940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002944:	b10a      	cbz	r2, 800294a <_printf_common+0x26>
 8002946:	3301      	adds	r3, #1
 8002948:	6033      	str	r3, [r6, #0]
 800294a:	6823      	ldr	r3, [r4, #0]
 800294c:	0699      	lsls	r1, r3, #26
 800294e:	bf42      	ittt	mi
 8002950:	6833      	ldrmi	r3, [r6, #0]
 8002952:	3302      	addmi	r3, #2
 8002954:	6033      	strmi	r3, [r6, #0]
 8002956:	6825      	ldr	r5, [r4, #0]
 8002958:	f015 0506 	ands.w	r5, r5, #6
 800295c:	d106      	bne.n	800296c <_printf_common+0x48>
 800295e:	f104 0a19 	add.w	sl, r4, #25
 8002962:	68e3      	ldr	r3, [r4, #12]
 8002964:	6832      	ldr	r2, [r6, #0]
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	42ab      	cmp	r3, r5
 800296a:	dc28      	bgt.n	80029be <_printf_common+0x9a>
 800296c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002970:	1e13      	subs	r3, r2, #0
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	bf18      	it	ne
 8002976:	2301      	movne	r3, #1
 8002978:	0692      	lsls	r2, r2, #26
 800297a:	d42d      	bmi.n	80029d8 <_printf_common+0xb4>
 800297c:	4649      	mov	r1, r9
 800297e:	4638      	mov	r0, r7
 8002980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002984:	47c0      	blx	r8
 8002986:	3001      	adds	r0, #1
 8002988:	d020      	beq.n	80029cc <_printf_common+0xa8>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	68e5      	ldr	r5, [r4, #12]
 800298e:	f003 0306 	and.w	r3, r3, #6
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf18      	it	ne
 8002996:	2500      	movne	r5, #0
 8002998:	6832      	ldr	r2, [r6, #0]
 800299a:	f04f 0600 	mov.w	r6, #0
 800299e:	68a3      	ldr	r3, [r4, #8]
 80029a0:	bf08      	it	eq
 80029a2:	1aad      	subeq	r5, r5, r2
 80029a4:	6922      	ldr	r2, [r4, #16]
 80029a6:	bf08      	it	eq
 80029a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bfc4      	itt	gt
 80029b0:	1a9b      	subgt	r3, r3, r2
 80029b2:	18ed      	addgt	r5, r5, r3
 80029b4:	341a      	adds	r4, #26
 80029b6:	42b5      	cmp	r5, r6
 80029b8:	d11a      	bne.n	80029f0 <_printf_common+0xcc>
 80029ba:	2000      	movs	r0, #0
 80029bc:	e008      	b.n	80029d0 <_printf_common+0xac>
 80029be:	2301      	movs	r3, #1
 80029c0:	4652      	mov	r2, sl
 80029c2:	4649      	mov	r1, r9
 80029c4:	4638      	mov	r0, r7
 80029c6:	47c0      	blx	r8
 80029c8:	3001      	adds	r0, #1
 80029ca:	d103      	bne.n	80029d4 <_printf_common+0xb0>
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	3501      	adds	r5, #1
 80029d6:	e7c4      	b.n	8002962 <_printf_common+0x3e>
 80029d8:	2030      	movs	r0, #48	; 0x30
 80029da:	18e1      	adds	r1, r4, r3
 80029dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029e6:	4422      	add	r2, r4
 80029e8:	3302      	adds	r3, #2
 80029ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029ee:	e7c5      	b.n	800297c <_printf_common+0x58>
 80029f0:	2301      	movs	r3, #1
 80029f2:	4622      	mov	r2, r4
 80029f4:	4649      	mov	r1, r9
 80029f6:	4638      	mov	r0, r7
 80029f8:	47c0      	blx	r8
 80029fa:	3001      	adds	r0, #1
 80029fc:	d0e6      	beq.n	80029cc <_printf_common+0xa8>
 80029fe:	3601      	adds	r6, #1
 8002a00:	e7d9      	b.n	80029b6 <_printf_common+0x92>
	...

08002a04 <_printf_i>:
 8002a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a08:	7e0f      	ldrb	r7, [r1, #24]
 8002a0a:	4691      	mov	r9, r2
 8002a0c:	2f78      	cmp	r7, #120	; 0x78
 8002a0e:	4680      	mov	r8, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	469a      	mov	sl, r3
 8002a14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a1a:	d807      	bhi.n	8002a2c <_printf_i+0x28>
 8002a1c:	2f62      	cmp	r7, #98	; 0x62
 8002a1e:	d80a      	bhi.n	8002a36 <_printf_i+0x32>
 8002a20:	2f00      	cmp	r7, #0
 8002a22:	f000 80d9 	beq.w	8002bd8 <_printf_i+0x1d4>
 8002a26:	2f58      	cmp	r7, #88	; 0x58
 8002a28:	f000 80a4 	beq.w	8002b74 <_printf_i+0x170>
 8002a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a34:	e03a      	b.n	8002aac <_printf_i+0xa8>
 8002a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a3a:	2b15      	cmp	r3, #21
 8002a3c:	d8f6      	bhi.n	8002a2c <_printf_i+0x28>
 8002a3e:	a101      	add	r1, pc, #4	; (adr r1, 8002a44 <_printf_i+0x40>)
 8002a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a44:	08002a9d 	.word	0x08002a9d
 8002a48:	08002ab1 	.word	0x08002ab1
 8002a4c:	08002a2d 	.word	0x08002a2d
 8002a50:	08002a2d 	.word	0x08002a2d
 8002a54:	08002a2d 	.word	0x08002a2d
 8002a58:	08002a2d 	.word	0x08002a2d
 8002a5c:	08002ab1 	.word	0x08002ab1
 8002a60:	08002a2d 	.word	0x08002a2d
 8002a64:	08002a2d 	.word	0x08002a2d
 8002a68:	08002a2d 	.word	0x08002a2d
 8002a6c:	08002a2d 	.word	0x08002a2d
 8002a70:	08002bbf 	.word	0x08002bbf
 8002a74:	08002ae1 	.word	0x08002ae1
 8002a78:	08002ba1 	.word	0x08002ba1
 8002a7c:	08002a2d 	.word	0x08002a2d
 8002a80:	08002a2d 	.word	0x08002a2d
 8002a84:	08002be1 	.word	0x08002be1
 8002a88:	08002a2d 	.word	0x08002a2d
 8002a8c:	08002ae1 	.word	0x08002ae1
 8002a90:	08002a2d 	.word	0x08002a2d
 8002a94:	08002a2d 	.word	0x08002a2d
 8002a98:	08002ba9 	.word	0x08002ba9
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	602a      	str	r2, [r5, #0]
 8002aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0a4      	b.n	8002bfa <_printf_i+0x1f6>
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	6829      	ldr	r1, [r5, #0]
 8002ab4:	0606      	lsls	r6, r0, #24
 8002ab6:	f101 0304 	add.w	r3, r1, #4
 8002aba:	d50a      	bpl.n	8002ad2 <_printf_i+0xce>
 8002abc:	680e      	ldr	r6, [r1, #0]
 8002abe:	602b      	str	r3, [r5, #0]
 8002ac0:	2e00      	cmp	r6, #0
 8002ac2:	da03      	bge.n	8002acc <_printf_i+0xc8>
 8002ac4:	232d      	movs	r3, #45	; 0x2d
 8002ac6:	4276      	negs	r6, r6
 8002ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002acc:	230a      	movs	r3, #10
 8002ace:	485e      	ldr	r0, [pc, #376]	; (8002c48 <_printf_i+0x244>)
 8002ad0:	e019      	b.n	8002b06 <_printf_i+0x102>
 8002ad2:	680e      	ldr	r6, [r1, #0]
 8002ad4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ad8:	602b      	str	r3, [r5, #0]
 8002ada:	bf18      	it	ne
 8002adc:	b236      	sxthne	r6, r6
 8002ade:	e7ef      	b.n	8002ac0 <_printf_i+0xbc>
 8002ae0:	682b      	ldr	r3, [r5, #0]
 8002ae2:	6820      	ldr	r0, [r4, #0]
 8002ae4:	1d19      	adds	r1, r3, #4
 8002ae6:	6029      	str	r1, [r5, #0]
 8002ae8:	0601      	lsls	r1, r0, #24
 8002aea:	d501      	bpl.n	8002af0 <_printf_i+0xec>
 8002aec:	681e      	ldr	r6, [r3, #0]
 8002aee:	e002      	b.n	8002af6 <_printf_i+0xf2>
 8002af0:	0646      	lsls	r6, r0, #25
 8002af2:	d5fb      	bpl.n	8002aec <_printf_i+0xe8>
 8002af4:	881e      	ldrh	r6, [r3, #0]
 8002af6:	2f6f      	cmp	r7, #111	; 0x6f
 8002af8:	bf0c      	ite	eq
 8002afa:	2308      	moveq	r3, #8
 8002afc:	230a      	movne	r3, #10
 8002afe:	4852      	ldr	r0, [pc, #328]	; (8002c48 <_printf_i+0x244>)
 8002b00:	2100      	movs	r1, #0
 8002b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b06:	6865      	ldr	r5, [r4, #4]
 8002b08:	2d00      	cmp	r5, #0
 8002b0a:	bfa8      	it	ge
 8002b0c:	6821      	ldrge	r1, [r4, #0]
 8002b0e:	60a5      	str	r5, [r4, #8]
 8002b10:	bfa4      	itt	ge
 8002b12:	f021 0104 	bicge.w	r1, r1, #4
 8002b16:	6021      	strge	r1, [r4, #0]
 8002b18:	b90e      	cbnz	r6, 8002b1e <_printf_i+0x11a>
 8002b1a:	2d00      	cmp	r5, #0
 8002b1c:	d04d      	beq.n	8002bba <_printf_i+0x1b6>
 8002b1e:	4615      	mov	r5, r2
 8002b20:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b24:	fb03 6711 	mls	r7, r3, r1, r6
 8002b28:	5dc7      	ldrb	r7, [r0, r7]
 8002b2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b2e:	4637      	mov	r7, r6
 8002b30:	42bb      	cmp	r3, r7
 8002b32:	460e      	mov	r6, r1
 8002b34:	d9f4      	bls.n	8002b20 <_printf_i+0x11c>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d10b      	bne.n	8002b52 <_printf_i+0x14e>
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	07de      	lsls	r6, r3, #31
 8002b3e:	d508      	bpl.n	8002b52 <_printf_i+0x14e>
 8002b40:	6923      	ldr	r3, [r4, #16]
 8002b42:	6861      	ldr	r1, [r4, #4]
 8002b44:	4299      	cmp	r1, r3
 8002b46:	bfde      	ittt	le
 8002b48:	2330      	movle	r3, #48	; 0x30
 8002b4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b52:	1b52      	subs	r2, r2, r5
 8002b54:	6122      	str	r2, [r4, #16]
 8002b56:	464b      	mov	r3, r9
 8002b58:	4621      	mov	r1, r4
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	f8cd a000 	str.w	sl, [sp]
 8002b60:	aa03      	add	r2, sp, #12
 8002b62:	f7ff fedf 	bl	8002924 <_printf_common>
 8002b66:	3001      	adds	r0, #1
 8002b68:	d14c      	bne.n	8002c04 <_printf_i+0x200>
 8002b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6e:	b004      	add	sp, #16
 8002b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b74:	4834      	ldr	r0, [pc, #208]	; (8002c48 <_printf_i+0x244>)
 8002b76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b7a:	6829      	ldr	r1, [r5, #0]
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b82:	6029      	str	r1, [r5, #0]
 8002b84:	061d      	lsls	r5, r3, #24
 8002b86:	d514      	bpl.n	8002bb2 <_printf_i+0x1ae>
 8002b88:	07df      	lsls	r7, r3, #31
 8002b8a:	bf44      	itt	mi
 8002b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8002b90:	6023      	strmi	r3, [r4, #0]
 8002b92:	b91e      	cbnz	r6, 8002b9c <_printf_i+0x198>
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	f023 0320 	bic.w	r3, r3, #32
 8002b9a:	6023      	str	r3, [r4, #0]
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	e7af      	b.n	8002b00 <_printf_i+0xfc>
 8002ba0:	6823      	ldr	r3, [r4, #0]
 8002ba2:	f043 0320 	orr.w	r3, r3, #32
 8002ba6:	6023      	str	r3, [r4, #0]
 8002ba8:	2378      	movs	r3, #120	; 0x78
 8002baa:	4828      	ldr	r0, [pc, #160]	; (8002c4c <_printf_i+0x248>)
 8002bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bb0:	e7e3      	b.n	8002b7a <_printf_i+0x176>
 8002bb2:	0659      	lsls	r1, r3, #25
 8002bb4:	bf48      	it	mi
 8002bb6:	b2b6      	uxthmi	r6, r6
 8002bb8:	e7e6      	b.n	8002b88 <_printf_i+0x184>
 8002bba:	4615      	mov	r5, r2
 8002bbc:	e7bb      	b.n	8002b36 <_printf_i+0x132>
 8002bbe:	682b      	ldr	r3, [r5, #0]
 8002bc0:	6826      	ldr	r6, [r4, #0]
 8002bc2:	1d18      	adds	r0, r3, #4
 8002bc4:	6961      	ldr	r1, [r4, #20]
 8002bc6:	6028      	str	r0, [r5, #0]
 8002bc8:	0635      	lsls	r5, r6, #24
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	d501      	bpl.n	8002bd2 <_printf_i+0x1ce>
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	e002      	b.n	8002bd8 <_printf_i+0x1d4>
 8002bd2:	0670      	lsls	r0, r6, #25
 8002bd4:	d5fb      	bpl.n	8002bce <_printf_i+0x1ca>
 8002bd6:	8019      	strh	r1, [r3, #0]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	4615      	mov	r5, r2
 8002bdc:	6123      	str	r3, [r4, #16]
 8002bde:	e7ba      	b.n	8002b56 <_printf_i+0x152>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	2100      	movs	r1, #0
 8002be4:	1d1a      	adds	r2, r3, #4
 8002be6:	602a      	str	r2, [r5, #0]
 8002be8:	681d      	ldr	r5, [r3, #0]
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	4628      	mov	r0, r5
 8002bee:	f000 f999 	bl	8002f24 <memchr>
 8002bf2:	b108      	cbz	r0, 8002bf8 <_printf_i+0x1f4>
 8002bf4:	1b40      	subs	r0, r0, r5
 8002bf6:	6060      	str	r0, [r4, #4]
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	6123      	str	r3, [r4, #16]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c02:	e7a8      	b.n	8002b56 <_printf_i+0x152>
 8002c04:	462a      	mov	r2, r5
 8002c06:	4649      	mov	r1, r9
 8002c08:	4640      	mov	r0, r8
 8002c0a:	6923      	ldr	r3, [r4, #16]
 8002c0c:	47d0      	blx	sl
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d0ab      	beq.n	8002b6a <_printf_i+0x166>
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	079b      	lsls	r3, r3, #30
 8002c16:	d413      	bmi.n	8002c40 <_printf_i+0x23c>
 8002c18:	68e0      	ldr	r0, [r4, #12]
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	4298      	cmp	r0, r3
 8002c1e:	bfb8      	it	lt
 8002c20:	4618      	movlt	r0, r3
 8002c22:	e7a4      	b.n	8002b6e <_printf_i+0x16a>
 8002c24:	2301      	movs	r3, #1
 8002c26:	4632      	mov	r2, r6
 8002c28:	4649      	mov	r1, r9
 8002c2a:	4640      	mov	r0, r8
 8002c2c:	47d0      	blx	sl
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d09b      	beq.n	8002b6a <_printf_i+0x166>
 8002c32:	3501      	adds	r5, #1
 8002c34:	68e3      	ldr	r3, [r4, #12]
 8002c36:	9903      	ldr	r1, [sp, #12]
 8002c38:	1a5b      	subs	r3, r3, r1
 8002c3a:	42ab      	cmp	r3, r5
 8002c3c:	dcf2      	bgt.n	8002c24 <_printf_i+0x220>
 8002c3e:	e7eb      	b.n	8002c18 <_printf_i+0x214>
 8002c40:	2500      	movs	r5, #0
 8002c42:	f104 0619 	add.w	r6, r4, #25
 8002c46:	e7f5      	b.n	8002c34 <_printf_i+0x230>
 8002c48:	08003071 	.word	0x08003071
 8002c4c:	08003082 	.word	0x08003082

08002c50 <_sbrk_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	2300      	movs	r3, #0
 8002c54:	4d05      	ldr	r5, [pc, #20]	; (8002c6c <_sbrk_r+0x1c>)
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	f7fd fcda 	bl	8000614 <_sbrk>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_sbrk_r+0x1a>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_sbrk_r+0x1a>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20000130 	.word	0x20000130

08002c70 <__sread>:
 8002c70:	b510      	push	{r4, lr}
 8002c72:	460c      	mov	r4, r1
 8002c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c78:	f000 f96e 	bl	8002f58 <_read_r>
 8002c7c:	2800      	cmp	r0, #0
 8002c7e:	bfab      	itete	ge
 8002c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c82:	89a3      	ldrhlt	r3, [r4, #12]
 8002c84:	181b      	addge	r3, r3, r0
 8002c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c8a:	bfac      	ite	ge
 8002c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c8e:	81a3      	strhlt	r3, [r4, #12]
 8002c90:	bd10      	pop	{r4, pc}

08002c92 <__swrite>:
 8002c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c96:	461f      	mov	r7, r3
 8002c98:	898b      	ldrh	r3, [r1, #12]
 8002c9a:	4605      	mov	r5, r0
 8002c9c:	05db      	lsls	r3, r3, #23
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	4616      	mov	r6, r2
 8002ca2:	d505      	bpl.n	8002cb0 <__swrite+0x1e>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cac:	f000 f928 	bl	8002f00 <_lseek_r>
 8002cb0:	89a3      	ldrh	r3, [r4, #12]
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb8:	81a3      	strh	r3, [r4, #12]
 8002cba:	4628      	mov	r0, r5
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc6:	f000 b869 	b.w	8002d9c <_write_r>

08002cca <__sseek>:
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	460c      	mov	r4, r1
 8002cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd2:	f000 f915 	bl	8002f00 <_lseek_r>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	89a3      	ldrh	r3, [r4, #12]
 8002cda:	bf15      	itete	ne
 8002cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ce6:	81a3      	strheq	r3, [r4, #12]
 8002ce8:	bf18      	it	ne
 8002cea:	81a3      	strhne	r3, [r4, #12]
 8002cec:	bd10      	pop	{r4, pc}

08002cee <__sclose>:
 8002cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf2:	f000 b8d3 	b.w	8002e9c <_close_r>
	...

08002cf8 <__swbuf_r>:
 8002cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfa:	460e      	mov	r6, r1
 8002cfc:	4614      	mov	r4, r2
 8002cfe:	4605      	mov	r5, r0
 8002d00:	b118      	cbz	r0, 8002d0a <__swbuf_r+0x12>
 8002d02:	6983      	ldr	r3, [r0, #24]
 8002d04:	b90b      	cbnz	r3, 8002d0a <__swbuf_r+0x12>
 8002d06:	f7ff facb 	bl	80022a0 <__sinit>
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <__swbuf_r+0x98>)
 8002d0c:	429c      	cmp	r4, r3
 8002d0e:	d12b      	bne.n	8002d68 <__swbuf_r+0x70>
 8002d10:	686c      	ldr	r4, [r5, #4]
 8002d12:	69a3      	ldr	r3, [r4, #24]
 8002d14:	60a3      	str	r3, [r4, #8]
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	071a      	lsls	r2, r3, #28
 8002d1a:	d52f      	bpl.n	8002d7c <__swbuf_r+0x84>
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	b36b      	cbz	r3, 8002d7c <__swbuf_r+0x84>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	b2f6      	uxtb	r6, r6
 8002d26:	1ac0      	subs	r0, r0, r3
 8002d28:	6963      	ldr	r3, [r4, #20]
 8002d2a:	4637      	mov	r7, r6
 8002d2c:	4283      	cmp	r3, r0
 8002d2e:	dc04      	bgt.n	8002d3a <__swbuf_r+0x42>
 8002d30:	4621      	mov	r1, r4
 8002d32:	4628      	mov	r0, r5
 8002d34:	f7ff fa20 	bl	8002178 <_fflush_r>
 8002d38:	bb30      	cbnz	r0, 8002d88 <__swbuf_r+0x90>
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60a3      	str	r3, [r4, #8]
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	6022      	str	r2, [r4, #0]
 8002d48:	701e      	strb	r6, [r3, #0]
 8002d4a:	6963      	ldr	r3, [r4, #20]
 8002d4c:	4283      	cmp	r3, r0
 8002d4e:	d004      	beq.n	8002d5a <__swbuf_r+0x62>
 8002d50:	89a3      	ldrh	r3, [r4, #12]
 8002d52:	07db      	lsls	r3, r3, #31
 8002d54:	d506      	bpl.n	8002d64 <__swbuf_r+0x6c>
 8002d56:	2e0a      	cmp	r6, #10
 8002d58:	d104      	bne.n	8002d64 <__swbuf_r+0x6c>
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f7ff fa0b 	bl	8002178 <_fflush_r>
 8002d62:	b988      	cbnz	r0, 8002d88 <__swbuf_r+0x90>
 8002d64:	4638      	mov	r0, r7
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <__swbuf_r+0x9c>)
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	d101      	bne.n	8002d72 <__swbuf_r+0x7a>
 8002d6e:	68ac      	ldr	r4, [r5, #8]
 8002d70:	e7cf      	b.n	8002d12 <__swbuf_r+0x1a>
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <__swbuf_r+0xa0>)
 8002d74:	429c      	cmp	r4, r3
 8002d76:	bf08      	it	eq
 8002d78:	68ec      	ldreq	r4, [r5, #12]
 8002d7a:	e7ca      	b.n	8002d12 <__swbuf_r+0x1a>
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f000 f81e 	bl	8002dc0 <__swsetup_r>
 8002d84:	2800      	cmp	r0, #0
 8002d86:	d0cb      	beq.n	8002d20 <__swbuf_r+0x28>
 8002d88:	f04f 37ff 	mov.w	r7, #4294967295
 8002d8c:	e7ea      	b.n	8002d64 <__swbuf_r+0x6c>
 8002d8e:	bf00      	nop
 8002d90:	08003020 	.word	0x08003020
 8002d94:	08003040 	.word	0x08003040
 8002d98:	08003000 	.word	0x08003000

08002d9c <_write_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	2200      	movs	r2, #0
 8002da6:	4d05      	ldr	r5, [pc, #20]	; (8002dbc <_write_r+0x20>)
 8002da8:	602a      	str	r2, [r5, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f7fd fcac 	bl	8000708 <_write>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_write_r+0x1e>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_write_r+0x1e>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000130 	.word	0x20000130

08002dc0 <__swsetup_r>:
 8002dc0:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <__swsetup_r+0xcc>)
 8002dc2:	b570      	push	{r4, r5, r6, lr}
 8002dc4:	681d      	ldr	r5, [r3, #0]
 8002dc6:	4606      	mov	r6, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	b125      	cbz	r5, 8002dd6 <__swsetup_r+0x16>
 8002dcc:	69ab      	ldr	r3, [r5, #24]
 8002dce:	b913      	cbnz	r3, 8002dd6 <__swsetup_r+0x16>
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f7ff fa65 	bl	80022a0 <__sinit>
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <__swsetup_r+0xd0>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d10f      	bne.n	8002dfc <__swsetup_r+0x3c>
 8002ddc:	686c      	ldr	r4, [r5, #4]
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002de4:	0719      	lsls	r1, r3, #28
 8002de6:	d42c      	bmi.n	8002e42 <__swsetup_r+0x82>
 8002de8:	06dd      	lsls	r5, r3, #27
 8002dea:	d411      	bmi.n	8002e10 <__swsetup_r+0x50>
 8002dec:	2309      	movs	r3, #9
 8002dee:	6033      	str	r3, [r6, #0]
 8002df0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	e03e      	b.n	8002e7a <__swsetup_r+0xba>
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <__swsetup_r+0xd4>)
 8002dfe:	429c      	cmp	r4, r3
 8002e00:	d101      	bne.n	8002e06 <__swsetup_r+0x46>
 8002e02:	68ac      	ldr	r4, [r5, #8]
 8002e04:	e7eb      	b.n	8002dde <__swsetup_r+0x1e>
 8002e06:	4b24      	ldr	r3, [pc, #144]	; (8002e98 <__swsetup_r+0xd8>)
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	bf08      	it	eq
 8002e0c:	68ec      	ldreq	r4, [r5, #12]
 8002e0e:	e7e6      	b.n	8002dde <__swsetup_r+0x1e>
 8002e10:	0758      	lsls	r0, r3, #29
 8002e12:	d512      	bpl.n	8002e3a <__swsetup_r+0x7a>
 8002e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e16:	b141      	cbz	r1, 8002e2a <__swsetup_r+0x6a>
 8002e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e1c:	4299      	cmp	r1, r3
 8002e1e:	d002      	beq.n	8002e26 <__swsetup_r+0x66>
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7ff fb4b 	bl	80024bc <_free_r>
 8002e26:	2300      	movs	r3, #0
 8002e28:	6363      	str	r3, [r4, #52]	; 0x34
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e30:	81a3      	strh	r3, [r4, #12]
 8002e32:	2300      	movs	r3, #0
 8002e34:	6063      	str	r3, [r4, #4]
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	81a3      	strh	r3, [r4, #12]
 8002e42:	6923      	ldr	r3, [r4, #16]
 8002e44:	b94b      	cbnz	r3, 8002e5a <__swsetup_r+0x9a>
 8002e46:	89a3      	ldrh	r3, [r4, #12]
 8002e48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d003      	beq.n	8002e5a <__swsetup_r+0x9a>
 8002e52:	4621      	mov	r1, r4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7ff fae9 	bl	800242c <__smakebuf_r>
 8002e5a:	89a0      	ldrh	r0, [r4, #12]
 8002e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e60:	f010 0301 	ands.w	r3, r0, #1
 8002e64:	d00a      	beq.n	8002e7c <__swsetup_r+0xbc>
 8002e66:	2300      	movs	r3, #0
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	6963      	ldr	r3, [r4, #20]
 8002e6c:	425b      	negs	r3, r3
 8002e6e:	61a3      	str	r3, [r4, #24]
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	b943      	cbnz	r3, 8002e86 <__swsetup_r+0xc6>
 8002e74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e78:	d1ba      	bne.n	8002df0 <__swsetup_r+0x30>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	0781      	lsls	r1, r0, #30
 8002e7e:	bf58      	it	pl
 8002e80:	6963      	ldrpl	r3, [r4, #20]
 8002e82:	60a3      	str	r3, [r4, #8]
 8002e84:	e7f4      	b.n	8002e70 <__swsetup_r+0xb0>
 8002e86:	2000      	movs	r0, #0
 8002e88:	e7f7      	b.n	8002e7a <__swsetup_r+0xba>
 8002e8a:	bf00      	nop
 8002e8c:	2000000c 	.word	0x2000000c
 8002e90:	08003020 	.word	0x08003020
 8002e94:	08003040 	.word	0x08003040
 8002e98:	08003000 	.word	0x08003000

08002e9c <_close_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	4d05      	ldr	r5, [pc, #20]	; (8002eb8 <_close_r+0x1c>)
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	f7fd fb83 	bl	80005b2 <_close>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d102      	bne.n	8002eb6 <_close_r+0x1a>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	b103      	cbz	r3, 8002eb6 <_close_r+0x1a>
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000130 	.word	0x20000130

08002ebc <_fstat_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4d06      	ldr	r5, [pc, #24]	; (8002edc <_fstat_r+0x20>)
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	f7fd fb7d 	bl	80005c8 <_fstat>
 8002ece:	1c43      	adds	r3, r0, #1
 8002ed0:	d102      	bne.n	8002ed8 <_fstat_r+0x1c>
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	b103      	cbz	r3, 8002ed8 <_fstat_r+0x1c>
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
 8002eda:	bf00      	nop
 8002edc:	20000130 	.word	0x20000130

08002ee0 <_isatty_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4d05      	ldr	r5, [pc, #20]	; (8002efc <_isatty_r+0x1c>)
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	602b      	str	r3, [r5, #0]
 8002eec:	f7fd fb7b 	bl	80005e6 <_isatty>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_isatty_r+0x1a>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_isatty_r+0x1a>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000130 	.word	0x20000130

08002f00 <_lseek_r>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4604      	mov	r4, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	2200      	movs	r2, #0
 8002f0a:	4d05      	ldr	r5, [pc, #20]	; (8002f20 <_lseek_r+0x20>)
 8002f0c:	602a      	str	r2, [r5, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f7fd fb73 	bl	80005fa <_lseek>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_lseek_r+0x1e>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_lseek_r+0x1e>
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000130 	.word	0x20000130

08002f24 <memchr>:
 8002f24:	4603      	mov	r3, r0
 8002f26:	b510      	push	{r4, lr}
 8002f28:	b2c9      	uxtb	r1, r1
 8002f2a:	4402      	add	r2, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	d101      	bne.n	8002f36 <memchr+0x12>
 8002f32:	2000      	movs	r0, #0
 8002f34:	e003      	b.n	8002f3e <memchr+0x1a>
 8002f36:	7804      	ldrb	r4, [r0, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	428c      	cmp	r4, r1
 8002f3c:	d1f6      	bne.n	8002f2c <memchr+0x8>
 8002f3e:	bd10      	pop	{r4, pc}

08002f40 <__malloc_lock>:
 8002f40:	4801      	ldr	r0, [pc, #4]	; (8002f48 <__malloc_lock+0x8>)
 8002f42:	f7ff ba4b 	b.w	80023dc <__retarget_lock_acquire_recursive>
 8002f46:	bf00      	nop
 8002f48:	20000124 	.word	0x20000124

08002f4c <__malloc_unlock>:
 8002f4c:	4801      	ldr	r0, [pc, #4]	; (8002f54 <__malloc_unlock+0x8>)
 8002f4e:	f7ff ba46 	b.w	80023de <__retarget_lock_release_recursive>
 8002f52:	bf00      	nop
 8002f54:	20000124 	.word	0x20000124

08002f58 <_read_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	2200      	movs	r2, #0
 8002f62:	4d05      	ldr	r5, [pc, #20]	; (8002f78 <_read_r+0x20>)
 8002f64:	602a      	str	r2, [r5, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7fd fbec 	bl	8000744 <_read>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_read_r+0x1e>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_read_r+0x1e>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	20000130 	.word	0x20000130

08002f7c <_init>:
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	bf00      	nop
 8002f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f82:	bc08      	pop	{r3}
 8002f84:	469e      	mov	lr, r3
 8002f86:	4770      	bx	lr

08002f88 <_fini>:
 8002f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8a:	bf00      	nop
 8002f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f8e:	bc08      	pop	{r3}
 8002f90:	469e      	mov	lr, r3
 8002f92:	4770      	bx	lr
