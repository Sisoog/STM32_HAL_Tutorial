
15_IWDG and WWDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08002f18  08002f18  00012f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08003180  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003180  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b57  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  00026bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  000284e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b0  00000000  00000000  00028c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e8b  00000000  00000000  00029300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000882d  00000000  00000000  0004318b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092726  00000000  00000000  0004b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002464  00000000  00000000  000de130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002f00 	.word	0x08002f00

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002f00 	.word	0x08002f00

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fb75 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f84b 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f8f5 	bl	8000420 <MX_GPIO_Init>
  MX_IWDG_Init();
 8000236:	f000 f88f 	bl	8000358 <MX_IWDG_Init>
  MX_USART1_UART_Init();
 800023a:	f000 f8a7 	bl	800038c <MX_USART1_UART_Init>
  MX_WWDG_Init();
 800023e:	f000 f8cf 	bl	80003e0 <MX_WWDG_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);				// initializing the stdio retargetting
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <main+0x88>)
 8000244:	f000 fb14 	bl	8000870 <RetargetInit>

  show_reset_sources();					// print the reset sources
 8000248:	f000 f92c 	bl	80004a4 <show_reset_sources>
  __HAL_RCC_CLEAR_RESET_FLAGS();		// clear the reset flags
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <main+0x8c>)
 800024e:	2201      	movs	r2, #1
 8000250:	601a      	str	r2, [r3, #0]

  uint32_t count = 0;					// variable for counting
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
  uint32_t i = 0;						// variable for timing
 8000256:	2300      	movs	r3, #0
 8000258:	603b      	str	r3, [r7, #0]
  	  }
#endif

	  /*******************			WWDG		  *******************/
#ifdef useWWDG
	  HAL_IWDG_Refresh(&hiwdg);			// the IWDG will not reset the MCU
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <main+0x90>)
 800025c:	f000 fe8f 	bl	8000f7e <HAL_IWDG_Refresh>

	  /* printing the counter nearly every second */
	  i++;
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	3301      	adds	r3, #1
 8000264:	603b      	str	r3, [r7, #0]
	  if(i > 600000)
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <main+0x94>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d908      	bls.n	8000280 <main+0x5c>
	  {
		  count++;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
		  i = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	603b      	str	r3, [r7, #0]
		  printf("count is: %lu\r\n", count);
 8000278:	6879      	ldr	r1, [r7, #4]
 800027a:	4810      	ldr	r0, [pc, #64]	; (80002bc <main+0x98>)
 800027c:	f001 fd68 	bl	8001d50 <iprintf>
	  }

	  /* if push button connected to PB0 is pushed, then the WWDG counter wont be reset */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == 0)
 8000280:	2120      	movs	r1, #32
 8000282:	480f      	ldr	r0, [pc, #60]	; (80002c0 <main+0x9c>)
 8000284:	f000 fe22 	bl	8000ecc <HAL_GPIO_ReadPin>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d1e5      	bne.n	800025a <main+0x36>
	  {
		  if(hwwdg.Instance->CR <= (255 - (hwwdg.Init.Counter - hwwdg.Init.Window)))
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <main+0xa0>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <main+0xa0>)
 8000296:	6899      	ldr	r1, [r3, #8]
 8000298:	4b0a      	ldr	r3, [pc, #40]	; (80002c4 <main+0xa0>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	1acb      	subs	r3, r1, r3
 800029e:	33ff      	adds	r3, #255	; 0xff
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d8da      	bhi.n	800025a <main+0x36>
	  	  {
		  	  HAL_WWDG_Refresh(&hwwdg);
 80002a4:	4807      	ldr	r0, [pc, #28]	; (80002c4 <main+0xa0>)
 80002a6:	f001 fd11 	bl	8001ccc <HAL_WWDG_Refresh>
	  HAL_IWDG_Refresh(&hiwdg);			// the IWDG will not reset the MCU
 80002aa:	e7d6      	b.n	800025a <main+0x36>
 80002ac:	20000098 	.word	0x20000098
 80002b0:	424204e0 	.word	0x424204e0
 80002b4:	2000008c 	.word	0x2000008c
 80002b8:	000927c0 	.word	0x000927c0
 80002bc:	08002f18 	.word	0x08002f18
 80002c0:	40010800 	.word	0x40010800
 80002c4:	200000dc 	.word	0x200000dc

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b090      	sub	sp, #64	; 0x40
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2228      	movs	r2, #40	; 0x28
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 fd32 	bl	8001d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002ea:	2309      	movs	r3, #9
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f8:	2301      	movs	r3, #1
 80002fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002fc:	2301      	movs	r3, #1
 80002fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000300:	2302      	movs	r3, #2
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000308:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fe41 	bl	8000f9c <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000320:	f000 f94e 	bl	80005c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	2302      	movs	r3, #2
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	4618      	mov	r0, r3
 8000340:	f001 f8ae 	bl	80014a0 <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800034a:	f000 f939 	bl	80005c0 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3740      	adds	r7, #64	; 0x40
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_IWDG_Init+0x2c>)
 800035e:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <MX_IWDG_Init+0x30>)
 8000360:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <MX_IWDG_Init+0x2c>)
 8000364:	2202      	movs	r2, #2
 8000366:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <MX_IWDG_Init+0x2c>)
 800036a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800036e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_IWDG_Init+0x2c>)
 8000372:	f000 fdc2 	bl	8000efa <HAL_IWDG_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800037c:	f000 f920 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000008c 	.word	0x2000008c
 8000388:	40003000 	.word	0x40003000

0800038c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_USART1_UART_Init+0x50>)
 8000394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f001 fa04 	bl	80017d0 <HAL_UART_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ce:	f000 f8f7 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000098 	.word	0x20000098
 80003dc:	40013800 	.word	0x40013800

080003e0 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_WWDG_Init+0x38>)
 80003e6:	4a0d      	ldr	r2, [pc, #52]	; (800041c <MX_WWDG_Init+0x3c>)
 80003e8:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_WWDG_Init+0x38>)
 80003ec:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80003f0:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 80;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_WWDG_Init+0x38>)
 80003f4:	2250      	movs	r2, #80	; 0x50
 80003f6:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 127;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_WWDG_Init+0x38>)
 80003fa:	227f      	movs	r2, #127	; 0x7f
 80003fc:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_WWDG_Init+0x38>)
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_WWDG_Init+0x38>)
 8000406:	f001 fc3d 	bl	8001c84 <HAL_WWDG_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000410:	f000 f8d6 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	200000dc 	.word	0x200000dc
 800041c:	40002c00 	.word	0x40002c00

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b19      	ldr	r3, [pc, #100]	; (800049c <MX_GPIO_Init+0x7c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a18      	ldr	r2, [pc, #96]	; (800049c <MX_GPIO_Init+0x7c>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_GPIO_Init+0x7c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <MX_GPIO_Init+0x7c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <MX_GPIO_Init+0x7c>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <MX_GPIO_Init+0x7c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b0d      	ldr	r3, [pc, #52]	; (800049c <MX_GPIO_Init+0x7c>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a0c      	ldr	r2, [pc, #48]	; (800049c <MX_GPIO_Init+0x7c>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_GPIO_Init+0x7c>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800047c:	2320      	movs	r3, #32
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4804      	ldr	r0, [pc, #16]	; (80004a0 <MX_GPIO_Init+0x80>)
 8000490:	f000 fb88 	bl	8000ba4 <HAL_GPIO_Init>

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <show_reset_sources>:

/* USER CODE BEGIN 4 */
void show_reset_sources (void)
{
 80004a4:	b5b0      	push	{r4, r5, r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af04      	add	r7, sp, #16
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 80004aa:	4b3d      	ldr	r3, [pc, #244]	; (80005a0 <show_reset_sources+0xfc>)
 80004ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d003      	beq.n	80004be <show_reset_sources+0x1a>
		printf("reset source was software reset\r\n");
 80004b6:	483b      	ldr	r0, [pc, #236]	; (80005a4 <show_reset_sources+0x100>)
 80004b8:	f001 fcd0 	bl	8001e5c <puts>
 80004bc:	e02e      	b.n	800051c <show_reset_sources+0x78>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80004be:	4b38      	ldr	r3, [pc, #224]	; (80005a0 <show_reset_sources+0xfc>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	da03      	bge.n	80004ce <show_reset_sources+0x2a>
		printf("reset source was Low Power reset\r\n");
 80004c6:	4838      	ldr	r0, [pc, #224]	; (80005a8 <show_reset_sources+0x104>)
 80004c8:	f001 fcc8 	bl	8001e5c <puts>
 80004cc:	e026      	b.n	800051c <show_reset_sources+0x78>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <show_reset_sources+0xfc>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d003      	beq.n	80004e2 <show_reset_sources+0x3e>
		printf("reset source was POR/PDR\r\n");
 80004da:	4834      	ldr	r0, [pc, #208]	; (80005ac <show_reset_sources+0x108>)
 80004dc:	f001 fcbe 	bl	8001e5c <puts>
 80004e0:	e01c      	b.n	800051c <show_reset_sources+0x78>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80004e2:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <show_reset_sources+0xfc>)
 80004e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <show_reset_sources+0x52>
		printf("reset source was Window Watchdog\r\n");
 80004ee:	4830      	ldr	r0, [pc, #192]	; (80005b0 <show_reset_sources+0x10c>)
 80004f0:	f001 fcb4 	bl	8001e5c <puts>
 80004f4:	e012      	b.n	800051c <show_reset_sources+0x78>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <show_reset_sources+0xfc>)
 80004f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d003      	beq.n	800050a <show_reset_sources+0x66>
		printf("reset source was Independent Watchdog\r\n");
 8000502:	482c      	ldr	r0, [pc, #176]	; (80005b4 <show_reset_sources+0x110>)
 8000504:	f001 fcaa 	bl	8001e5c <puts>
 8000508:	e008      	b.n	800051c <show_reset_sources+0x78>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800050a:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <show_reset_sources+0xfc>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <show_reset_sources+0x78>
		printf("reset source was reset pin\r\n");
 8000516:	4828      	ldr	r0, [pc, #160]	; (80005b8 <show_reset_sources+0x114>)
 8000518:	f001 fca0 	bl	8001e5c <puts>

	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
	(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != 0),
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <show_reset_sources+0xfc>)
 800051e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
	(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != 0),
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <show_reset_sources+0xfc>)
 8000532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 8000538:	2b00      	cmp	r3, #0
 800053a:	bf14      	ite	ne
 800053c:	2301      	movne	r3, #1
 800053e:	2300      	moveq	r3, #0
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461c      	mov	r4, r3
	(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != 0),
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <show_reset_sources+0xfc>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf14      	ite	ne
 8000550:	2301      	movne	r3, #1
 8000552:	2300      	moveq	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	461d      	mov	r5, r3
	(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != 0));
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <show_reset_sources+0xfc>)
 800055a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf14      	ite	ne
 8000564:	2301      	movne	r3, #1
 8000566:	2300      	moveq	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
	(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != 0));
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <show_reset_sources+0xfc>)
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 8000570:	0fdb      	lsrs	r3, r3, #31
 8000572:	b2db      	uxtb	r3, r3
 8000574:	4619      	mov	r1, r3
	(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) != 0), (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != 0));
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <show_reset_sources+0xfc>)
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
	printf("\r\nReset sources:\r\nPIN: %d\r\nIWDG: %d\r\nWWDG: %d\r\nSFT: %d\r\nLPW: %d\r\nPOR/PDR: %d\r\n\r\n\r\n",
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf14      	ite	ne
 8000582:	2301      	movne	r3, #1
 8000584:	2300      	moveq	r3, #0
 8000586:	b2db      	uxtb	r3, r3
 8000588:	9302      	str	r3, [sp, #8]
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	9200      	str	r2, [sp, #0]
 800058e:	462b      	mov	r3, r5
 8000590:	4622      	mov	r2, r4
 8000592:	4601      	mov	r1, r0
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <show_reset_sources+0x118>)
 8000596:	f001 fbdb 	bl	8001d50 <iprintf>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bdb0      	pop	{r4, r5, r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	08002f28 	.word	0x08002f28
 80005a8:	08002f4c 	.word	0x08002f4c
 80005ac:	08002f70 	.word	0x08002f70
 80005b0:	08002f8c 	.word	0x08002f8c
 80005b4:	08002fb0 	.word	0x08002fb0
 80005b8:	08002fd8 	.word	0x08002fd8
 80005bc:	08002ff4 	.word	0x08002ff4

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_MspInit+0x54>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <HAL_MspInit+0x54>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6193      	str	r3, [r2, #24]
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_MspInit+0x54>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <HAL_MspInit+0x54>)
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <HAL_MspInit+0x54>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	61d3      	str	r3, [r2, #28]
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <HAL_MspInit+0x54>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_MspInit+0x58>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x58>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <HAL_UART_MspInit+0x8c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d131      	bne.n	80006ac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000648:	4b1b      	ldr	r3, [pc, #108]	; (80006b8 <HAL_UART_MspInit+0x90>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a1a      	ldr	r2, [pc, #104]	; (80006b8 <HAL_UART_MspInit+0x90>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b18      	ldr	r3, [pc, #96]	; (80006b8 <HAL_UART_MspInit+0x90>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_UART_MspInit+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <HAL_UART_MspInit+0x90>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_UART_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	4619      	mov	r1, r3
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <HAL_UART_MspInit+0x94>)
 800068e:	f000 fa89 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	4805      	ldr	r0, [pc, #20]	; (80006bc <HAL_UART_MspInit+0x94>)
 80006a8:	f000 fa7c 	bl	8000ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013800 	.word	0x40013800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800

080006c0 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a09      	ldr	r2, [pc, #36]	; (80006f4 <HAL_WWDG_MspInit+0x34>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d10b      	bne.n	80006ea <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_WWDG_MspInit+0x38>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_WWDG_MspInit+0x38>)
 80006d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_WWDG_MspInit+0x38>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40002c00 	.word	0x40002c00
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000742:	f000 f92f 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}

0800074a <_close>:
	}
	return len;
}

int _close(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	return -1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000770:	605a      	str	r2, [r3, #4]
	return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <_isatty>:

int _isatty(int file)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
	return 1;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	60f8      	str	r0, [r7, #12]
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
	return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
	...

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f001 fa86 	bl	8001cec <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20010000 	.word	0x20010000
 800080c:	00000400 	.word	0x00000400
 8000810:	200000f0 	.word	0x200000f0
 8000814:	20000110 	.word	0x20000110

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084a:	f7ff ffe5 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f001 fa53 	bl	8001cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fce7 	bl	8000224 <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000860:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 8000864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000868:	2000010c 	.word	0x2000010c

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <RetargetInit>:


UART_HandleTypeDef *gHuart;

//Initialization function sets the uart handler
void RetargetInit(UART_HandleTypeDef *huart) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <RetargetInit+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <RetargetInit+0x2c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6898      	ldr	r0, [r3, #8]
 8000884:	2300      	movs	r3, #0
 8000886:	2202      	movs	r2, #2
 8000888:	2100      	movs	r1, #0
 800088a:	f001 faef 	bl	8001e6c <setvbuf>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000f4 	.word	0x200000f4
 800089c:	2000000c 	.word	0x2000000c

080008a0 <_write>:

//Definition of the underlying function for std out
int _write(int fd, char* ptr, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <_write+0x38>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	f000 ffd6 	bl	800186a <HAL_UART_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <_write+0x2c>
    	return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	e001      	b.n	80008d0 <_write+0x30>
    else
    	return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200000f4 	.word	0x200000f4

080008dc <_read>:

//Definition of the underlying function for std in
int _read(int fd, char* ptr, int len) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <_read+0x38>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	f001 f84b 	bl	800198e <HAL_UART_Receive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <_read+0x2a>
    	return 1;
 8000902:	2301      	movs	r3, #1
 8000904:	e001      	b.n	800090a <_read+0x2e>
    else
    	return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000f4 	.word	0x200000f4

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x28>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f907 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fe4a 	bl	80005cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f911 	bl	8000b8a <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f8e7 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000008 	.word	0x20000008
 80009c4:	200000f8 	.word	0x200000f8

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	200000f8 	.word	0x200000f8

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff90 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff49 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff5e 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff90 	bl	8000a94 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5f 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ffb0 	bl	8000af8 <SysTick_Config>
 8000b98:	4603      	mov	r3, r0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e179      	b.n	8000eac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8168 	bne.w	8000ea6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x290>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d05e      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000be0:	4a94      	ldr	r2, [pc, #592]	; (8000e34 <HAL_GPIO_Init+0x290>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d875      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000be6:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x294>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d058      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bec:	4a92      	ldr	r2, [pc, #584]	; (8000e38 <HAL_GPIO_Init+0x294>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d86f      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bf2:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x298>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d052      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000bf8:	4a90      	ldr	r2, [pc, #576]	; (8000e3c <HAL_GPIO_Init+0x298>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d869      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000bfe:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x29c>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d04c      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c04:	4a8e      	ldr	r2, [pc, #568]	; (8000e40 <HAL_GPIO_Init+0x29c>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d863      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c0a:	4a8e      	ldr	r2, [pc, #568]	; (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d046      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
 8000c10:	4a8c      	ldr	r2, [pc, #560]	; (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d85d      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c16:	2b12      	cmp	r3, #18
 8000c18:	d82a      	bhi.n	8000c70 <HAL_GPIO_Init+0xcc>
 8000c1a:	2b12      	cmp	r3, #18
 8000c1c:	d859      	bhi.n	8000cd2 <HAL_GPIO_Init+0x12e>
 8000c1e:	a201      	add	r2, pc, #4	; (adr r2, 8000c24 <HAL_GPIO_Init+0x80>)
 8000c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c24:	08000c9f 	.word	0x08000c9f
 8000c28:	08000c79 	.word	0x08000c79
 8000c2c:	08000c8b 	.word	0x08000c8b
 8000c30:	08000ccd 	.word	0x08000ccd
 8000c34:	08000cd3 	.word	0x08000cd3
 8000c38:	08000cd3 	.word	0x08000cd3
 8000c3c:	08000cd3 	.word	0x08000cd3
 8000c40:	08000cd3 	.word	0x08000cd3
 8000c44:	08000cd3 	.word	0x08000cd3
 8000c48:	08000cd3 	.word	0x08000cd3
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cd3 	.word	0x08000cd3
 8000c58:	08000cd3 	.word	0x08000cd3
 8000c5c:	08000cd3 	.word	0x08000cd3
 8000c60:	08000cd3 	.word	0x08000cd3
 8000c64:	08000cd3 	.word	0x08000cd3
 8000c68:	08000c81 	.word	0x08000c81
 8000c6c:	08000c95 	.word	0x08000c95
 8000c70:	4a75      	ldr	r2, [pc, #468]	; (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d013      	beq.n	8000c9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c76:	e02c      	b.n	8000cd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e029      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	3304      	adds	r3, #4
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e024      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e01f      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	330c      	adds	r3, #12
 8000c9a:	623b      	str	r3, [r7, #32]
          break;
 8000c9c:	e01a      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d102      	bne.n	8000cac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e013      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d105      	bne.n	8000cc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69fa      	ldr	r2, [r7, #28]
 8000cbc:	611a      	str	r2, [r3, #16]
          break;
 8000cbe:	e009      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	615a      	str	r2, [r3, #20]
          break;
 8000cca:	e003      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
          break;
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x130>
          break;
 8000cd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2bff      	cmp	r3, #255	; 0xff
 8000cd8:	d801      	bhi.n	8000cde <HAL_GPIO_Init+0x13a>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	e001      	b.n	8000ce2 <HAL_GPIO_Init+0x13e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	2bff      	cmp	r3, #255	; 0xff
 8000ce8:	d802      	bhi.n	8000cf0 <HAL_GPIO_Init+0x14c>
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x152>
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fa01 f303 	lsl.w	r3, r1, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	401a      	ands	r2, r3
 8000d08:	6a39      	ldr	r1, [r7, #32]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	431a      	orrs	r2, r3
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f000 80c1 	beq.w	8000ea6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d24:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d3c:	4a44      	ldr	r2, [pc, #272]	; (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a3c      	ldr	r2, [pc, #240]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d01f      	beq.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <HAL_GPIO_Init+0x2b4>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d019      	beq.n	8000da4 <HAL_GPIO_Init+0x200>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a3a      	ldr	r2, [pc, #232]	; (8000e5c <HAL_GPIO_Init+0x2b8>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x1fc>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a39      	ldr	r2, [pc, #228]	; (8000e60 <HAL_GPIO_Init+0x2bc>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1f8>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <HAL_GPIO_Init+0x2c0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1f4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a37      	ldr	r2, [pc, #220]	; (8000e68 <HAL_GPIO_Init+0x2c4>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1f0>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e00a      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d94:	2306      	movs	r3, #6
 8000d96:	e008      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x206>
 8000da8:	2300      	movs	r3, #0
 8000daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dba:	4925      	ldr	r1, [pc, #148]	; (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd4:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4924      	ldr	r1, [pc, #144]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	600b      	str	r3, [r1, #0]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4920      	ldr	r1, [pc, #128]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	491a      	ldr	r1, [pc, #104]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	604b      	str	r3, [r1, #4]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e0a:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4916      	ldr	r1, [pc, #88]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d025      	beq.n	8000e70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	4910      	ldr	r1, [pc, #64]	; (8000e6c <HAL_GPIO_Init+0x2c8>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	608b      	str	r3, [r1, #8]
 8000e30:	e025      	b.n	8000e7e <HAL_GPIO_Init+0x2da>
 8000e32:	bf00      	nop
 8000e34:	10320000 	.word	0x10320000
 8000e38:	10310000 	.word	0x10310000
 8000e3c:	10220000 	.word	0x10220000
 8000e40:	10210000 	.word	0x10210000
 8000e44:	10120000 	.word	0x10120000
 8000e48:	10110000 	.word	0x10110000
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010000 	.word	0x40010000
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40011400 	.word	0x40011400
 8000e64:	40011800 	.word	0x40011800
 8000e68:	40011c00 	.word	0x40011c00
 8000e6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4913      	ldr	r1, [pc, #76]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000e8c:	68da      	ldr	r2, [r3, #12]
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60cb      	str	r3, [r1, #12]
 8000e96:	e006      	b.n	8000ea6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	4909      	ldr	r1, [pc, #36]	; (8000ec8 <HAL_GPIO_Init+0x324>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f47f ae7e 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	372c      	adds	r7, #44	; 0x2c
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e001      	b.n	8000eee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d101      	bne.n	8000f0c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e034      	b.n	8000f76 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000f14:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f245 5255 	movw	r2, #21845	; 0x5555
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6852      	ldr	r2, [r2, #4]
 8000f28:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	6892      	ldr	r2, [r2, #8]
 8000f32:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000f34:	f7ff fd48 	bl	80009c8 <HAL_GetTick>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f3a:	e00f      	b.n	8000f5c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000f3c:	f7ff fd44 	bl	80009c8 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b27      	cmp	r3, #39	; 0x27
 8000f48:	d908      	bls.n	8000f5c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e00c      	b.n	8000f76 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1e8      	bne.n	8000f3c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e272      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8087 	beq.w	80010ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fbc:	4b92      	ldr	r3, [pc, #584]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d00c      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fc8:	4b8f      	ldr	r3, [pc, #572]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d112      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
 8000fd4:	4b8c      	ldr	r3, [pc, #560]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d10b      	bne.n	8000ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe2:	4b89      	ldr	r3, [pc, #548]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d06c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x12c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d168      	bne.n	80010c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e24c      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001002:	d106      	bne.n	8001012 <HAL_RCC_OscConfig+0x76>
 8001004:	4b80      	ldr	r3, [pc, #512]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a7f      	ldr	r2, [pc, #508]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e02e      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x98>
 800101a:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7a      	ldr	r2, [pc, #488]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b78      	ldr	r3, [pc, #480]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a77      	ldr	r2, [pc, #476]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e01d      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0xbc>
 800103e:	4b72      	ldr	r3, [pc, #456]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a71      	ldr	r2, [pc, #452]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a6e      	ldr	r2, [pc, #440]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0xd4>
 8001058:	4b6b      	ldr	r3, [pc, #428]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a6a      	ldr	r2, [pc, #424]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a67      	ldr	r2, [pc, #412]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800106a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fca6 	bl	80009c8 <HAL_GetTick>
 800107c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fca2 	bl	80009c8 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	; 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e200      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0f0      	beq.n	8001080 <HAL_RCC_OscConfig+0xe4>
 800109e:	e014      	b.n	80010ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc92 	bl	80009c8 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fc8e 	bl	80009c8 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e1ec      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ba:	4b53      	ldr	r3, [pc, #332]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x10c>
 80010c6:	e000      	b.n	80010ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d063      	beq.n	800119e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d6:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00b      	beq.n	80010fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010e2:	4b49      	ldr	r3, [pc, #292]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d11c      	bne.n	8001128 <HAL_RCC_OscConfig+0x18c>
 80010ee:	4b46      	ldr	r3, [pc, #280]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d116      	bne.n	8001128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <HAL_RCC_OscConfig+0x176>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d001      	beq.n	8001112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e1c0      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4b3d      	ldr	r3, [pc, #244]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4939      	ldr	r1, [pc, #228]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001122:	4313      	orrs	r3, r2
 8001124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001126:	e03a      	b.n	800119e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001130:	4b36      	ldr	r3, [pc, #216]	; (800120c <HAL_RCC_OscConfig+0x270>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001136:	f7ff fc47 	bl	80009c8 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fc43 	bl	80009c8 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e1a1      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f0      	beq.n	800113e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4927      	ldr	r1, [pc, #156]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e015      	b.n	800119e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_RCC_OscConfig+0x270>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc26 	bl	80009c8 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff fc22 	bl	80009c8 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e180      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d03a      	beq.n	8001220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d019      	beq.n	80011e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x274>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b8:	f7ff fc06 	bl	80009c8 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c0:	f7ff fc02 	bl	80009c8 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e160      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011de:	2001      	movs	r0, #1
 80011e0:	f000 fad8 	bl	8001794 <RCC_Delay>
 80011e4:	e01c      	b.n	8001220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_RCC_OscConfig+0x274>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ec:	f7ff fbec 	bl	80009c8 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f2:	e00f      	b.n	8001214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011f4:	f7ff fbe8 	bl	80009c8 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d908      	bls.n	8001214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e146      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	42420000 	.word	0x42420000
 8001210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1e9      	bne.n	80011f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a6 	beq.w	800137a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001232:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b88      	ldr	r3, [pc, #544]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a87      	ldr	r2, [pc, #540]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b85      	ldr	r3, [pc, #532]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001256:	2301      	movs	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	4b82      	ldr	r3, [pc, #520]	; (8001464 <HAL_RCC_OscConfig+0x4c8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	2b00      	cmp	r3, #0
 8001264:	d118      	bne.n	8001298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001266:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x4c8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7e      	ldr	r2, [pc, #504]	; (8001464 <HAL_RCC_OscConfig+0x4c8>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001272:	f7ff fba9 	bl	80009c8 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800127a:	f7ff fba5 	bl	80009c8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e103      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800128c:	4b75      	ldr	r3, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x4c8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d106      	bne.n	80012ae <HAL_RCC_OscConfig+0x312>
 80012a0:	4b6f      	ldr	r3, [pc, #444]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e02d      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x334>
 80012b6:	4b6a      	ldr	r3, [pc, #424]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a69      	ldr	r2, [pc, #420]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	4b67      	ldr	r3, [pc, #412]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4a66      	ldr	r2, [pc, #408]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6213      	str	r3, [r2, #32]
 80012ce:	e01c      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b05      	cmp	r3, #5
 80012d6:	d10c      	bne.n	80012f2 <HAL_RCC_OscConfig+0x356>
 80012d8:	4b61      	ldr	r3, [pc, #388]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a60      	ldr	r2, [pc, #384]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4a5d      	ldr	r2, [pc, #372]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6213      	str	r3, [r2, #32]
 80012f0:	e00b      	b.n	800130a <HAL_RCC_OscConfig+0x36e>
 80012f2:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a5a      	ldr	r2, [pc, #360]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	f023 0301 	bic.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0304 	bic.w	r3, r3, #4
 8001308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d015      	beq.n	800133e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fb59 	bl	80009c8 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	e00a      	b.n	8001330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800131a:	f7ff fb55 	bl	80009c8 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	f241 3288 	movw	r2, #5000	; 0x1388
 8001328:	4293      	cmp	r3, r2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0b1      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001330:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0ee      	beq.n	800131a <HAL_RCC_OscConfig+0x37e>
 800133c:	e014      	b.n	8001368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff fb43 	bl	80009c8 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff fb3f 	bl	80009c8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e09b      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ee      	bne.n	8001346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d105      	bne.n	800137a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136e:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a3b      	ldr	r2, [pc, #236]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8087 	beq.w	8001492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d061      	beq.n	8001454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d146      	bne.n	8001426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x4cc>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fb13 	bl	80009c8 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fb0f 	bl	80009c8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e06d      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d108      	bne.n	80013e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	4921      	ldr	r1, [pc, #132]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a19      	ldr	r1, [r3, #32]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	430b      	orrs	r3, r1
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	4313      	orrs	r3, r2
 80013f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x4cc>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fae3 	bl	80009c8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001406:	f7ff fadf 	bl	80009c8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e03d      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x46a>
 8001424:	e035      	b.n	8001492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b10      	ldr	r3, [pc, #64]	; (8001468 <HAL_RCC_OscConfig+0x4cc>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff facc 	bl	80009c8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fac8 	bl	80009c8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e026      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x498>
 8001452:	e01e      	b.n	8001492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d107      	bne.n	800146c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e019      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
 8001460:	40021000 	.word	0x40021000
 8001464:	40007000 	.word	0x40007000
 8001468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x500>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	429a      	cmp	r2, r3
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0d0      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d910      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 0207 	bic.w	r2, r3, #7
 80014ca:	4965      	ldr	r1, [pc, #404]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b63      	ldr	r3, [pc, #396]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0b8      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d020      	beq.n	8001532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a58      	ldr	r2, [pc, #352]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a52      	ldr	r2, [pc, #328]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800151e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	494d      	ldr	r1, [pc, #308]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d040      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d115      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e07f      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e073      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e06b      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f023 0203 	bic.w	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4936      	ldr	r1, [pc, #216]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001590:	f7ff fa1a 	bl	80009c8 <HAL_GetTick>
 8001594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001596:	e00a      	b.n	80015ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001598:	f7ff fa16 	bl	80009c8 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e053      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 020c 	and.w	r2, r3, #12
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	429a      	cmp	r2, r3
 80015be:	d1eb      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d210      	bcs.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 0207 	bic.w	r2, r3, #7
 80015d6:	4922      	ldr	r1, [pc, #136]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e032      	b.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	490e      	ldr	r1, [pc, #56]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800162e:	f000 f821 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001632:	4602      	mov	r2, r0
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	091b      	lsrs	r3, r3, #4
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	490a      	ldr	r1, [pc, #40]	; (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001640:	5ccb      	ldrb	r3, [r1, r3]
 8001642:	fa22 f303 	lsr.w	r3, r2, r3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_RCC_ClockConfig+0x1cc>)
 8001648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1d0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f978 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000
 8001664:	40021000 	.word	0x40021000
 8001668:	08003058 	.word	0x08003058
 800166c:	20000000 	.word	0x20000000
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001674:	b490      	push	{r4, r7}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167a:	4b29      	ldr	r3, [pc, #164]	; (8001720 <HAL_RCC_GetSysClockFreq+0xac>)
 800167c:	1d3c      	adds	r4, r7, #4
 800167e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001684:	f240 2301 	movw	r3, #513	; 0x201
 8001688:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d002      	beq.n	80016b4 <HAL_RCC_GetSysClockFreq+0x40>
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d003      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x46>
 80016b2:	e02b      	b.n	800170c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016b6:	623b      	str	r3, [r7, #32]
      break;
 80016b8:	e02b      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	0c9b      	lsrs	r3, r3, #18
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	3328      	adds	r3, #40	; 0x28
 80016c4:	443b      	add	r3, r7
 80016c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d012      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <HAL_RCC_GetSysClockFreq+0xb0>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	0c5b      	lsrs	r3, r3, #17
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	3328      	adds	r3, #40	; 0x28
 80016e2:	443b      	add	r3, r7
 80016e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	e004      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	623b      	str	r3, [r7, #32]
      break;
 800170a:	e002      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_GetSysClockFreq+0xb4>)
 800170e:	623b      	str	r3, [r7, #32]
      break;
 8001710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001712:	6a3b      	ldr	r3, [r7, #32]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bc90      	pop	{r4, r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	08003048 	.word	0x08003048
 8001724:	40021000 	.word	0x40021000
 8001728:	007a1200 	.word	0x007a1200
 800172c:	003d0900 	.word	0x003d0900

08001730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <HAL_RCC_GetHCLKFreq+0x10>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000000 	.word	0x20000000

08001744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001748:	f7ff fff2 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	; (8001768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40021000 	.word	0x40021000
 8001768:	08003068 	.word	0x08003068

0800176c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001770:	f7ff ffde 	bl	8001730 <HAL_RCC_GetHCLKFreq>
 8001774:	4602      	mov	r2, r0
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0adb      	lsrs	r3, r3, #11
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	4903      	ldr	r1, [pc, #12]	; (8001790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001782:	5ccb      	ldrb	r3, [r1, r3]
 8001784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	08003068 	.word	0x08003068

08001794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <RCC_Delay+0x34>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <RCC_Delay+0x38>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0a5b      	lsrs	r3, r3, #9
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017b0:	bf00      	nop
  }
  while (Delay --);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	60fa      	str	r2, [r7, #12]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f9      	bne.n	80017b0 <RCC_Delay+0x1c>
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	20000000 	.word	0x20000000
 80017cc:	10624dd3 	.word	0x10624dd3

080017d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e03f      	b.n	8001862 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe ff16 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	; 0x24
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68da      	ldr	r2, [r3, #12]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f9a7 	bl	8001b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2220      	movs	r2, #32
 8001854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2220      	movs	r2, #32
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b08a      	sub	sp, #40	; 0x28
 800186e:	af02      	add	r7, sp, #8
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	603b      	str	r3, [r7, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b20      	cmp	r3, #32
 8001888:	d17c      	bne.n	8001984 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_UART_Transmit+0x2c>
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e075      	b.n	8001986 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_UART_Transmit+0x3e>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e06e      	b.n	8001986 <HAL_UART_Transmit+0x11c>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2221      	movs	r2, #33	; 0x21
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018be:	f7ff f883 	bl	80009c8 <HAL_GetTick>
 80018c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	88fa      	ldrh	r2, [r7, #6]
 80018c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d8:	d108      	bne.n	80018ec <HAL_UART_Transmit+0x82>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	e003      	b.n	80018f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80018fc:	e02a      	b.n	8001954 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2200      	movs	r2, #0
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f8e2 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e036      	b.n	8001986 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10b      	bne.n	8001936 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800192c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	3302      	adds	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	e007      	b.n	8001946 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	3301      	adds	r3, #1
 8001944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800194a:	b29b      	uxth	r3, r3
 800194c:	3b01      	subs	r3, #1
 800194e:	b29a      	uxth	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001958:	b29b      	uxth	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1cf      	bne.n	80018fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2200      	movs	r2, #0
 8001966:	2140      	movs	r1, #64	; 0x40
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 f8b2 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e006      	b.n	8001986 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2220      	movs	r2, #32
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b08a      	sub	sp, #40	; 0x28
 8001992:	af02      	add	r7, sp, #8
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	603b      	str	r3, [r7, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	f040 808c 	bne.w	8001ac8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d002      	beq.n	80019bc <HAL_UART_Receive+0x2e>
 80019b6:	88fb      	ldrh	r3, [r7, #6]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e084      	b.n	8001aca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_UART_Receive+0x40>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e07d      	b.n	8001aca <HAL_UART_Receive+0x13c>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2222      	movs	r2, #34	; 0x22
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019ea:	f7fe ffed 	bl	80009c8 <HAL_GetTick>
 80019ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	88fa      	ldrh	r2, [r7, #6]
 80019f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	88fa      	ldrh	r2, [r7, #6]
 80019fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a04:	d108      	bne.n	8001a18 <HAL_UART_Receive+0x8a>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d104      	bne.n	8001a18 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	e003      	b.n	8001a20 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a28:	e043      	b.n	8001ab2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2200      	movs	r2, #0
 8001a32:	2120      	movs	r1, #32
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 f84c 	bl	8001ad2 <UART_WaitOnFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e042      	b.n	8001aca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10c      	bne.n	8001a64 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	3302      	adds	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
 8001a62:	e01f      	b.n	8001aa4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6c:	d007      	beq.n	8001a7e <HAL_UART_Receive+0xf0>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_UART_Receive+0xfe>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	e008      	b.n	8001a9e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1b6      	bne.n	8001a2a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e000      	b.n	8001aca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b084      	sub	sp, #16
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae2:	e02c      	b.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aea:	d028      	beq.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8001af2:	f7fe ff69 	bl	80009c8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d21d      	bcs.n	8001b3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e00f      	b.n	8001b5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4013      	ands	r3, r2
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	bf0c      	ite	eq
 8001b4e:	2301      	moveq	r3, #1
 8001b50:	2300      	movne	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d0c3      	beq.n	8001ae4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ba2:	f023 030c 	bic.w	r3, r3, #12
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	68b9      	ldr	r1, [r7, #8]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <UART_SetConfig+0x114>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d103      	bne.n	8001bd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001bd0:	f7ff fdcc 	bl	800176c <HAL_RCC_GetPCLK2Freq>
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	e002      	b.n	8001bde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001bd8:	f7ff fdb4 	bl	8001744 <HAL_RCC_GetPCLK1Freq>
 8001bdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	441a      	add	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <UART_SetConfig+0x118>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	0119      	lsls	r1, r3, #4
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	009a      	lsls	r2, r3, #2
 8001c08:	441a      	add	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <UART_SetConfig+0x118>)
 8001c16:	fba3 0302 	umull	r0, r3, r3, r2
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2064      	movs	r0, #100	; 0x64
 8001c1e:	fb00 f303 	mul.w	r3, r0, r3
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	3332      	adds	r3, #50	; 0x32
 8001c28:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <UART_SetConfig+0x118>)
 8001c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c34:	4419      	add	r1, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009a      	lsls	r2, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <UART_SetConfig+0x118>)
 8001c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2064      	movs	r0, #100	; 0x64
 8001c56:	fb00 f303 	mul.w	r3, r0, r3
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	3332      	adds	r3, #50	; 0x32
 8001c60:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <UART_SetConfig+0x118>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	440a      	add	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	51eb851f 	.word	0x51eb851f

08001c84 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e016      	b.n	8001cc4 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd12 	bl	80006c0 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	ea42 0103 	orr.w	r1, r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68d2      	ldr	r2, [r2, #12]
 8001cdc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <__errno>:
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <__errno+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <__libc_init_array>:
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	2600      	movs	r6, #0
 8001cfc:	4d0c      	ldr	r5, [pc, #48]	; (8001d30 <__libc_init_array+0x38>)
 8001cfe:	4c0d      	ldr	r4, [pc, #52]	; (8001d34 <__libc_init_array+0x3c>)
 8001d00:	1b64      	subs	r4, r4, r5
 8001d02:	10a4      	asrs	r4, r4, #2
 8001d04:	42a6      	cmp	r6, r4
 8001d06:	d109      	bne.n	8001d1c <__libc_init_array+0x24>
 8001d08:	f001 f8fa 	bl	8002f00 <_init>
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	4d0a      	ldr	r5, [pc, #40]	; (8001d38 <__libc_init_array+0x40>)
 8001d10:	4c0a      	ldr	r4, [pc, #40]	; (8001d3c <__libc_init_array+0x44>)
 8001d12:	1b64      	subs	r4, r4, r5
 8001d14:	10a4      	asrs	r4, r4, #2
 8001d16:	42a6      	cmp	r6, r4
 8001d18:	d105      	bne.n	8001d26 <__libc_init_array+0x2e>
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d20:	4798      	blx	r3
 8001d22:	3601      	adds	r6, #1
 8001d24:	e7ee      	b.n	8001d04 <__libc_init_array+0xc>
 8001d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2a:	4798      	blx	r3
 8001d2c:	3601      	adds	r6, #1
 8001d2e:	e7f2      	b.n	8001d16 <__libc_init_array+0x1e>
 8001d30:	08003108 	.word	0x08003108
 8001d34:	08003108 	.word	0x08003108
 8001d38:	08003108 	.word	0x08003108
 8001d3c:	0800310c 	.word	0x0800310c

08001d40 <memset>:
 8001d40:	4603      	mov	r3, r0
 8001d42:	4402      	add	r2, r0
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d100      	bne.n	8001d4a <memset+0xa>
 8001d48:	4770      	bx	lr
 8001d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d4e:	e7f9      	b.n	8001d44 <memset+0x4>

08001d50 <iprintf>:
 8001d50:	b40f      	push	{r0, r1, r2, r3}
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <iprintf+0x2c>)
 8001d54:	b513      	push	{r0, r1, r4, lr}
 8001d56:	681c      	ldr	r4, [r3, #0]
 8001d58:	b124      	cbz	r4, 8001d64 <iprintf+0x14>
 8001d5a:	69a3      	ldr	r3, [r4, #24]
 8001d5c:	b913      	cbnz	r3, 8001d64 <iprintf+0x14>
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f000 fb20 	bl	80023a4 <__sinit>
 8001d64:	ab05      	add	r3, sp, #20
 8001d66:	4620      	mov	r0, r4
 8001d68:	9a04      	ldr	r2, [sp, #16]
 8001d6a:	68a1      	ldr	r1, [r4, #8]
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	f000 fd2b 	bl	80027c8 <_vfiprintf_r>
 8001d72:	b002      	add	sp, #8
 8001d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d78:	b004      	add	sp, #16
 8001d7a:	4770      	bx	lr
 8001d7c:	2000000c 	.word	0x2000000c

08001d80 <_puts_r>:
 8001d80:	b570      	push	{r4, r5, r6, lr}
 8001d82:	460e      	mov	r6, r1
 8001d84:	4605      	mov	r5, r0
 8001d86:	b118      	cbz	r0, 8001d90 <_puts_r+0x10>
 8001d88:	6983      	ldr	r3, [r0, #24]
 8001d8a:	b90b      	cbnz	r3, 8001d90 <_puts_r+0x10>
 8001d8c:	f000 fb0a 	bl	80023a4 <__sinit>
 8001d90:	69ab      	ldr	r3, [r5, #24]
 8001d92:	68ac      	ldr	r4, [r5, #8]
 8001d94:	b913      	cbnz	r3, 8001d9c <_puts_r+0x1c>
 8001d96:	4628      	mov	r0, r5
 8001d98:	f000 fb04 	bl	80023a4 <__sinit>
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <_puts_r+0xd0>)
 8001d9e:	429c      	cmp	r4, r3
 8001da0:	d120      	bne.n	8001de4 <_puts_r+0x64>
 8001da2:	686c      	ldr	r4, [r5, #4]
 8001da4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001da6:	07db      	lsls	r3, r3, #31
 8001da8:	d405      	bmi.n	8001db6 <_puts_r+0x36>
 8001daa:	89a3      	ldrh	r3, [r4, #12]
 8001dac:	0598      	lsls	r0, r3, #22
 8001dae:	d402      	bmi.n	8001db6 <_puts_r+0x36>
 8001db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001db2:	f000 fb95 	bl	80024e0 <__retarget_lock_acquire_recursive>
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	0719      	lsls	r1, r3, #28
 8001dba:	d51d      	bpl.n	8001df8 <_puts_r+0x78>
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	b1db      	cbz	r3, 8001df8 <_puts_r+0x78>
 8001dc0:	3e01      	subs	r6, #1
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	60a3      	str	r3, [r4, #8]
 8001dcc:	bb39      	cbnz	r1, 8001e1e <_puts_r+0x9e>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da38      	bge.n	8001e44 <_puts_r+0xc4>
 8001dd2:	4622      	mov	r2, r4
 8001dd4:	210a      	movs	r1, #10
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f000 f90e 	bl	8001ff8 <__swbuf_r>
 8001ddc:	3001      	adds	r0, #1
 8001dde:	d011      	beq.n	8001e04 <_puts_r+0x84>
 8001de0:	250a      	movs	r5, #10
 8001de2:	e011      	b.n	8001e08 <_puts_r+0x88>
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <_puts_r+0xd4>)
 8001de6:	429c      	cmp	r4, r3
 8001de8:	d101      	bne.n	8001dee <_puts_r+0x6e>
 8001dea:	68ac      	ldr	r4, [r5, #8]
 8001dec:	e7da      	b.n	8001da4 <_puts_r+0x24>
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <_puts_r+0xd8>)
 8001df0:	429c      	cmp	r4, r3
 8001df2:	bf08      	it	eq
 8001df4:	68ec      	ldreq	r4, [r5, #12]
 8001df6:	e7d5      	b.n	8001da4 <_puts_r+0x24>
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f000 f94e 	bl	800209c <__swsetup_r>
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d0dd      	beq.n	8001dc0 <_puts_r+0x40>
 8001e04:	f04f 35ff 	mov.w	r5, #4294967295
 8001e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e0a:	07da      	lsls	r2, r3, #31
 8001e0c:	d405      	bmi.n	8001e1a <_puts_r+0x9a>
 8001e0e:	89a3      	ldrh	r3, [r4, #12]
 8001e10:	059b      	lsls	r3, r3, #22
 8001e12:	d402      	bmi.n	8001e1a <_puts_r+0x9a>
 8001e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e16:	f000 fb64 	bl	80024e2 <__retarget_lock_release_recursive>
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da04      	bge.n	8001e2c <_puts_r+0xac>
 8001e22:	69a2      	ldr	r2, [r4, #24]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	dc06      	bgt.n	8001e36 <_puts_r+0xb6>
 8001e28:	290a      	cmp	r1, #10
 8001e2a:	d004      	beq.n	8001e36 <_puts_r+0xb6>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	6022      	str	r2, [r4, #0]
 8001e32:	7019      	strb	r1, [r3, #0]
 8001e34:	e7c5      	b.n	8001dc2 <_puts_r+0x42>
 8001e36:	4622      	mov	r2, r4
 8001e38:	4628      	mov	r0, r5
 8001e3a:	f000 f8dd 	bl	8001ff8 <__swbuf_r>
 8001e3e:	3001      	adds	r0, #1
 8001e40:	d1bf      	bne.n	8001dc2 <_puts_r+0x42>
 8001e42:	e7df      	b.n	8001e04 <_puts_r+0x84>
 8001e44:	250a      	movs	r5, #10
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	6022      	str	r2, [r4, #0]
 8001e4c:	701d      	strb	r5, [r3, #0]
 8001e4e:	e7db      	b.n	8001e08 <_puts_r+0x88>
 8001e50:	08003094 	.word	0x08003094
 8001e54:	080030b4 	.word	0x080030b4
 8001e58:	08003074 	.word	0x08003074

08001e5c <puts>:
 8001e5c:	4b02      	ldr	r3, [pc, #8]	; (8001e68 <puts+0xc>)
 8001e5e:	4601      	mov	r1, r0
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	f7ff bf8d 	b.w	8001d80 <_puts_r>
 8001e66:	bf00      	nop
 8001e68:	2000000c 	.word	0x2000000c

08001e6c <setvbuf>:
 8001e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e70:	461d      	mov	r5, r3
 8001e72:	4b5d      	ldr	r3, [pc, #372]	; (8001fe8 <setvbuf+0x17c>)
 8001e74:	4604      	mov	r4, r0
 8001e76:	681f      	ldr	r7, [r3, #0]
 8001e78:	460e      	mov	r6, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	b127      	cbz	r7, 8001e88 <setvbuf+0x1c>
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	b913      	cbnz	r3, 8001e88 <setvbuf+0x1c>
 8001e82:	4638      	mov	r0, r7
 8001e84:	f000 fa8e 	bl	80023a4 <__sinit>
 8001e88:	4b58      	ldr	r3, [pc, #352]	; (8001fec <setvbuf+0x180>)
 8001e8a:	429c      	cmp	r4, r3
 8001e8c:	d167      	bne.n	8001f5e <setvbuf+0xf2>
 8001e8e:	687c      	ldr	r4, [r7, #4]
 8001e90:	f1b8 0f02 	cmp.w	r8, #2
 8001e94:	d006      	beq.n	8001ea4 <setvbuf+0x38>
 8001e96:	f1b8 0f01 	cmp.w	r8, #1
 8001e9a:	f200 809f 	bhi.w	8001fdc <setvbuf+0x170>
 8001e9e:	2d00      	cmp	r5, #0
 8001ea0:	f2c0 809c 	blt.w	8001fdc <setvbuf+0x170>
 8001ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ea6:	07db      	lsls	r3, r3, #31
 8001ea8:	d405      	bmi.n	8001eb6 <setvbuf+0x4a>
 8001eaa:	89a3      	ldrh	r3, [r4, #12]
 8001eac:	0598      	lsls	r0, r3, #22
 8001eae:	d402      	bmi.n	8001eb6 <setvbuf+0x4a>
 8001eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eb2:	f000 fb15 	bl	80024e0 <__retarget_lock_acquire_recursive>
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	4638      	mov	r0, r7
 8001eba:	f000 f9df 	bl	800227c <_fflush_r>
 8001ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ec0:	b141      	cbz	r1, 8001ed4 <setvbuf+0x68>
 8001ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d002      	beq.n	8001ed0 <setvbuf+0x64>
 8001eca:	4638      	mov	r0, r7
 8001ecc:	f000 fb78 	bl	80025c0 <_free_r>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61a3      	str	r3, [r4, #24]
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	0619      	lsls	r1, r3, #24
 8001ede:	d503      	bpl.n	8001ee8 <setvbuf+0x7c>
 8001ee0:	4638      	mov	r0, r7
 8001ee2:	6921      	ldr	r1, [r4, #16]
 8001ee4:	f000 fb6c 	bl	80025c0 <_free_r>
 8001ee8:	89a3      	ldrh	r3, [r4, #12]
 8001eea:	f1b8 0f02 	cmp.w	r8, #2
 8001eee:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	81a3      	strh	r3, [r4, #12]
 8001ef8:	d06c      	beq.n	8001fd4 <setvbuf+0x168>
 8001efa:	ab01      	add	r3, sp, #4
 8001efc:	466a      	mov	r2, sp
 8001efe:	4621      	mov	r1, r4
 8001f00:	4638      	mov	r0, r7
 8001f02:	f000 faef 	bl	80024e4 <__swhatbuf_r>
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	4318      	orrs	r0, r3
 8001f0a:	81a0      	strh	r0, [r4, #12]
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d130      	bne.n	8001f72 <setvbuf+0x106>
 8001f10:	9d00      	ldr	r5, [sp, #0]
 8001f12:	4628      	mov	r0, r5
 8001f14:	f000 fb4c 	bl	80025b0 <malloc>
 8001f18:	4606      	mov	r6, r0
 8001f1a:	2800      	cmp	r0, #0
 8001f1c:	d155      	bne.n	8001fca <setvbuf+0x15e>
 8001f1e:	f8dd 9000 	ldr.w	r9, [sp]
 8001f22:	45a9      	cmp	r9, r5
 8001f24:	d14a      	bne.n	8001fbc <setvbuf+0x150>
 8001f26:	f04f 35ff 	mov.w	r5, #4294967295
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60a2      	str	r2, [r4, #8]
 8001f2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001f32:	6022      	str	r2, [r4, #0]
 8001f34:	6122      	str	r2, [r4, #16]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f3c:	6162      	str	r2, [r4, #20]
 8001f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	07d2      	lsls	r2, r2, #31
 8001f46:	81a3      	strh	r3, [r4, #12]
 8001f48:	d405      	bmi.n	8001f56 <setvbuf+0xea>
 8001f4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001f4e:	d102      	bne.n	8001f56 <setvbuf+0xea>
 8001f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f52:	f000 fac6 	bl	80024e2 <__retarget_lock_release_recursive>
 8001f56:	4628      	mov	r0, r5
 8001f58:	b003      	add	sp, #12
 8001f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <setvbuf+0x184>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d101      	bne.n	8001f68 <setvbuf+0xfc>
 8001f64:	68bc      	ldr	r4, [r7, #8]
 8001f66:	e793      	b.n	8001e90 <setvbuf+0x24>
 8001f68:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <setvbuf+0x188>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	bf08      	it	eq
 8001f6e:	68fc      	ldreq	r4, [r7, #12]
 8001f70:	e78e      	b.n	8001e90 <setvbuf+0x24>
 8001f72:	2e00      	cmp	r6, #0
 8001f74:	d0cd      	beq.n	8001f12 <setvbuf+0xa6>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	b913      	cbnz	r3, 8001f80 <setvbuf+0x114>
 8001f7a:	4638      	mov	r0, r7
 8001f7c:	f000 fa12 	bl	80023a4 <__sinit>
 8001f80:	f1b8 0f01 	cmp.w	r8, #1
 8001f84:	bf08      	it	eq
 8001f86:	89a3      	ldrheq	r3, [r4, #12]
 8001f88:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001f8c:	bf04      	itt	eq
 8001f8e:	f043 0301 	orreq.w	r3, r3, #1
 8001f92:	81a3      	strheq	r3, [r4, #12]
 8001f94:	89a2      	ldrh	r2, [r4, #12]
 8001f96:	6026      	str	r6, [r4, #0]
 8001f98:	f012 0308 	ands.w	r3, r2, #8
 8001f9c:	d01c      	beq.n	8001fd8 <setvbuf+0x16c>
 8001f9e:	07d3      	lsls	r3, r2, #31
 8001fa0:	bf41      	itttt	mi
 8001fa2:	2300      	movmi	r3, #0
 8001fa4:	426d      	negmi	r5, r5
 8001fa6:	60a3      	strmi	r3, [r4, #8]
 8001fa8:	61a5      	strmi	r5, [r4, #24]
 8001faa:	bf58      	it	pl
 8001fac:	60a5      	strpl	r5, [r4, #8]
 8001fae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001fb0:	f015 0501 	ands.w	r5, r5, #1
 8001fb4:	d115      	bne.n	8001fe2 <setvbuf+0x176>
 8001fb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001fba:	e7c8      	b.n	8001f4e <setvbuf+0xe2>
 8001fbc:	4648      	mov	r0, r9
 8001fbe:	f000 faf7 	bl	80025b0 <malloc>
 8001fc2:	4606      	mov	r6, r0
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d0ae      	beq.n	8001f26 <setvbuf+0xba>
 8001fc8:	464d      	mov	r5, r9
 8001fca:	89a3      	ldrh	r3, [r4, #12]
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	e7d0      	b.n	8001f76 <setvbuf+0x10a>
 8001fd4:	2500      	movs	r5, #0
 8001fd6:	e7a8      	b.n	8001f2a <setvbuf+0xbe>
 8001fd8:	60a3      	str	r3, [r4, #8]
 8001fda:	e7e8      	b.n	8001fae <setvbuf+0x142>
 8001fdc:	f04f 35ff 	mov.w	r5, #4294967295
 8001fe0:	e7b9      	b.n	8001f56 <setvbuf+0xea>
 8001fe2:	2500      	movs	r5, #0
 8001fe4:	e7b7      	b.n	8001f56 <setvbuf+0xea>
 8001fe6:	bf00      	nop
 8001fe8:	2000000c 	.word	0x2000000c
 8001fec:	08003094 	.word	0x08003094
 8001ff0:	080030b4 	.word	0x080030b4
 8001ff4:	08003074 	.word	0x08003074

08001ff8 <__swbuf_r>:
 8001ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ffa:	460e      	mov	r6, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	4605      	mov	r5, r0
 8002000:	b118      	cbz	r0, 800200a <__swbuf_r+0x12>
 8002002:	6983      	ldr	r3, [r0, #24]
 8002004:	b90b      	cbnz	r3, 800200a <__swbuf_r+0x12>
 8002006:	f000 f9cd 	bl	80023a4 <__sinit>
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <__swbuf_r+0x98>)
 800200c:	429c      	cmp	r4, r3
 800200e:	d12b      	bne.n	8002068 <__swbuf_r+0x70>
 8002010:	686c      	ldr	r4, [r5, #4]
 8002012:	69a3      	ldr	r3, [r4, #24]
 8002014:	60a3      	str	r3, [r4, #8]
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	071a      	lsls	r2, r3, #28
 800201a:	d52f      	bpl.n	800207c <__swbuf_r+0x84>
 800201c:	6923      	ldr	r3, [r4, #16]
 800201e:	b36b      	cbz	r3, 800207c <__swbuf_r+0x84>
 8002020:	6923      	ldr	r3, [r4, #16]
 8002022:	6820      	ldr	r0, [r4, #0]
 8002024:	b2f6      	uxtb	r6, r6
 8002026:	1ac0      	subs	r0, r0, r3
 8002028:	6963      	ldr	r3, [r4, #20]
 800202a:	4637      	mov	r7, r6
 800202c:	4283      	cmp	r3, r0
 800202e:	dc04      	bgt.n	800203a <__swbuf_r+0x42>
 8002030:	4621      	mov	r1, r4
 8002032:	4628      	mov	r0, r5
 8002034:	f000 f922 	bl	800227c <_fflush_r>
 8002038:	bb30      	cbnz	r0, 8002088 <__swbuf_r+0x90>
 800203a:	68a3      	ldr	r3, [r4, #8]
 800203c:	3001      	adds	r0, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	60a3      	str	r3, [r4, #8]
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	6022      	str	r2, [r4, #0]
 8002048:	701e      	strb	r6, [r3, #0]
 800204a:	6963      	ldr	r3, [r4, #20]
 800204c:	4283      	cmp	r3, r0
 800204e:	d004      	beq.n	800205a <__swbuf_r+0x62>
 8002050:	89a3      	ldrh	r3, [r4, #12]
 8002052:	07db      	lsls	r3, r3, #31
 8002054:	d506      	bpl.n	8002064 <__swbuf_r+0x6c>
 8002056:	2e0a      	cmp	r6, #10
 8002058:	d104      	bne.n	8002064 <__swbuf_r+0x6c>
 800205a:	4621      	mov	r1, r4
 800205c:	4628      	mov	r0, r5
 800205e:	f000 f90d 	bl	800227c <_fflush_r>
 8002062:	b988      	cbnz	r0, 8002088 <__swbuf_r+0x90>
 8002064:	4638      	mov	r0, r7
 8002066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <__swbuf_r+0x9c>)
 800206a:	429c      	cmp	r4, r3
 800206c:	d101      	bne.n	8002072 <__swbuf_r+0x7a>
 800206e:	68ac      	ldr	r4, [r5, #8]
 8002070:	e7cf      	b.n	8002012 <__swbuf_r+0x1a>
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <__swbuf_r+0xa0>)
 8002074:	429c      	cmp	r4, r3
 8002076:	bf08      	it	eq
 8002078:	68ec      	ldreq	r4, [r5, #12]
 800207a:	e7ca      	b.n	8002012 <__swbuf_r+0x1a>
 800207c:	4621      	mov	r1, r4
 800207e:	4628      	mov	r0, r5
 8002080:	f000 f80c 	bl	800209c <__swsetup_r>
 8002084:	2800      	cmp	r0, #0
 8002086:	d0cb      	beq.n	8002020 <__swbuf_r+0x28>
 8002088:	f04f 37ff 	mov.w	r7, #4294967295
 800208c:	e7ea      	b.n	8002064 <__swbuf_r+0x6c>
 800208e:	bf00      	nop
 8002090:	08003094 	.word	0x08003094
 8002094:	080030b4 	.word	0x080030b4
 8002098:	08003074 	.word	0x08003074

0800209c <__swsetup_r>:
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <__swsetup_r+0xcc>)
 800209e:	b570      	push	{r4, r5, r6, lr}
 80020a0:	681d      	ldr	r5, [r3, #0]
 80020a2:	4606      	mov	r6, r0
 80020a4:	460c      	mov	r4, r1
 80020a6:	b125      	cbz	r5, 80020b2 <__swsetup_r+0x16>
 80020a8:	69ab      	ldr	r3, [r5, #24]
 80020aa:	b913      	cbnz	r3, 80020b2 <__swsetup_r+0x16>
 80020ac:	4628      	mov	r0, r5
 80020ae:	f000 f979 	bl	80023a4 <__sinit>
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <__swsetup_r+0xd0>)
 80020b4:	429c      	cmp	r4, r3
 80020b6:	d10f      	bne.n	80020d8 <__swsetup_r+0x3c>
 80020b8:	686c      	ldr	r4, [r5, #4]
 80020ba:	89a3      	ldrh	r3, [r4, #12]
 80020bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80020c0:	0719      	lsls	r1, r3, #28
 80020c2:	d42c      	bmi.n	800211e <__swsetup_r+0x82>
 80020c4:	06dd      	lsls	r5, r3, #27
 80020c6:	d411      	bmi.n	80020ec <__swsetup_r+0x50>
 80020c8:	2309      	movs	r3, #9
 80020ca:	6033      	str	r3, [r6, #0]
 80020cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	81a3      	strh	r3, [r4, #12]
 80020d6:	e03e      	b.n	8002156 <__swsetup_r+0xba>
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <__swsetup_r+0xd4>)
 80020da:	429c      	cmp	r4, r3
 80020dc:	d101      	bne.n	80020e2 <__swsetup_r+0x46>
 80020de:	68ac      	ldr	r4, [r5, #8]
 80020e0:	e7eb      	b.n	80020ba <__swsetup_r+0x1e>
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <__swsetup_r+0xd8>)
 80020e4:	429c      	cmp	r4, r3
 80020e6:	bf08      	it	eq
 80020e8:	68ec      	ldreq	r4, [r5, #12]
 80020ea:	e7e6      	b.n	80020ba <__swsetup_r+0x1e>
 80020ec:	0758      	lsls	r0, r3, #29
 80020ee:	d512      	bpl.n	8002116 <__swsetup_r+0x7a>
 80020f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f2:	b141      	cbz	r1, 8002106 <__swsetup_r+0x6a>
 80020f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020f8:	4299      	cmp	r1, r3
 80020fa:	d002      	beq.n	8002102 <__swsetup_r+0x66>
 80020fc:	4630      	mov	r0, r6
 80020fe:	f000 fa5f 	bl	80025c0 <_free_r>
 8002102:	2300      	movs	r3, #0
 8002104:	6363      	str	r3, [r4, #52]	; 0x34
 8002106:	89a3      	ldrh	r3, [r4, #12]
 8002108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800210c:	81a3      	strh	r3, [r4, #12]
 800210e:	2300      	movs	r3, #0
 8002110:	6063      	str	r3, [r4, #4]
 8002112:	6923      	ldr	r3, [r4, #16]
 8002114:	6023      	str	r3, [r4, #0]
 8002116:	89a3      	ldrh	r3, [r4, #12]
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	81a3      	strh	r3, [r4, #12]
 800211e:	6923      	ldr	r3, [r4, #16]
 8002120:	b94b      	cbnz	r3, 8002136 <__swsetup_r+0x9a>
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212c:	d003      	beq.n	8002136 <__swsetup_r+0x9a>
 800212e:	4621      	mov	r1, r4
 8002130:	4630      	mov	r0, r6
 8002132:	f000 f9fd 	bl	8002530 <__smakebuf_r>
 8002136:	89a0      	ldrh	r0, [r4, #12]
 8002138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800213c:	f010 0301 	ands.w	r3, r0, #1
 8002140:	d00a      	beq.n	8002158 <__swsetup_r+0xbc>
 8002142:	2300      	movs	r3, #0
 8002144:	60a3      	str	r3, [r4, #8]
 8002146:	6963      	ldr	r3, [r4, #20]
 8002148:	425b      	negs	r3, r3
 800214a:	61a3      	str	r3, [r4, #24]
 800214c:	6923      	ldr	r3, [r4, #16]
 800214e:	b943      	cbnz	r3, 8002162 <__swsetup_r+0xc6>
 8002150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002154:	d1ba      	bne.n	80020cc <__swsetup_r+0x30>
 8002156:	bd70      	pop	{r4, r5, r6, pc}
 8002158:	0781      	lsls	r1, r0, #30
 800215a:	bf58      	it	pl
 800215c:	6963      	ldrpl	r3, [r4, #20]
 800215e:	60a3      	str	r3, [r4, #8]
 8002160:	e7f4      	b.n	800214c <__swsetup_r+0xb0>
 8002162:	2000      	movs	r0, #0
 8002164:	e7f7      	b.n	8002156 <__swsetup_r+0xba>
 8002166:	bf00      	nop
 8002168:	2000000c 	.word	0x2000000c
 800216c:	08003094 	.word	0x08003094
 8002170:	080030b4 	.word	0x080030b4
 8002174:	08003074 	.word	0x08003074

08002178 <__sflush_r>:
 8002178:	898a      	ldrh	r2, [r1, #12]
 800217a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217c:	4605      	mov	r5, r0
 800217e:	0710      	lsls	r0, r2, #28
 8002180:	460c      	mov	r4, r1
 8002182:	d457      	bmi.n	8002234 <__sflush_r+0xbc>
 8002184:	684b      	ldr	r3, [r1, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	dc04      	bgt.n	8002194 <__sflush_r+0x1c>
 800218a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	dc01      	bgt.n	8002194 <__sflush_r+0x1c>
 8002190:	2000      	movs	r0, #0
 8002192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002196:	2e00      	cmp	r6, #0
 8002198:	d0fa      	beq.n	8002190 <__sflush_r+0x18>
 800219a:	2300      	movs	r3, #0
 800219c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80021a0:	682f      	ldr	r7, [r5, #0]
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	d032      	beq.n	800220c <__sflush_r+0x94>
 80021a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	075a      	lsls	r2, r3, #29
 80021ac:	d505      	bpl.n	80021ba <__sflush_r+0x42>
 80021ae:	6863      	ldr	r3, [r4, #4]
 80021b0:	1ac0      	subs	r0, r0, r3
 80021b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021b4:	b10b      	cbz	r3, 80021ba <__sflush_r+0x42>
 80021b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021b8:	1ac0      	subs	r0, r0, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	4602      	mov	r2, r0
 80021be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021c0:	4628      	mov	r0, r5
 80021c2:	6a21      	ldr	r1, [r4, #32]
 80021c4:	47b0      	blx	r6
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	d106      	bne.n	80021da <__sflush_r+0x62>
 80021cc:	6829      	ldr	r1, [r5, #0]
 80021ce:	291d      	cmp	r1, #29
 80021d0:	d82c      	bhi.n	800222c <__sflush_r+0xb4>
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <__sflush_r+0x100>)
 80021d4:	40ca      	lsrs	r2, r1
 80021d6:	07d6      	lsls	r6, r2, #31
 80021d8:	d528      	bpl.n	800222c <__sflush_r+0xb4>
 80021da:	2200      	movs	r2, #0
 80021dc:	6062      	str	r2, [r4, #4]
 80021de:	6922      	ldr	r2, [r4, #16]
 80021e0:	04d9      	lsls	r1, r3, #19
 80021e2:	6022      	str	r2, [r4, #0]
 80021e4:	d504      	bpl.n	80021f0 <__sflush_r+0x78>
 80021e6:	1c42      	adds	r2, r0, #1
 80021e8:	d101      	bne.n	80021ee <__sflush_r+0x76>
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	b903      	cbnz	r3, 80021f0 <__sflush_r+0x78>
 80021ee:	6560      	str	r0, [r4, #84]	; 0x54
 80021f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021f2:	602f      	str	r7, [r5, #0]
 80021f4:	2900      	cmp	r1, #0
 80021f6:	d0cb      	beq.n	8002190 <__sflush_r+0x18>
 80021f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021fc:	4299      	cmp	r1, r3
 80021fe:	d002      	beq.n	8002206 <__sflush_r+0x8e>
 8002200:	4628      	mov	r0, r5
 8002202:	f000 f9dd 	bl	80025c0 <_free_r>
 8002206:	2000      	movs	r0, #0
 8002208:	6360      	str	r0, [r4, #52]	; 0x34
 800220a:	e7c2      	b.n	8002192 <__sflush_r+0x1a>
 800220c:	6a21      	ldr	r1, [r4, #32]
 800220e:	2301      	movs	r3, #1
 8002210:	4628      	mov	r0, r5
 8002212:	47b0      	blx	r6
 8002214:	1c41      	adds	r1, r0, #1
 8002216:	d1c7      	bne.n	80021a8 <__sflush_r+0x30>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0c4      	beq.n	80021a8 <__sflush_r+0x30>
 800221e:	2b1d      	cmp	r3, #29
 8002220:	d001      	beq.n	8002226 <__sflush_r+0xae>
 8002222:	2b16      	cmp	r3, #22
 8002224:	d101      	bne.n	800222a <__sflush_r+0xb2>
 8002226:	602f      	str	r7, [r5, #0]
 8002228:	e7b2      	b.n	8002190 <__sflush_r+0x18>
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002230:	81a3      	strh	r3, [r4, #12]
 8002232:	e7ae      	b.n	8002192 <__sflush_r+0x1a>
 8002234:	690f      	ldr	r7, [r1, #16]
 8002236:	2f00      	cmp	r7, #0
 8002238:	d0aa      	beq.n	8002190 <__sflush_r+0x18>
 800223a:	0793      	lsls	r3, r2, #30
 800223c:	bf18      	it	ne
 800223e:	2300      	movne	r3, #0
 8002240:	680e      	ldr	r6, [r1, #0]
 8002242:	bf08      	it	eq
 8002244:	694b      	ldreq	r3, [r1, #20]
 8002246:	1bf6      	subs	r6, r6, r7
 8002248:	600f      	str	r7, [r1, #0]
 800224a:	608b      	str	r3, [r1, #8]
 800224c:	2e00      	cmp	r6, #0
 800224e:	dd9f      	ble.n	8002190 <__sflush_r+0x18>
 8002250:	4633      	mov	r3, r6
 8002252:	463a      	mov	r2, r7
 8002254:	4628      	mov	r0, r5
 8002256:	6a21      	ldr	r1, [r4, #32]
 8002258:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800225c:	47e0      	blx	ip
 800225e:	2800      	cmp	r0, #0
 8002260:	dc06      	bgt.n	8002270 <__sflush_r+0xf8>
 8002262:	89a3      	ldrh	r3, [r4, #12]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	e790      	b.n	8002192 <__sflush_r+0x1a>
 8002270:	4407      	add	r7, r0
 8002272:	1a36      	subs	r6, r6, r0
 8002274:	e7ea      	b.n	800224c <__sflush_r+0xd4>
 8002276:	bf00      	nop
 8002278:	20400001 	.word	0x20400001

0800227c <_fflush_r>:
 800227c:	b538      	push	{r3, r4, r5, lr}
 800227e:	690b      	ldr	r3, [r1, #16]
 8002280:	4605      	mov	r5, r0
 8002282:	460c      	mov	r4, r1
 8002284:	b913      	cbnz	r3, 800228c <_fflush_r+0x10>
 8002286:	2500      	movs	r5, #0
 8002288:	4628      	mov	r0, r5
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	b118      	cbz	r0, 8002296 <_fflush_r+0x1a>
 800228e:	6983      	ldr	r3, [r0, #24]
 8002290:	b90b      	cbnz	r3, 8002296 <_fflush_r+0x1a>
 8002292:	f000 f887 	bl	80023a4 <__sinit>
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <_fflush_r+0x6c>)
 8002298:	429c      	cmp	r4, r3
 800229a:	d11b      	bne.n	80022d4 <_fflush_r+0x58>
 800229c:	686c      	ldr	r4, [r5, #4]
 800229e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ef      	beq.n	8002286 <_fflush_r+0xa>
 80022a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80022a8:	07d0      	lsls	r0, r2, #31
 80022aa:	d404      	bmi.n	80022b6 <_fflush_r+0x3a>
 80022ac:	0599      	lsls	r1, r3, #22
 80022ae:	d402      	bmi.n	80022b6 <_fflush_r+0x3a>
 80022b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022b2:	f000 f915 	bl	80024e0 <__retarget_lock_acquire_recursive>
 80022b6:	4628      	mov	r0, r5
 80022b8:	4621      	mov	r1, r4
 80022ba:	f7ff ff5d 	bl	8002178 <__sflush_r>
 80022be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022c0:	4605      	mov	r5, r0
 80022c2:	07da      	lsls	r2, r3, #31
 80022c4:	d4e0      	bmi.n	8002288 <_fflush_r+0xc>
 80022c6:	89a3      	ldrh	r3, [r4, #12]
 80022c8:	059b      	lsls	r3, r3, #22
 80022ca:	d4dd      	bmi.n	8002288 <_fflush_r+0xc>
 80022cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022ce:	f000 f908 	bl	80024e2 <__retarget_lock_release_recursive>
 80022d2:	e7d9      	b.n	8002288 <_fflush_r+0xc>
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <_fflush_r+0x70>)
 80022d6:	429c      	cmp	r4, r3
 80022d8:	d101      	bne.n	80022de <_fflush_r+0x62>
 80022da:	68ac      	ldr	r4, [r5, #8]
 80022dc:	e7df      	b.n	800229e <_fflush_r+0x22>
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <_fflush_r+0x74>)
 80022e0:	429c      	cmp	r4, r3
 80022e2:	bf08      	it	eq
 80022e4:	68ec      	ldreq	r4, [r5, #12]
 80022e6:	e7da      	b.n	800229e <_fflush_r+0x22>
 80022e8:	08003094 	.word	0x08003094
 80022ec:	080030b4 	.word	0x080030b4
 80022f0:	08003074 	.word	0x08003074

080022f4 <std>:
 80022f4:	2300      	movs	r3, #0
 80022f6:	b510      	push	{r4, lr}
 80022f8:	4604      	mov	r4, r0
 80022fa:	e9c0 3300 	strd	r3, r3, [r0]
 80022fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002302:	6083      	str	r3, [r0, #8]
 8002304:	8181      	strh	r1, [r0, #12]
 8002306:	6643      	str	r3, [r0, #100]	; 0x64
 8002308:	81c2      	strh	r2, [r0, #14]
 800230a:	6183      	str	r3, [r0, #24]
 800230c:	4619      	mov	r1, r3
 800230e:	2208      	movs	r2, #8
 8002310:	305c      	adds	r0, #92	; 0x5c
 8002312:	f7ff fd15 	bl	8001d40 <memset>
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <std+0x38>)
 8002318:	6224      	str	r4, [r4, #32]
 800231a:	6263      	str	r3, [r4, #36]	; 0x24
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <std+0x3c>)
 800231e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <std+0x40>)
 8002322:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <std+0x44>)
 8002326:	6323      	str	r3, [r4, #48]	; 0x30
 8002328:	bd10      	pop	{r4, pc}
 800232a:	bf00      	nop
 800232c:	08002d75 	.word	0x08002d75
 8002330:	08002d97 	.word	0x08002d97
 8002334:	08002dcf 	.word	0x08002dcf
 8002338:	08002df3 	.word	0x08002df3

0800233c <_cleanup_r>:
 800233c:	4901      	ldr	r1, [pc, #4]	; (8002344 <_cleanup_r+0x8>)
 800233e:	f000 b8af 	b.w	80024a0 <_fwalk_reent>
 8002342:	bf00      	nop
 8002344:	0800227d 	.word	0x0800227d

08002348 <__sfmoreglue>:
 8002348:	2268      	movs	r2, #104	; 0x68
 800234a:	b570      	push	{r4, r5, r6, lr}
 800234c:	1e4d      	subs	r5, r1, #1
 800234e:	4355      	muls	r5, r2
 8002350:	460e      	mov	r6, r1
 8002352:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002356:	f000 f99b 	bl	8002690 <_malloc_r>
 800235a:	4604      	mov	r4, r0
 800235c:	b140      	cbz	r0, 8002370 <__sfmoreglue+0x28>
 800235e:	2100      	movs	r1, #0
 8002360:	e9c0 1600 	strd	r1, r6, [r0]
 8002364:	300c      	adds	r0, #12
 8002366:	60a0      	str	r0, [r4, #8]
 8002368:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800236c:	f7ff fce8 	bl	8001d40 <memset>
 8002370:	4620      	mov	r0, r4
 8002372:	bd70      	pop	{r4, r5, r6, pc}

08002374 <__sfp_lock_acquire>:
 8002374:	4801      	ldr	r0, [pc, #4]	; (800237c <__sfp_lock_acquire+0x8>)
 8002376:	f000 b8b3 	b.w	80024e0 <__retarget_lock_acquire_recursive>
 800237a:	bf00      	nop
 800237c:	200000fd 	.word	0x200000fd

08002380 <__sfp_lock_release>:
 8002380:	4801      	ldr	r0, [pc, #4]	; (8002388 <__sfp_lock_release+0x8>)
 8002382:	f000 b8ae 	b.w	80024e2 <__retarget_lock_release_recursive>
 8002386:	bf00      	nop
 8002388:	200000fd 	.word	0x200000fd

0800238c <__sinit_lock_acquire>:
 800238c:	4801      	ldr	r0, [pc, #4]	; (8002394 <__sinit_lock_acquire+0x8>)
 800238e:	f000 b8a7 	b.w	80024e0 <__retarget_lock_acquire_recursive>
 8002392:	bf00      	nop
 8002394:	200000fe 	.word	0x200000fe

08002398 <__sinit_lock_release>:
 8002398:	4801      	ldr	r0, [pc, #4]	; (80023a0 <__sinit_lock_release+0x8>)
 800239a:	f000 b8a2 	b.w	80024e2 <__retarget_lock_release_recursive>
 800239e:	bf00      	nop
 80023a0:	200000fe 	.word	0x200000fe

080023a4 <__sinit>:
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	f7ff fff0 	bl	800238c <__sinit_lock_acquire>
 80023ac:	69a3      	ldr	r3, [r4, #24]
 80023ae:	b11b      	cbz	r3, 80023b8 <__sinit+0x14>
 80023b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b4:	f7ff bff0 	b.w	8002398 <__sinit_lock_release>
 80023b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80023bc:	6523      	str	r3, [r4, #80]	; 0x50
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <__sinit+0x68>)
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <__sinit+0x6c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80023c6:	42a3      	cmp	r3, r4
 80023c8:	bf08      	it	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	4620      	mov	r0, r4
 80023ce:	bf08      	it	eq
 80023d0:	61a3      	streq	r3, [r4, #24]
 80023d2:	f000 f81f 	bl	8002414 <__sfp>
 80023d6:	6060      	str	r0, [r4, #4]
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f81b 	bl	8002414 <__sfp>
 80023de:	60a0      	str	r0, [r4, #8]
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 f817 	bl	8002414 <__sfp>
 80023e6:	2200      	movs	r2, #0
 80023e8:	2104      	movs	r1, #4
 80023ea:	60e0      	str	r0, [r4, #12]
 80023ec:	6860      	ldr	r0, [r4, #4]
 80023ee:	f7ff ff81 	bl	80022f4 <std>
 80023f2:	2201      	movs	r2, #1
 80023f4:	2109      	movs	r1, #9
 80023f6:	68a0      	ldr	r0, [r4, #8]
 80023f8:	f7ff ff7c 	bl	80022f4 <std>
 80023fc:	2202      	movs	r2, #2
 80023fe:	2112      	movs	r1, #18
 8002400:	68e0      	ldr	r0, [r4, #12]
 8002402:	f7ff ff77 	bl	80022f4 <std>
 8002406:	2301      	movs	r3, #1
 8002408:	61a3      	str	r3, [r4, #24]
 800240a:	e7d1      	b.n	80023b0 <__sinit+0xc>
 800240c:	08003070 	.word	0x08003070
 8002410:	0800233d 	.word	0x0800233d

08002414 <__sfp>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	4607      	mov	r7, r0
 8002418:	f7ff ffac 	bl	8002374 <__sfp_lock_acquire>
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <__sfp+0x84>)
 800241e:	681e      	ldr	r6, [r3, #0]
 8002420:	69b3      	ldr	r3, [r6, #24]
 8002422:	b913      	cbnz	r3, 800242a <__sfp+0x16>
 8002424:	4630      	mov	r0, r6
 8002426:	f7ff ffbd 	bl	80023a4 <__sinit>
 800242a:	3648      	adds	r6, #72	; 0x48
 800242c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002430:	3b01      	subs	r3, #1
 8002432:	d503      	bpl.n	800243c <__sfp+0x28>
 8002434:	6833      	ldr	r3, [r6, #0]
 8002436:	b30b      	cbz	r3, 800247c <__sfp+0x68>
 8002438:	6836      	ldr	r6, [r6, #0]
 800243a:	e7f7      	b.n	800242c <__sfp+0x18>
 800243c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002440:	b9d5      	cbnz	r5, 8002478 <__sfp+0x64>
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <__sfp+0x88>)
 8002444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002448:	60e3      	str	r3, [r4, #12]
 800244a:	6665      	str	r5, [r4, #100]	; 0x64
 800244c:	f000 f847 	bl	80024de <__retarget_lock_init_recursive>
 8002450:	f7ff ff96 	bl	8002380 <__sfp_lock_release>
 8002454:	2208      	movs	r2, #8
 8002456:	4629      	mov	r1, r5
 8002458:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800245c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002460:	6025      	str	r5, [r4, #0]
 8002462:	61a5      	str	r5, [r4, #24]
 8002464:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002468:	f7ff fc6a 	bl	8001d40 <memset>
 800246c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002470:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002474:	4620      	mov	r0, r4
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002478:	3468      	adds	r4, #104	; 0x68
 800247a:	e7d9      	b.n	8002430 <__sfp+0x1c>
 800247c:	2104      	movs	r1, #4
 800247e:	4638      	mov	r0, r7
 8002480:	f7ff ff62 	bl	8002348 <__sfmoreglue>
 8002484:	4604      	mov	r4, r0
 8002486:	6030      	str	r0, [r6, #0]
 8002488:	2800      	cmp	r0, #0
 800248a:	d1d5      	bne.n	8002438 <__sfp+0x24>
 800248c:	f7ff ff78 	bl	8002380 <__sfp_lock_release>
 8002490:	230c      	movs	r3, #12
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	e7ee      	b.n	8002474 <__sfp+0x60>
 8002496:	bf00      	nop
 8002498:	08003070 	.word	0x08003070
 800249c:	ffff0001 	.word	0xffff0001

080024a0 <_fwalk_reent>:
 80024a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024a4:	4606      	mov	r6, r0
 80024a6:	4688      	mov	r8, r1
 80024a8:	2700      	movs	r7, #0
 80024aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80024ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024b2:	f1b9 0901 	subs.w	r9, r9, #1
 80024b6:	d505      	bpl.n	80024c4 <_fwalk_reent+0x24>
 80024b8:	6824      	ldr	r4, [r4, #0]
 80024ba:	2c00      	cmp	r4, #0
 80024bc:	d1f7      	bne.n	80024ae <_fwalk_reent+0xe>
 80024be:	4638      	mov	r0, r7
 80024c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024c4:	89ab      	ldrh	r3, [r5, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d907      	bls.n	80024da <_fwalk_reent+0x3a>
 80024ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024ce:	3301      	adds	r3, #1
 80024d0:	d003      	beq.n	80024da <_fwalk_reent+0x3a>
 80024d2:	4629      	mov	r1, r5
 80024d4:	4630      	mov	r0, r6
 80024d6:	47c0      	blx	r8
 80024d8:	4307      	orrs	r7, r0
 80024da:	3568      	adds	r5, #104	; 0x68
 80024dc:	e7e9      	b.n	80024b2 <_fwalk_reent+0x12>

080024de <__retarget_lock_init_recursive>:
 80024de:	4770      	bx	lr

080024e0 <__retarget_lock_acquire_recursive>:
 80024e0:	4770      	bx	lr

080024e2 <__retarget_lock_release_recursive>:
 80024e2:	4770      	bx	lr

080024e4 <__swhatbuf_r>:
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	460e      	mov	r6, r1
 80024e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ec:	4614      	mov	r4, r2
 80024ee:	2900      	cmp	r1, #0
 80024f0:	461d      	mov	r5, r3
 80024f2:	b096      	sub	sp, #88	; 0x58
 80024f4:	da08      	bge.n	8002508 <__swhatbuf_r+0x24>
 80024f6:	2200      	movs	r2, #0
 80024f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80024fc:	602a      	str	r2, [r5, #0]
 80024fe:	061a      	lsls	r2, r3, #24
 8002500:	d410      	bmi.n	8002524 <__swhatbuf_r+0x40>
 8002502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002506:	e00e      	b.n	8002526 <__swhatbuf_r+0x42>
 8002508:	466a      	mov	r2, sp
 800250a:	f000 fc99 	bl	8002e40 <_fstat_r>
 800250e:	2800      	cmp	r0, #0
 8002510:	dbf1      	blt.n	80024f6 <__swhatbuf_r+0x12>
 8002512:	9a01      	ldr	r2, [sp, #4]
 8002514:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002518:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800251c:	425a      	negs	r2, r3
 800251e:	415a      	adcs	r2, r3
 8002520:	602a      	str	r2, [r5, #0]
 8002522:	e7ee      	b.n	8002502 <__swhatbuf_r+0x1e>
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	2000      	movs	r0, #0
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	b016      	add	sp, #88	; 0x58
 800252c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002530 <__smakebuf_r>:
 8002530:	898b      	ldrh	r3, [r1, #12]
 8002532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002534:	079d      	lsls	r5, r3, #30
 8002536:	4606      	mov	r6, r0
 8002538:	460c      	mov	r4, r1
 800253a:	d507      	bpl.n	800254c <__smakebuf_r+0x1c>
 800253c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002540:	6023      	str	r3, [r4, #0]
 8002542:	6123      	str	r3, [r4, #16]
 8002544:	2301      	movs	r3, #1
 8002546:	6163      	str	r3, [r4, #20]
 8002548:	b002      	add	sp, #8
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	466a      	mov	r2, sp
 800254e:	ab01      	add	r3, sp, #4
 8002550:	f7ff ffc8 	bl	80024e4 <__swhatbuf_r>
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	4605      	mov	r5, r0
 8002558:	4630      	mov	r0, r6
 800255a:	f000 f899 	bl	8002690 <_malloc_r>
 800255e:	b948      	cbnz	r0, 8002574 <__smakebuf_r+0x44>
 8002560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002564:	059a      	lsls	r2, r3, #22
 8002566:	d4ef      	bmi.n	8002548 <__smakebuf_r+0x18>
 8002568:	f023 0303 	bic.w	r3, r3, #3
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	81a3      	strh	r3, [r4, #12]
 8002572:	e7e3      	b.n	800253c <__smakebuf_r+0xc>
 8002574:	4b0d      	ldr	r3, [pc, #52]	; (80025ac <__smakebuf_r+0x7c>)
 8002576:	62b3      	str	r3, [r6, #40]	; 0x28
 8002578:	89a3      	ldrh	r3, [r4, #12]
 800257a:	6020      	str	r0, [r4, #0]
 800257c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002580:	81a3      	strh	r3, [r4, #12]
 8002582:	9b00      	ldr	r3, [sp, #0]
 8002584:	6120      	str	r0, [r4, #16]
 8002586:	6163      	str	r3, [r4, #20]
 8002588:	9b01      	ldr	r3, [sp, #4]
 800258a:	b15b      	cbz	r3, 80025a4 <__smakebuf_r+0x74>
 800258c:	4630      	mov	r0, r6
 800258e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002592:	f000 fc67 	bl	8002e64 <_isatty_r>
 8002596:	b128      	cbz	r0, 80025a4 <__smakebuf_r+0x74>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	f023 0303 	bic.w	r3, r3, #3
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	81a3      	strh	r3, [r4, #12]
 80025a4:	89a0      	ldrh	r0, [r4, #12]
 80025a6:	4305      	orrs	r5, r0
 80025a8:	81a5      	strh	r5, [r4, #12]
 80025aa:	e7cd      	b.n	8002548 <__smakebuf_r+0x18>
 80025ac:	0800233d 	.word	0x0800233d

080025b0 <malloc>:
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <malloc+0xc>)
 80025b2:	4601      	mov	r1, r0
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f000 b86b 	b.w	8002690 <_malloc_r>
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c

080025c0 <_free_r>:
 80025c0:	b538      	push	{r3, r4, r5, lr}
 80025c2:	4605      	mov	r5, r0
 80025c4:	2900      	cmp	r1, #0
 80025c6:	d040      	beq.n	800264a <_free_r+0x8a>
 80025c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025cc:	1f0c      	subs	r4, r1, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bfb8      	it	lt
 80025d2:	18e4      	addlt	r4, r4, r3
 80025d4:	f000 fc76 	bl	8002ec4 <__malloc_lock>
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <_free_r+0x8c>)
 80025da:	6813      	ldr	r3, [r2, #0]
 80025dc:	b933      	cbnz	r3, 80025ec <_free_r+0x2c>
 80025de:	6063      	str	r3, [r4, #4]
 80025e0:	6014      	str	r4, [r2, #0]
 80025e2:	4628      	mov	r0, r5
 80025e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025e8:	f000 bc72 	b.w	8002ed0 <__malloc_unlock>
 80025ec:	42a3      	cmp	r3, r4
 80025ee:	d908      	bls.n	8002602 <_free_r+0x42>
 80025f0:	6820      	ldr	r0, [r4, #0]
 80025f2:	1821      	adds	r1, r4, r0
 80025f4:	428b      	cmp	r3, r1
 80025f6:	bf01      	itttt	eq
 80025f8:	6819      	ldreq	r1, [r3, #0]
 80025fa:	685b      	ldreq	r3, [r3, #4]
 80025fc:	1809      	addeq	r1, r1, r0
 80025fe:	6021      	streq	r1, [r4, #0]
 8002600:	e7ed      	b.n	80025de <_free_r+0x1e>
 8002602:	461a      	mov	r2, r3
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b10b      	cbz	r3, 800260c <_free_r+0x4c>
 8002608:	42a3      	cmp	r3, r4
 800260a:	d9fa      	bls.n	8002602 <_free_r+0x42>
 800260c:	6811      	ldr	r1, [r2, #0]
 800260e:	1850      	adds	r0, r2, r1
 8002610:	42a0      	cmp	r0, r4
 8002612:	d10b      	bne.n	800262c <_free_r+0x6c>
 8002614:	6820      	ldr	r0, [r4, #0]
 8002616:	4401      	add	r1, r0
 8002618:	1850      	adds	r0, r2, r1
 800261a:	4283      	cmp	r3, r0
 800261c:	6011      	str	r1, [r2, #0]
 800261e:	d1e0      	bne.n	80025e2 <_free_r+0x22>
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4401      	add	r1, r0
 8002626:	6011      	str	r1, [r2, #0]
 8002628:	6053      	str	r3, [r2, #4]
 800262a:	e7da      	b.n	80025e2 <_free_r+0x22>
 800262c:	d902      	bls.n	8002634 <_free_r+0x74>
 800262e:	230c      	movs	r3, #12
 8002630:	602b      	str	r3, [r5, #0]
 8002632:	e7d6      	b.n	80025e2 <_free_r+0x22>
 8002634:	6820      	ldr	r0, [r4, #0]
 8002636:	1821      	adds	r1, r4, r0
 8002638:	428b      	cmp	r3, r1
 800263a:	bf01      	itttt	eq
 800263c:	6819      	ldreq	r1, [r3, #0]
 800263e:	685b      	ldreq	r3, [r3, #4]
 8002640:	1809      	addeq	r1, r1, r0
 8002642:	6021      	streq	r1, [r4, #0]
 8002644:	6063      	str	r3, [r4, #4]
 8002646:	6054      	str	r4, [r2, #4]
 8002648:	e7cb      	b.n	80025e2 <_free_r+0x22>
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	20000100 	.word	0x20000100

08002650 <sbrk_aligned>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4e0e      	ldr	r6, [pc, #56]	; (800268c <sbrk_aligned+0x3c>)
 8002654:	460c      	mov	r4, r1
 8002656:	6831      	ldr	r1, [r6, #0]
 8002658:	4605      	mov	r5, r0
 800265a:	b911      	cbnz	r1, 8002662 <sbrk_aligned+0x12>
 800265c:	f000 fb7a 	bl	8002d54 <_sbrk_r>
 8002660:	6030      	str	r0, [r6, #0]
 8002662:	4621      	mov	r1, r4
 8002664:	4628      	mov	r0, r5
 8002666:	f000 fb75 	bl	8002d54 <_sbrk_r>
 800266a:	1c43      	adds	r3, r0, #1
 800266c:	d00a      	beq.n	8002684 <sbrk_aligned+0x34>
 800266e:	1cc4      	adds	r4, r0, #3
 8002670:	f024 0403 	bic.w	r4, r4, #3
 8002674:	42a0      	cmp	r0, r4
 8002676:	d007      	beq.n	8002688 <sbrk_aligned+0x38>
 8002678:	1a21      	subs	r1, r4, r0
 800267a:	4628      	mov	r0, r5
 800267c:	f000 fb6a 	bl	8002d54 <_sbrk_r>
 8002680:	3001      	adds	r0, #1
 8002682:	d101      	bne.n	8002688 <sbrk_aligned+0x38>
 8002684:	f04f 34ff 	mov.w	r4, #4294967295
 8002688:	4620      	mov	r0, r4
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	20000104 	.word	0x20000104

08002690 <_malloc_r>:
 8002690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002694:	1ccd      	adds	r5, r1, #3
 8002696:	f025 0503 	bic.w	r5, r5, #3
 800269a:	3508      	adds	r5, #8
 800269c:	2d0c      	cmp	r5, #12
 800269e:	bf38      	it	cc
 80026a0:	250c      	movcc	r5, #12
 80026a2:	2d00      	cmp	r5, #0
 80026a4:	4607      	mov	r7, r0
 80026a6:	db01      	blt.n	80026ac <_malloc_r+0x1c>
 80026a8:	42a9      	cmp	r1, r5
 80026aa:	d905      	bls.n	80026b8 <_malloc_r+0x28>
 80026ac:	230c      	movs	r3, #12
 80026ae:	2600      	movs	r6, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4630      	mov	r0, r6
 80026b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b8:	4e2e      	ldr	r6, [pc, #184]	; (8002774 <_malloc_r+0xe4>)
 80026ba:	f000 fc03 	bl	8002ec4 <__malloc_lock>
 80026be:	6833      	ldr	r3, [r6, #0]
 80026c0:	461c      	mov	r4, r3
 80026c2:	bb34      	cbnz	r4, 8002712 <_malloc_r+0x82>
 80026c4:	4629      	mov	r1, r5
 80026c6:	4638      	mov	r0, r7
 80026c8:	f7ff ffc2 	bl	8002650 <sbrk_aligned>
 80026cc:	1c43      	adds	r3, r0, #1
 80026ce:	4604      	mov	r4, r0
 80026d0:	d14d      	bne.n	800276e <_malloc_r+0xde>
 80026d2:	6834      	ldr	r4, [r6, #0]
 80026d4:	4626      	mov	r6, r4
 80026d6:	2e00      	cmp	r6, #0
 80026d8:	d140      	bne.n	800275c <_malloc_r+0xcc>
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	4631      	mov	r1, r6
 80026de:	4638      	mov	r0, r7
 80026e0:	eb04 0803 	add.w	r8, r4, r3
 80026e4:	f000 fb36 	bl	8002d54 <_sbrk_r>
 80026e8:	4580      	cmp	r8, r0
 80026ea:	d13a      	bne.n	8002762 <_malloc_r+0xd2>
 80026ec:	6821      	ldr	r1, [r4, #0]
 80026ee:	3503      	adds	r5, #3
 80026f0:	1a6d      	subs	r5, r5, r1
 80026f2:	f025 0503 	bic.w	r5, r5, #3
 80026f6:	3508      	adds	r5, #8
 80026f8:	2d0c      	cmp	r5, #12
 80026fa:	bf38      	it	cc
 80026fc:	250c      	movcc	r5, #12
 80026fe:	4638      	mov	r0, r7
 8002700:	4629      	mov	r1, r5
 8002702:	f7ff ffa5 	bl	8002650 <sbrk_aligned>
 8002706:	3001      	adds	r0, #1
 8002708:	d02b      	beq.n	8002762 <_malloc_r+0xd2>
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	442b      	add	r3, r5
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	e00e      	b.n	8002730 <_malloc_r+0xa0>
 8002712:	6822      	ldr	r2, [r4, #0]
 8002714:	1b52      	subs	r2, r2, r5
 8002716:	d41e      	bmi.n	8002756 <_malloc_r+0xc6>
 8002718:	2a0b      	cmp	r2, #11
 800271a:	d916      	bls.n	800274a <_malloc_r+0xba>
 800271c:	1961      	adds	r1, r4, r5
 800271e:	42a3      	cmp	r3, r4
 8002720:	6025      	str	r5, [r4, #0]
 8002722:	bf18      	it	ne
 8002724:	6059      	strne	r1, [r3, #4]
 8002726:	6863      	ldr	r3, [r4, #4]
 8002728:	bf08      	it	eq
 800272a:	6031      	streq	r1, [r6, #0]
 800272c:	5162      	str	r2, [r4, r5]
 800272e:	604b      	str	r3, [r1, #4]
 8002730:	4638      	mov	r0, r7
 8002732:	f104 060b 	add.w	r6, r4, #11
 8002736:	f000 fbcb 	bl	8002ed0 <__malloc_unlock>
 800273a:	f026 0607 	bic.w	r6, r6, #7
 800273e:	1d23      	adds	r3, r4, #4
 8002740:	1af2      	subs	r2, r6, r3
 8002742:	d0b6      	beq.n	80026b2 <_malloc_r+0x22>
 8002744:	1b9b      	subs	r3, r3, r6
 8002746:	50a3      	str	r3, [r4, r2]
 8002748:	e7b3      	b.n	80026b2 <_malloc_r+0x22>
 800274a:	6862      	ldr	r2, [r4, #4]
 800274c:	42a3      	cmp	r3, r4
 800274e:	bf0c      	ite	eq
 8002750:	6032      	streq	r2, [r6, #0]
 8002752:	605a      	strne	r2, [r3, #4]
 8002754:	e7ec      	b.n	8002730 <_malloc_r+0xa0>
 8002756:	4623      	mov	r3, r4
 8002758:	6864      	ldr	r4, [r4, #4]
 800275a:	e7b2      	b.n	80026c2 <_malloc_r+0x32>
 800275c:	4634      	mov	r4, r6
 800275e:	6876      	ldr	r6, [r6, #4]
 8002760:	e7b9      	b.n	80026d6 <_malloc_r+0x46>
 8002762:	230c      	movs	r3, #12
 8002764:	4638      	mov	r0, r7
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	f000 fbb2 	bl	8002ed0 <__malloc_unlock>
 800276c:	e7a1      	b.n	80026b2 <_malloc_r+0x22>
 800276e:	6025      	str	r5, [r4, #0]
 8002770:	e7de      	b.n	8002730 <_malloc_r+0xa0>
 8002772:	bf00      	nop
 8002774:	20000100 	.word	0x20000100

08002778 <__sfputc_r>:
 8002778:	6893      	ldr	r3, [r2, #8]
 800277a:	b410      	push	{r4}
 800277c:	3b01      	subs	r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	6093      	str	r3, [r2, #8]
 8002782:	da07      	bge.n	8002794 <__sfputc_r+0x1c>
 8002784:	6994      	ldr	r4, [r2, #24]
 8002786:	42a3      	cmp	r3, r4
 8002788:	db01      	blt.n	800278e <__sfputc_r+0x16>
 800278a:	290a      	cmp	r1, #10
 800278c:	d102      	bne.n	8002794 <__sfputc_r+0x1c>
 800278e:	bc10      	pop	{r4}
 8002790:	f7ff bc32 	b.w	8001ff8 <__swbuf_r>
 8002794:	6813      	ldr	r3, [r2, #0]
 8002796:	1c58      	adds	r0, r3, #1
 8002798:	6010      	str	r0, [r2, #0]
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	4608      	mov	r0, r1
 800279e:	bc10      	pop	{r4}
 80027a0:	4770      	bx	lr

080027a2 <__sfputs_r>:
 80027a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a4:	4606      	mov	r6, r0
 80027a6:	460f      	mov	r7, r1
 80027a8:	4614      	mov	r4, r2
 80027aa:	18d5      	adds	r5, r2, r3
 80027ac:	42ac      	cmp	r4, r5
 80027ae:	d101      	bne.n	80027b4 <__sfputs_r+0x12>
 80027b0:	2000      	movs	r0, #0
 80027b2:	e007      	b.n	80027c4 <__sfputs_r+0x22>
 80027b4:	463a      	mov	r2, r7
 80027b6:	4630      	mov	r0, r6
 80027b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027bc:	f7ff ffdc 	bl	8002778 <__sfputc_r>
 80027c0:	1c43      	adds	r3, r0, #1
 80027c2:	d1f3      	bne.n	80027ac <__sfputs_r+0xa>
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027c8 <_vfiprintf_r>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	460d      	mov	r5, r1
 80027ce:	4614      	mov	r4, r2
 80027d0:	4698      	mov	r8, r3
 80027d2:	4606      	mov	r6, r0
 80027d4:	b09d      	sub	sp, #116	; 0x74
 80027d6:	b118      	cbz	r0, 80027e0 <_vfiprintf_r+0x18>
 80027d8:	6983      	ldr	r3, [r0, #24]
 80027da:	b90b      	cbnz	r3, 80027e0 <_vfiprintf_r+0x18>
 80027dc:	f7ff fde2 	bl	80023a4 <__sinit>
 80027e0:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <_vfiprintf_r+0x240>)
 80027e2:	429d      	cmp	r5, r3
 80027e4:	d11b      	bne.n	800281e <_vfiprintf_r+0x56>
 80027e6:	6875      	ldr	r5, [r6, #4]
 80027e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027ea:	07d9      	lsls	r1, r3, #31
 80027ec:	d405      	bmi.n	80027fa <_vfiprintf_r+0x32>
 80027ee:	89ab      	ldrh	r3, [r5, #12]
 80027f0:	059a      	lsls	r2, r3, #22
 80027f2:	d402      	bmi.n	80027fa <_vfiprintf_r+0x32>
 80027f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027f6:	f7ff fe73 	bl	80024e0 <__retarget_lock_acquire_recursive>
 80027fa:	89ab      	ldrh	r3, [r5, #12]
 80027fc:	071b      	lsls	r3, r3, #28
 80027fe:	d501      	bpl.n	8002804 <_vfiprintf_r+0x3c>
 8002800:	692b      	ldr	r3, [r5, #16]
 8002802:	b9eb      	cbnz	r3, 8002840 <_vfiprintf_r+0x78>
 8002804:	4629      	mov	r1, r5
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff fc48 	bl	800209c <__swsetup_r>
 800280c:	b1c0      	cbz	r0, 8002840 <_vfiprintf_r+0x78>
 800280e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002810:	07dc      	lsls	r4, r3, #31
 8002812:	d50e      	bpl.n	8002832 <_vfiprintf_r+0x6a>
 8002814:	f04f 30ff 	mov.w	r0, #4294967295
 8002818:	b01d      	add	sp, #116	; 0x74
 800281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281e:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <_vfiprintf_r+0x244>)
 8002820:	429d      	cmp	r5, r3
 8002822:	d101      	bne.n	8002828 <_vfiprintf_r+0x60>
 8002824:	68b5      	ldr	r5, [r6, #8]
 8002826:	e7df      	b.n	80027e8 <_vfiprintf_r+0x20>
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <_vfiprintf_r+0x248>)
 800282a:	429d      	cmp	r5, r3
 800282c:	bf08      	it	eq
 800282e:	68f5      	ldreq	r5, [r6, #12]
 8002830:	e7da      	b.n	80027e8 <_vfiprintf_r+0x20>
 8002832:	89ab      	ldrh	r3, [r5, #12]
 8002834:	0598      	lsls	r0, r3, #22
 8002836:	d4ed      	bmi.n	8002814 <_vfiprintf_r+0x4c>
 8002838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800283a:	f7ff fe52 	bl	80024e2 <__retarget_lock_release_recursive>
 800283e:	e7e9      	b.n	8002814 <_vfiprintf_r+0x4c>
 8002840:	2300      	movs	r3, #0
 8002842:	9309      	str	r3, [sp, #36]	; 0x24
 8002844:	2320      	movs	r3, #32
 8002846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800284a:	2330      	movs	r3, #48	; 0x30
 800284c:	f04f 0901 	mov.w	r9, #1
 8002850:	f8cd 800c 	str.w	r8, [sp, #12]
 8002854:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002a14 <_vfiprintf_r+0x24c>
 8002858:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800285c:	4623      	mov	r3, r4
 800285e:	469a      	mov	sl, r3
 8002860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002864:	b10a      	cbz	r2, 800286a <_vfiprintf_r+0xa2>
 8002866:	2a25      	cmp	r2, #37	; 0x25
 8002868:	d1f9      	bne.n	800285e <_vfiprintf_r+0x96>
 800286a:	ebba 0b04 	subs.w	fp, sl, r4
 800286e:	d00b      	beq.n	8002888 <_vfiprintf_r+0xc0>
 8002870:	465b      	mov	r3, fp
 8002872:	4622      	mov	r2, r4
 8002874:	4629      	mov	r1, r5
 8002876:	4630      	mov	r0, r6
 8002878:	f7ff ff93 	bl	80027a2 <__sfputs_r>
 800287c:	3001      	adds	r0, #1
 800287e:	f000 80aa 	beq.w	80029d6 <_vfiprintf_r+0x20e>
 8002882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002884:	445a      	add	r2, fp
 8002886:	9209      	str	r2, [sp, #36]	; 0x24
 8002888:	f89a 3000 	ldrb.w	r3, [sl]
 800288c:	2b00      	cmp	r3, #0
 800288e:	f000 80a2 	beq.w	80029d6 <_vfiprintf_r+0x20e>
 8002892:	2300      	movs	r3, #0
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800289c:	f10a 0a01 	add.w	sl, sl, #1
 80028a0:	9304      	str	r3, [sp, #16]
 80028a2:	9307      	str	r3, [sp, #28]
 80028a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028a8:	931a      	str	r3, [sp, #104]	; 0x68
 80028aa:	4654      	mov	r4, sl
 80028ac:	2205      	movs	r2, #5
 80028ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b2:	4858      	ldr	r0, [pc, #352]	; (8002a14 <_vfiprintf_r+0x24c>)
 80028b4:	f000 faf8 	bl	8002ea8 <memchr>
 80028b8:	9a04      	ldr	r2, [sp, #16]
 80028ba:	b9d8      	cbnz	r0, 80028f4 <_vfiprintf_r+0x12c>
 80028bc:	06d1      	lsls	r1, r2, #27
 80028be:	bf44      	itt	mi
 80028c0:	2320      	movmi	r3, #32
 80028c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028c6:	0713      	lsls	r3, r2, #28
 80028c8:	bf44      	itt	mi
 80028ca:	232b      	movmi	r3, #43	; 0x2b
 80028cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d0:	f89a 3000 	ldrb.w	r3, [sl]
 80028d4:	2b2a      	cmp	r3, #42	; 0x2a
 80028d6:	d015      	beq.n	8002904 <_vfiprintf_r+0x13c>
 80028d8:	4654      	mov	r4, sl
 80028da:	2000      	movs	r0, #0
 80028dc:	f04f 0c0a 	mov.w	ip, #10
 80028e0:	9a07      	ldr	r2, [sp, #28]
 80028e2:	4621      	mov	r1, r4
 80028e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028e8:	3b30      	subs	r3, #48	; 0x30
 80028ea:	2b09      	cmp	r3, #9
 80028ec:	d94e      	bls.n	800298c <_vfiprintf_r+0x1c4>
 80028ee:	b1b0      	cbz	r0, 800291e <_vfiprintf_r+0x156>
 80028f0:	9207      	str	r2, [sp, #28]
 80028f2:	e014      	b.n	800291e <_vfiprintf_r+0x156>
 80028f4:	eba0 0308 	sub.w	r3, r0, r8
 80028f8:	fa09 f303 	lsl.w	r3, r9, r3
 80028fc:	4313      	orrs	r3, r2
 80028fe:	46a2      	mov	sl, r4
 8002900:	9304      	str	r3, [sp, #16]
 8002902:	e7d2      	b.n	80028aa <_vfiprintf_r+0xe2>
 8002904:	9b03      	ldr	r3, [sp, #12]
 8002906:	1d19      	adds	r1, r3, #4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	9103      	str	r1, [sp, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	bfbb      	ittet	lt
 8002910:	425b      	neglt	r3, r3
 8002912:	f042 0202 	orrlt.w	r2, r2, #2
 8002916:	9307      	strge	r3, [sp, #28]
 8002918:	9307      	strlt	r3, [sp, #28]
 800291a:	bfb8      	it	lt
 800291c:	9204      	strlt	r2, [sp, #16]
 800291e:	7823      	ldrb	r3, [r4, #0]
 8002920:	2b2e      	cmp	r3, #46	; 0x2e
 8002922:	d10c      	bne.n	800293e <_vfiprintf_r+0x176>
 8002924:	7863      	ldrb	r3, [r4, #1]
 8002926:	2b2a      	cmp	r3, #42	; 0x2a
 8002928:	d135      	bne.n	8002996 <_vfiprintf_r+0x1ce>
 800292a:	9b03      	ldr	r3, [sp, #12]
 800292c:	3402      	adds	r4, #2
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	9203      	str	r2, [sp, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfb8      	it	lt
 8002938:	f04f 33ff 	movlt.w	r3, #4294967295
 800293c:	9305      	str	r3, [sp, #20]
 800293e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002a18 <_vfiprintf_r+0x250>
 8002942:	2203      	movs	r2, #3
 8002944:	4650      	mov	r0, sl
 8002946:	7821      	ldrb	r1, [r4, #0]
 8002948:	f000 faae 	bl	8002ea8 <memchr>
 800294c:	b140      	cbz	r0, 8002960 <_vfiprintf_r+0x198>
 800294e:	2340      	movs	r3, #64	; 0x40
 8002950:	eba0 000a 	sub.w	r0, r0, sl
 8002954:	fa03 f000 	lsl.w	r0, r3, r0
 8002958:	9b04      	ldr	r3, [sp, #16]
 800295a:	3401      	adds	r4, #1
 800295c:	4303      	orrs	r3, r0
 800295e:	9304      	str	r3, [sp, #16]
 8002960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002964:	2206      	movs	r2, #6
 8002966:	482d      	ldr	r0, [pc, #180]	; (8002a1c <_vfiprintf_r+0x254>)
 8002968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800296c:	f000 fa9c 	bl	8002ea8 <memchr>
 8002970:	2800      	cmp	r0, #0
 8002972:	d03f      	beq.n	80029f4 <_vfiprintf_r+0x22c>
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <_vfiprintf_r+0x258>)
 8002976:	bb1b      	cbnz	r3, 80029c0 <_vfiprintf_r+0x1f8>
 8002978:	9b03      	ldr	r3, [sp, #12]
 800297a:	3307      	adds	r3, #7
 800297c:	f023 0307 	bic.w	r3, r3, #7
 8002980:	3308      	adds	r3, #8
 8002982:	9303      	str	r3, [sp, #12]
 8002984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002986:	443b      	add	r3, r7
 8002988:	9309      	str	r3, [sp, #36]	; 0x24
 800298a:	e767      	b.n	800285c <_vfiprintf_r+0x94>
 800298c:	460c      	mov	r4, r1
 800298e:	2001      	movs	r0, #1
 8002990:	fb0c 3202 	mla	r2, ip, r2, r3
 8002994:	e7a5      	b.n	80028e2 <_vfiprintf_r+0x11a>
 8002996:	2300      	movs	r3, #0
 8002998:	f04f 0c0a 	mov.w	ip, #10
 800299c:	4619      	mov	r1, r3
 800299e:	3401      	adds	r4, #1
 80029a0:	9305      	str	r3, [sp, #20]
 80029a2:	4620      	mov	r0, r4
 80029a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029a8:	3a30      	subs	r2, #48	; 0x30
 80029aa:	2a09      	cmp	r2, #9
 80029ac:	d903      	bls.n	80029b6 <_vfiprintf_r+0x1ee>
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0c5      	beq.n	800293e <_vfiprintf_r+0x176>
 80029b2:	9105      	str	r1, [sp, #20]
 80029b4:	e7c3      	b.n	800293e <_vfiprintf_r+0x176>
 80029b6:	4604      	mov	r4, r0
 80029b8:	2301      	movs	r3, #1
 80029ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80029be:	e7f0      	b.n	80029a2 <_vfiprintf_r+0x1da>
 80029c0:	ab03      	add	r3, sp, #12
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	462a      	mov	r2, r5
 80029c6:	4630      	mov	r0, r6
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <_vfiprintf_r+0x25c>)
 80029ca:	a904      	add	r1, sp, #16
 80029cc:	f3af 8000 	nop.w
 80029d0:	4607      	mov	r7, r0
 80029d2:	1c78      	adds	r0, r7, #1
 80029d4:	d1d6      	bne.n	8002984 <_vfiprintf_r+0x1bc>
 80029d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029d8:	07d9      	lsls	r1, r3, #31
 80029da:	d405      	bmi.n	80029e8 <_vfiprintf_r+0x220>
 80029dc:	89ab      	ldrh	r3, [r5, #12]
 80029de:	059a      	lsls	r2, r3, #22
 80029e0:	d402      	bmi.n	80029e8 <_vfiprintf_r+0x220>
 80029e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029e4:	f7ff fd7d 	bl	80024e2 <__retarget_lock_release_recursive>
 80029e8:	89ab      	ldrh	r3, [r5, #12]
 80029ea:	065b      	lsls	r3, r3, #25
 80029ec:	f53f af12 	bmi.w	8002814 <_vfiprintf_r+0x4c>
 80029f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029f2:	e711      	b.n	8002818 <_vfiprintf_r+0x50>
 80029f4:	ab03      	add	r3, sp, #12
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	462a      	mov	r2, r5
 80029fa:	4630      	mov	r0, r6
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <_vfiprintf_r+0x25c>)
 80029fe:	a904      	add	r1, sp, #16
 8002a00:	f000 f882 	bl	8002b08 <_printf_i>
 8002a04:	e7e4      	b.n	80029d0 <_vfiprintf_r+0x208>
 8002a06:	bf00      	nop
 8002a08:	08003094 	.word	0x08003094
 8002a0c:	080030b4 	.word	0x080030b4
 8002a10:	08003074 	.word	0x08003074
 8002a14:	080030d4 	.word	0x080030d4
 8002a18:	080030da 	.word	0x080030da
 8002a1c:	080030de 	.word	0x080030de
 8002a20:	00000000 	.word	0x00000000
 8002a24:	080027a3 	.word	0x080027a3

08002a28 <_printf_common>:
 8002a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	4616      	mov	r6, r2
 8002a2e:	4699      	mov	r9, r3
 8002a30:	688a      	ldr	r2, [r1, #8]
 8002a32:	690b      	ldr	r3, [r1, #16]
 8002a34:	4607      	mov	r7, r0
 8002a36:	4293      	cmp	r3, r2
 8002a38:	bfb8      	it	lt
 8002a3a:	4613      	movlt	r3, r2
 8002a3c:	6033      	str	r3, [r6, #0]
 8002a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a42:	460c      	mov	r4, r1
 8002a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a48:	b10a      	cbz	r2, 8002a4e <_printf_common+0x26>
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	6033      	str	r3, [r6, #0]
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	0699      	lsls	r1, r3, #26
 8002a52:	bf42      	ittt	mi
 8002a54:	6833      	ldrmi	r3, [r6, #0]
 8002a56:	3302      	addmi	r3, #2
 8002a58:	6033      	strmi	r3, [r6, #0]
 8002a5a:	6825      	ldr	r5, [r4, #0]
 8002a5c:	f015 0506 	ands.w	r5, r5, #6
 8002a60:	d106      	bne.n	8002a70 <_printf_common+0x48>
 8002a62:	f104 0a19 	add.w	sl, r4, #25
 8002a66:	68e3      	ldr	r3, [r4, #12]
 8002a68:	6832      	ldr	r2, [r6, #0]
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	42ab      	cmp	r3, r5
 8002a6e:	dc28      	bgt.n	8002ac2 <_printf_common+0x9a>
 8002a70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a74:	1e13      	subs	r3, r2, #0
 8002a76:	6822      	ldr	r2, [r4, #0]
 8002a78:	bf18      	it	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	0692      	lsls	r2, r2, #26
 8002a7e:	d42d      	bmi.n	8002adc <_printf_common+0xb4>
 8002a80:	4649      	mov	r1, r9
 8002a82:	4638      	mov	r0, r7
 8002a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a88:	47c0      	blx	r8
 8002a8a:	3001      	adds	r0, #1
 8002a8c:	d020      	beq.n	8002ad0 <_printf_common+0xa8>
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	68e5      	ldr	r5, [r4, #12]
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf18      	it	ne
 8002a9a:	2500      	movne	r5, #0
 8002a9c:	6832      	ldr	r2, [r6, #0]
 8002a9e:	f04f 0600 	mov.w	r6, #0
 8002aa2:	68a3      	ldr	r3, [r4, #8]
 8002aa4:	bf08      	it	eq
 8002aa6:	1aad      	subeq	r5, r5, r2
 8002aa8:	6922      	ldr	r2, [r4, #16]
 8002aaa:	bf08      	it	eq
 8002aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bfc4      	itt	gt
 8002ab4:	1a9b      	subgt	r3, r3, r2
 8002ab6:	18ed      	addgt	r5, r5, r3
 8002ab8:	341a      	adds	r4, #26
 8002aba:	42b5      	cmp	r5, r6
 8002abc:	d11a      	bne.n	8002af4 <_printf_common+0xcc>
 8002abe:	2000      	movs	r0, #0
 8002ac0:	e008      	b.n	8002ad4 <_printf_common+0xac>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4652      	mov	r2, sl
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	4638      	mov	r0, r7
 8002aca:	47c0      	blx	r8
 8002acc:	3001      	adds	r0, #1
 8002ace:	d103      	bne.n	8002ad8 <_printf_common+0xb0>
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad8:	3501      	adds	r5, #1
 8002ada:	e7c4      	b.n	8002a66 <_printf_common+0x3e>
 8002adc:	2030      	movs	r0, #48	; 0x30
 8002ade:	18e1      	adds	r1, r4, r3
 8002ae0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aea:	4422      	add	r2, r4
 8002aec:	3302      	adds	r3, #2
 8002aee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af2:	e7c5      	b.n	8002a80 <_printf_common+0x58>
 8002af4:	2301      	movs	r3, #1
 8002af6:	4622      	mov	r2, r4
 8002af8:	4649      	mov	r1, r9
 8002afa:	4638      	mov	r0, r7
 8002afc:	47c0      	blx	r8
 8002afe:	3001      	adds	r0, #1
 8002b00:	d0e6      	beq.n	8002ad0 <_printf_common+0xa8>
 8002b02:	3601      	adds	r6, #1
 8002b04:	e7d9      	b.n	8002aba <_printf_common+0x92>
	...

08002b08 <_printf_i>:
 8002b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	7e0f      	ldrb	r7, [r1, #24]
 8002b0e:	4691      	mov	r9, r2
 8002b10:	2f78      	cmp	r7, #120	; 0x78
 8002b12:	4680      	mov	r8, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	469a      	mov	sl, r3
 8002b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b1e:	d807      	bhi.n	8002b30 <_printf_i+0x28>
 8002b20:	2f62      	cmp	r7, #98	; 0x62
 8002b22:	d80a      	bhi.n	8002b3a <_printf_i+0x32>
 8002b24:	2f00      	cmp	r7, #0
 8002b26:	f000 80d9 	beq.w	8002cdc <_printf_i+0x1d4>
 8002b2a:	2f58      	cmp	r7, #88	; 0x58
 8002b2c:	f000 80a4 	beq.w	8002c78 <_printf_i+0x170>
 8002b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b38:	e03a      	b.n	8002bb0 <_printf_i+0xa8>
 8002b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b3e:	2b15      	cmp	r3, #21
 8002b40:	d8f6      	bhi.n	8002b30 <_printf_i+0x28>
 8002b42:	a101      	add	r1, pc, #4	; (adr r1, 8002b48 <_printf_i+0x40>)
 8002b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b48:	08002ba1 	.word	0x08002ba1
 8002b4c:	08002bb5 	.word	0x08002bb5
 8002b50:	08002b31 	.word	0x08002b31
 8002b54:	08002b31 	.word	0x08002b31
 8002b58:	08002b31 	.word	0x08002b31
 8002b5c:	08002b31 	.word	0x08002b31
 8002b60:	08002bb5 	.word	0x08002bb5
 8002b64:	08002b31 	.word	0x08002b31
 8002b68:	08002b31 	.word	0x08002b31
 8002b6c:	08002b31 	.word	0x08002b31
 8002b70:	08002b31 	.word	0x08002b31
 8002b74:	08002cc3 	.word	0x08002cc3
 8002b78:	08002be5 	.word	0x08002be5
 8002b7c:	08002ca5 	.word	0x08002ca5
 8002b80:	08002b31 	.word	0x08002b31
 8002b84:	08002b31 	.word	0x08002b31
 8002b88:	08002ce5 	.word	0x08002ce5
 8002b8c:	08002b31 	.word	0x08002b31
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002b31 	.word	0x08002b31
 8002b98:	08002b31 	.word	0x08002b31
 8002b9c:	08002cad 	.word	0x08002cad
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	602a      	str	r2, [r5, #0]
 8002ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0a4      	b.n	8002cfe <_printf_i+0x1f6>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	6829      	ldr	r1, [r5, #0]
 8002bb8:	0606      	lsls	r6, r0, #24
 8002bba:	f101 0304 	add.w	r3, r1, #4
 8002bbe:	d50a      	bpl.n	8002bd6 <_printf_i+0xce>
 8002bc0:	680e      	ldr	r6, [r1, #0]
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	2e00      	cmp	r6, #0
 8002bc6:	da03      	bge.n	8002bd0 <_printf_i+0xc8>
 8002bc8:	232d      	movs	r3, #45	; 0x2d
 8002bca:	4276      	negs	r6, r6
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	485e      	ldr	r0, [pc, #376]	; (8002d4c <_printf_i+0x244>)
 8002bd4:	e019      	b.n	8002c0a <_printf_i+0x102>
 8002bd6:	680e      	ldr	r6, [r1, #0]
 8002bd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	bf18      	it	ne
 8002be0:	b236      	sxthne	r6, r6
 8002be2:	e7ef      	b.n	8002bc4 <_printf_i+0xbc>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	6820      	ldr	r0, [r4, #0]
 8002be8:	1d19      	adds	r1, r3, #4
 8002bea:	6029      	str	r1, [r5, #0]
 8002bec:	0601      	lsls	r1, r0, #24
 8002bee:	d501      	bpl.n	8002bf4 <_printf_i+0xec>
 8002bf0:	681e      	ldr	r6, [r3, #0]
 8002bf2:	e002      	b.n	8002bfa <_printf_i+0xf2>
 8002bf4:	0646      	lsls	r6, r0, #25
 8002bf6:	d5fb      	bpl.n	8002bf0 <_printf_i+0xe8>
 8002bf8:	881e      	ldrh	r6, [r3, #0]
 8002bfa:	2f6f      	cmp	r7, #111	; 0x6f
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2308      	moveq	r3, #8
 8002c00:	230a      	movne	r3, #10
 8002c02:	4852      	ldr	r0, [pc, #328]	; (8002d4c <_printf_i+0x244>)
 8002c04:	2100      	movs	r1, #0
 8002c06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c0a:	6865      	ldr	r5, [r4, #4]
 8002c0c:	2d00      	cmp	r5, #0
 8002c0e:	bfa8      	it	ge
 8002c10:	6821      	ldrge	r1, [r4, #0]
 8002c12:	60a5      	str	r5, [r4, #8]
 8002c14:	bfa4      	itt	ge
 8002c16:	f021 0104 	bicge.w	r1, r1, #4
 8002c1a:	6021      	strge	r1, [r4, #0]
 8002c1c:	b90e      	cbnz	r6, 8002c22 <_printf_i+0x11a>
 8002c1e:	2d00      	cmp	r5, #0
 8002c20:	d04d      	beq.n	8002cbe <_printf_i+0x1b6>
 8002c22:	4615      	mov	r5, r2
 8002c24:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c28:	fb03 6711 	mls	r7, r3, r1, r6
 8002c2c:	5dc7      	ldrb	r7, [r0, r7]
 8002c2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c32:	4637      	mov	r7, r6
 8002c34:	42bb      	cmp	r3, r7
 8002c36:	460e      	mov	r6, r1
 8002c38:	d9f4      	bls.n	8002c24 <_printf_i+0x11c>
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d10b      	bne.n	8002c56 <_printf_i+0x14e>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	07de      	lsls	r6, r3, #31
 8002c42:	d508      	bpl.n	8002c56 <_printf_i+0x14e>
 8002c44:	6923      	ldr	r3, [r4, #16]
 8002c46:	6861      	ldr	r1, [r4, #4]
 8002c48:	4299      	cmp	r1, r3
 8002c4a:	bfde      	ittt	le
 8002c4c:	2330      	movle	r3, #48	; 0x30
 8002c4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c56:	1b52      	subs	r2, r2, r5
 8002c58:	6122      	str	r2, [r4, #16]
 8002c5a:	464b      	mov	r3, r9
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	4640      	mov	r0, r8
 8002c60:	f8cd a000 	str.w	sl, [sp]
 8002c64:	aa03      	add	r2, sp, #12
 8002c66:	f7ff fedf 	bl	8002a28 <_printf_common>
 8002c6a:	3001      	adds	r0, #1
 8002c6c:	d14c      	bne.n	8002d08 <_printf_i+0x200>
 8002c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c72:	b004      	add	sp, #16
 8002c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c78:	4834      	ldr	r0, [pc, #208]	; (8002d4c <_printf_i+0x244>)
 8002c7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c7e:	6829      	ldr	r1, [r5, #0]
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c86:	6029      	str	r1, [r5, #0]
 8002c88:	061d      	lsls	r5, r3, #24
 8002c8a:	d514      	bpl.n	8002cb6 <_printf_i+0x1ae>
 8002c8c:	07df      	lsls	r7, r3, #31
 8002c8e:	bf44      	itt	mi
 8002c90:	f043 0320 	orrmi.w	r3, r3, #32
 8002c94:	6023      	strmi	r3, [r4, #0]
 8002c96:	b91e      	cbnz	r6, 8002ca0 <_printf_i+0x198>
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	f023 0320 	bic.w	r3, r3, #32
 8002c9e:	6023      	str	r3, [r4, #0]
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	e7af      	b.n	8002c04 <_printf_i+0xfc>
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	f043 0320 	orr.w	r3, r3, #32
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	2378      	movs	r3, #120	; 0x78
 8002cae:	4828      	ldr	r0, [pc, #160]	; (8002d50 <_printf_i+0x248>)
 8002cb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cb4:	e7e3      	b.n	8002c7e <_printf_i+0x176>
 8002cb6:	0659      	lsls	r1, r3, #25
 8002cb8:	bf48      	it	mi
 8002cba:	b2b6      	uxthmi	r6, r6
 8002cbc:	e7e6      	b.n	8002c8c <_printf_i+0x184>
 8002cbe:	4615      	mov	r5, r2
 8002cc0:	e7bb      	b.n	8002c3a <_printf_i+0x132>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	6826      	ldr	r6, [r4, #0]
 8002cc6:	1d18      	adds	r0, r3, #4
 8002cc8:	6961      	ldr	r1, [r4, #20]
 8002cca:	6028      	str	r0, [r5, #0]
 8002ccc:	0635      	lsls	r5, r6, #24
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	d501      	bpl.n	8002cd6 <_printf_i+0x1ce>
 8002cd2:	6019      	str	r1, [r3, #0]
 8002cd4:	e002      	b.n	8002cdc <_printf_i+0x1d4>
 8002cd6:	0670      	lsls	r0, r6, #25
 8002cd8:	d5fb      	bpl.n	8002cd2 <_printf_i+0x1ca>
 8002cda:	8019      	strh	r1, [r3, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	4615      	mov	r5, r2
 8002ce0:	6123      	str	r3, [r4, #16]
 8002ce2:	e7ba      	b.n	8002c5a <_printf_i+0x152>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	1d1a      	adds	r2, r3, #4
 8002cea:	602a      	str	r2, [r5, #0]
 8002cec:	681d      	ldr	r5, [r3, #0]
 8002cee:	6862      	ldr	r2, [r4, #4]
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f000 f8d9 	bl	8002ea8 <memchr>
 8002cf6:	b108      	cbz	r0, 8002cfc <_printf_i+0x1f4>
 8002cf8:	1b40      	subs	r0, r0, r5
 8002cfa:	6060      	str	r0, [r4, #4]
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	6123      	str	r3, [r4, #16]
 8002d00:	2300      	movs	r3, #0
 8002d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d06:	e7a8      	b.n	8002c5a <_printf_i+0x152>
 8002d08:	462a      	mov	r2, r5
 8002d0a:	4649      	mov	r1, r9
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	6923      	ldr	r3, [r4, #16]
 8002d10:	47d0      	blx	sl
 8002d12:	3001      	adds	r0, #1
 8002d14:	d0ab      	beq.n	8002c6e <_printf_i+0x166>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	079b      	lsls	r3, r3, #30
 8002d1a:	d413      	bmi.n	8002d44 <_printf_i+0x23c>
 8002d1c:	68e0      	ldr	r0, [r4, #12]
 8002d1e:	9b03      	ldr	r3, [sp, #12]
 8002d20:	4298      	cmp	r0, r3
 8002d22:	bfb8      	it	lt
 8002d24:	4618      	movlt	r0, r3
 8002d26:	e7a4      	b.n	8002c72 <_printf_i+0x16a>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	4640      	mov	r0, r8
 8002d30:	47d0      	blx	sl
 8002d32:	3001      	adds	r0, #1
 8002d34:	d09b      	beq.n	8002c6e <_printf_i+0x166>
 8002d36:	3501      	adds	r5, #1
 8002d38:	68e3      	ldr	r3, [r4, #12]
 8002d3a:	9903      	ldr	r1, [sp, #12]
 8002d3c:	1a5b      	subs	r3, r3, r1
 8002d3e:	42ab      	cmp	r3, r5
 8002d40:	dcf2      	bgt.n	8002d28 <_printf_i+0x220>
 8002d42:	e7eb      	b.n	8002d1c <_printf_i+0x214>
 8002d44:	2500      	movs	r5, #0
 8002d46:	f104 0619 	add.w	r6, r4, #25
 8002d4a:	e7f5      	b.n	8002d38 <_printf_i+0x230>
 8002d4c:	080030e5 	.word	0x080030e5
 8002d50:	080030f6 	.word	0x080030f6

08002d54 <_sbrk_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	2300      	movs	r3, #0
 8002d58:	4d05      	ldr	r5, [pc, #20]	; (8002d70 <_sbrk_r+0x1c>)
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	f7fd fd24 	bl	80007ac <_sbrk>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_sbrk_r+0x1a>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_sbrk_r+0x1a>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	20000108 	.word	0x20000108

08002d74 <__sread>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	460c      	mov	r4, r1
 8002d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d7c:	f000 f8ae 	bl	8002edc <_read_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	bfab      	itete	ge
 8002d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d86:	89a3      	ldrhlt	r3, [r4, #12]
 8002d88:	181b      	addge	r3, r3, r0
 8002d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d8e:	bfac      	ite	ge
 8002d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d92:	81a3      	strhlt	r3, [r4, #12]
 8002d94:	bd10      	pop	{r4, pc}

08002d96 <__swrite>:
 8002d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	461f      	mov	r7, r3
 8002d9c:	898b      	ldrh	r3, [r1, #12]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	05db      	lsls	r3, r3, #23
 8002da2:	460c      	mov	r4, r1
 8002da4:	4616      	mov	r6, r2
 8002da6:	d505      	bpl.n	8002db4 <__swrite+0x1e>
 8002da8:	2302      	movs	r3, #2
 8002daa:	2200      	movs	r2, #0
 8002dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002db0:	f000 f868 	bl	8002e84 <_lseek_r>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	4632      	mov	r2, r6
 8002db8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dca:	f000 b817 	b.w	8002dfc <_write_r>

08002dce <__sseek>:
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	460c      	mov	r4, r1
 8002dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd6:	f000 f855 	bl	8002e84 <_lseek_r>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	bf15      	itete	ne
 8002de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002dea:	81a3      	strheq	r3, [r4, #12]
 8002dec:	bf18      	it	ne
 8002dee:	81a3      	strhne	r3, [r4, #12]
 8002df0:	bd10      	pop	{r4, pc}

08002df2 <__sclose>:
 8002df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df6:	f000 b813 	b.w	8002e20 <_close_r>
	...

08002dfc <_write_r>:
 8002dfc:	b538      	push	{r3, r4, r5, lr}
 8002dfe:	4604      	mov	r4, r0
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	2200      	movs	r2, #0
 8002e06:	4d05      	ldr	r5, [pc, #20]	; (8002e1c <_write_r+0x20>)
 8002e08:	602a      	str	r2, [r5, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f7fd fd48 	bl	80008a0 <_write>
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d102      	bne.n	8002e1a <_write_r+0x1e>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	b103      	cbz	r3, 8002e1a <_write_r+0x1e>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	20000108 	.word	0x20000108

08002e20 <_close_r>:
 8002e20:	b538      	push	{r3, r4, r5, lr}
 8002e22:	2300      	movs	r3, #0
 8002e24:	4d05      	ldr	r5, [pc, #20]	; (8002e3c <_close_r+0x1c>)
 8002e26:	4604      	mov	r4, r0
 8002e28:	4608      	mov	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fd fc8d 	bl	800074a <_close>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d102      	bne.n	8002e3a <_close_r+0x1a>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	b103      	cbz	r3, 8002e3a <_close_r+0x1a>
 8002e38:	6023      	str	r3, [r4, #0]
 8002e3a:	bd38      	pop	{r3, r4, r5, pc}
 8002e3c:	20000108 	.word	0x20000108

08002e40 <_fstat_r>:
 8002e40:	b538      	push	{r3, r4, r5, lr}
 8002e42:	2300      	movs	r3, #0
 8002e44:	4d06      	ldr	r5, [pc, #24]	; (8002e60 <_fstat_r+0x20>)
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	f7fd fc87 	bl	8000760 <_fstat>
 8002e52:	1c43      	adds	r3, r0, #1
 8002e54:	d102      	bne.n	8002e5c <_fstat_r+0x1c>
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	b103      	cbz	r3, 8002e5c <_fstat_r+0x1c>
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	bd38      	pop	{r3, r4, r5, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000108 	.word	0x20000108

08002e64 <_isatty_r>:
 8002e64:	b538      	push	{r3, r4, r5, lr}
 8002e66:	2300      	movs	r3, #0
 8002e68:	4d05      	ldr	r5, [pc, #20]	; (8002e80 <_isatty_r+0x1c>)
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	602b      	str	r3, [r5, #0]
 8002e70:	f7fd fc85 	bl	800077e <_isatty>
 8002e74:	1c43      	adds	r3, r0, #1
 8002e76:	d102      	bne.n	8002e7e <_isatty_r+0x1a>
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	b103      	cbz	r3, 8002e7e <_isatty_r+0x1a>
 8002e7c:	6023      	str	r3, [r4, #0]
 8002e7e:	bd38      	pop	{r3, r4, r5, pc}
 8002e80:	20000108 	.word	0x20000108

08002e84 <_lseek_r>:
 8002e84:	b538      	push	{r3, r4, r5, lr}
 8002e86:	4604      	mov	r4, r0
 8002e88:	4608      	mov	r0, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4d05      	ldr	r5, [pc, #20]	; (8002ea4 <_lseek_r+0x20>)
 8002e90:	602a      	str	r2, [r5, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f7fd fc7d 	bl	8000792 <_lseek>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d102      	bne.n	8002ea2 <_lseek_r+0x1e>
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	b103      	cbz	r3, 8002ea2 <_lseek_r+0x1e>
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	bd38      	pop	{r3, r4, r5, pc}
 8002ea4:	20000108 	.word	0x20000108

08002ea8 <memchr>:
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	b510      	push	{r4, lr}
 8002eac:	b2c9      	uxtb	r1, r1
 8002eae:	4402      	add	r2, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	d101      	bne.n	8002eba <memchr+0x12>
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e003      	b.n	8002ec2 <memchr+0x1a>
 8002eba:	7804      	ldrb	r4, [r0, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	428c      	cmp	r4, r1
 8002ec0:	d1f6      	bne.n	8002eb0 <memchr+0x8>
 8002ec2:	bd10      	pop	{r4, pc}

08002ec4 <__malloc_lock>:
 8002ec4:	4801      	ldr	r0, [pc, #4]	; (8002ecc <__malloc_lock+0x8>)
 8002ec6:	f7ff bb0b 	b.w	80024e0 <__retarget_lock_acquire_recursive>
 8002eca:	bf00      	nop
 8002ecc:	200000fc 	.word	0x200000fc

08002ed0 <__malloc_unlock>:
 8002ed0:	4801      	ldr	r0, [pc, #4]	; (8002ed8 <__malloc_unlock+0x8>)
 8002ed2:	f7ff bb06 	b.w	80024e2 <__retarget_lock_release_recursive>
 8002ed6:	bf00      	nop
 8002ed8:	200000fc 	.word	0x200000fc

08002edc <_read_r>:
 8002edc:	b538      	push	{r3, r4, r5, lr}
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4d05      	ldr	r5, [pc, #20]	; (8002efc <_read_r+0x20>)
 8002ee8:	602a      	str	r2, [r5, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	f7fd fcf6 	bl	80008dc <_read>
 8002ef0:	1c43      	adds	r3, r0, #1
 8002ef2:	d102      	bne.n	8002efa <_read_r+0x1e>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	b103      	cbz	r3, 8002efa <_read_r+0x1e>
 8002ef8:	6023      	str	r3, [r4, #0]
 8002efa:	bd38      	pop	{r3, r4, r5, pc}
 8002efc:	20000108 	.word	0x20000108

08002f00 <_init>:
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	bf00      	nop
 8002f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f06:	bc08      	pop	{r3}
 8002f08:	469e      	mov	lr, r3
 8002f0a:	4770      	bx	lr

08002f0c <_fini>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr
