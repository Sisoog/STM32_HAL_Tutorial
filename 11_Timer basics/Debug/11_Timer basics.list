
11_Timer basics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036f4  080036f4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f4  080036f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f4  080036f4  000136f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f8  080036f8  000136f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  20000070  0800376c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  0800376c  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b255  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c54  00000000  00000000  0002b2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002cf48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ba  00000000  00000000  0002e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5d0  00000000  00000000  00046dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba22  00000000  00000000  000533aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dedcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b38  00000000  00000000  000dee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035c8 	.word	0x080035c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035c8 	.word	0x080035c8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbe1 	bl	8000918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f869 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f97b 	bl	8000454 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f901 	bl	8000364 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f94d 	bl	8000400 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000166:	f000 f8a7 	bl	80002b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	RetargetInit(&huart1);				// initializing the stdio retargetting
 800016a:	4825      	ldr	r0, [pc, #148]	; (8000200 <main+0xb4>)
 800016c:	f000 fb80 	bl	8000870 <RetargetInit>
	HAL_TIM_Base_Start_IT(&htim2);		// start TIM2
 8000170:	4824      	ldr	r0, [pc, #144]	; (8000204 <main+0xb8>)
 8000172:	f001 fb91 	bl	8001898 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);			// start TIM1
 8000176:	4824      	ldr	r0, [pc, #144]	; (8000208 <main+0xbc>)
 8000178:	f001 fb44 	bl	8001804 <HAL_TIM_Base_Start>

	printf("%s\n\r", "Start!\r\n");		// print a message that indicate the start of the program execution
 800017c:	4923      	ldr	r1, [pc, #140]	; (800020c <main+0xc0>)
 800017e:	4824      	ldr	r0, [pc, #144]	; (8000210 <main+0xc4>)
 8000180:	f002 f9c0 	bl	8002504 <iprintf>
	uint16_t push_counter = 0;			// Variable for measuring the number of times the push-button is pressed
 8000184:	2300      	movs	r3, #0
 8000186:	80fb      	strh	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state_update)													// check if values are updated
 8000188:	4b22      	ldr	r3, [pc, #136]	; (8000214 <main+0xc8>)
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d026      	beq.n	80001de <main+0x92>
	  {
		  if(inrpt_sgnl_lvl)											// check if level of the interrupt signal is high
 8000190:	4b21      	ldr	r3, [pc, #132]	; (8000218 <main+0xcc>)
 8000192:	781b      	ldrb	r3, [r3, #0]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d00c      	beq.n	80001b2 <main+0x66>
		  {
			  counter++;												// increment the counter value
 8000198:	4b20      	ldr	r3, [pc, #128]	; (800021c <main+0xd0>)
 800019a:	881b      	ldrh	r3, [r3, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	b29a      	uxth	r2, r3
 80001a0:	4b1e      	ldr	r3, [pc, #120]	; (800021c <main+0xd0>)
 80001a2:	801a      	strh	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);		// set pin13 to high logic
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001aa:	481d      	ldr	r0, [pc, #116]	; (8000220 <main+0xd4>)
 80001ac:	f000 fea8 	bl	8000f00 <HAL_GPIO_WritePin>
 80001b0:	e012      	b.n	80001d8 <main+0x8c>
		  }
		  else if(!inrpt_sgnl_lvl)										// check if level of the interrupt signal is low
 80001b2:	4b19      	ldr	r3, [pc, #100]	; (8000218 <main+0xcc>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	f083 0301 	eor.w	r3, r3, #1
 80001ba:	b2db      	uxtb	r3, r3
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d00b      	beq.n	80001d8 <main+0x8c>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	// set pin13 to logic logic
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4816      	ldr	r0, [pc, #88]	; (8000220 <main+0xd4>)
 80001c8:	f000 fe9a 	bl	8000f00 <HAL_GPIO_WritePin>
			  printf("Elapsed Time (sec):  %d\r\n", counter);			// print the Elapsed time
 80001cc:	4b13      	ldr	r3, [pc, #76]	; (800021c <main+0xd0>)
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	4814      	ldr	r0, [pc, #80]	; (8000224 <main+0xd8>)
 80001d4:	f002 f996 	bl	8002504 <iprintf>
		  }
		  state_update = false;											// reset the update flag
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <main+0xc8>)
 80001da:	2200      	movs	r2, #0
 80001dc:	701a      	strb	r2, [r3, #0]
	  }

	  if(push_counter != __HAL_TIM_GetCounter(&htim1))					// check if the (button)counter has changed
 80001de:	88fa      	ldrh	r2, [r7, #6]
 80001e0:	4b09      	ldr	r3, [pc, #36]	; (8000208 <main+0xbc>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d0ce      	beq.n	8000188 <main+0x3c>
	  {
		push_counter = __HAL_TIM_GetCounter(&htim1);					// store the new (button)counter value
 80001ea:	4b07      	ldr	r3, [pc, #28]	; (8000208 <main+0xbc>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001f0:	80fb      	strh	r3, [r7, #6]
		printf("button is pushed! push count:  %d\r\n", push_counter);	// print the value of (button)counter value
 80001f2:	88fb      	ldrh	r3, [r7, #6]
 80001f4:	4619      	mov	r1, r3
 80001f6:	480c      	ldr	r0, [pc, #48]	; (8000228 <main+0xdc>)
 80001f8:	f002 f984 	bl	8002504 <iprintf>
	  if(state_update)													// check if values are updated
 80001fc:	e7c4      	b.n	8000188 <main+0x3c>
 80001fe:	bf00      	nop
 8000200:	2000011c 	.word	0x2000011c
 8000204:	200000d4 	.word	0x200000d4
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080035e0 	.word	0x080035e0
 8000210:	080035ec 	.word	0x080035ec
 8000214:	20000163 	.word	0x20000163
 8000218:	20000162 	.word	0x20000162
 800021c:	20000160 	.word	0x20000160
 8000220:	40011000 	.word	0x40011000
 8000224:	080035f4 	.word	0x080035f4
 8000228:	08003610 	.word	0x08003610

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b090      	sub	sp, #64	; 0x40
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2228      	movs	r2, #40	; 0x28
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f002 f95a 	bl	80024f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024e:	2301      	movs	r3, #1
 8000250:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000260:	2302      	movs	r3, #2
 8000262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000270:	f107 0318 	add.w	r3, r7, #24
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fe5b 	bl	8000f30 <HAL_RCC_OscConfig>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000280:	f000 f954 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000284:	230f      	movs	r3, #15
 8000286:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000288:	2302      	movs	r3, #2
 800028a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2102      	movs	r1, #2
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 f8c8 	bl	8001434 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002aa:	f000 f93f 	bl	800052c <Error_Handler>
  }
}
 80002ae:	bf00      	nop
 80002b0:	3740      	adds	r7, #64	; 0x40
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <MX_TIM1_Init+0xa4>)
 80002d6:	4a22      	ldr	r2, [pc, #136]	; (8000360 <MX_TIM1_Init+0xa8>)
 80002d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002da:	4b20      	ldr	r3, [pc, #128]	; (800035c <MX_TIM1_Init+0xa4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_TIM1_Init+0xa4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002e6:	4b1d      	ldr	r3, [pc, #116]	; (800035c <MX_TIM1_Init+0xa4>)
 80002e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_TIM1_Init+0xa4>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f4:	4b19      	ldr	r3, [pc, #100]	; (800035c <MX_TIM1_Init+0xa4>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_TIM1_Init+0xa4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000300:	4816      	ldr	r0, [pc, #88]	; (800035c <MX_TIM1_Init+0xa4>)
 8000302:	f001 fa2f 	bl	8001764 <HAL_TIM_Base_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800030c:	f000 f90e 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000314:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4619      	mov	r1, r3
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_TIM1_Init+0xa4>)
 800032a:	f001 fc0f 	bl	8001b4c <HAL_TIM_ConfigClockSource>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000334:	f000 f8fa 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800033c:	2300      	movs	r3, #0
 800033e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000340:	463b      	mov	r3, r7
 8000342:	4619      	mov	r1, r3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_TIM1_Init+0xa4>)
 8000346:	f001 fde1 	bl	8001f0c <HAL_TIMEx_MasterConfigSynchronization>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000350:	f000 f8ec 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	2000008c 	.word	0x2000008c
 8000360:	40012c00 	.word	0x40012c00

08000364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000378:	463b      	mov	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000380:	4b1e      	ldr	r3, [pc, #120]	; (80003fc <MX_TIM2_Init+0x98>)
 8000382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000386:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <MX_TIM2_Init+0x98>)
 800038a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800038e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_TIM2_Init+0x98>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000396:	4b19      	ldr	r3, [pc, #100]	; (80003fc <MX_TIM2_Init+0x98>)
 8000398:	f241 3287 	movw	r2, #4999	; 0x1387
 800039c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_TIM2_Init+0x98>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_TIM2_Init+0x98>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003aa:	4814      	ldr	r0, [pc, #80]	; (80003fc <MX_TIM2_Init+0x98>)
 80003ac:	f001 f9da 	bl	8001764 <HAL_TIM_Base_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003b6:	f000 f8b9 	bl	800052c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c0:	f107 0308 	add.w	r3, r7, #8
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <MX_TIM2_Init+0x98>)
 80003c8:	f001 fbc0 	bl	8001b4c <HAL_TIM_ConfigClockSource>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003d2:	f000 f8ab 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d6:	2300      	movs	r3, #0
 80003d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003de:	463b      	mov	r3, r7
 80003e0:	4619      	mov	r1, r3
 80003e2:	4806      	ldr	r0, [pc, #24]	; (80003fc <MX_TIM2_Init+0x98>)
 80003e4:	f001 fd92 	bl	8001f0c <HAL_TIMEx_MasterConfigSynchronization>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003ee:	f000 f89d 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	3718      	adds	r7, #24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000d4 	.word	0x200000d4

08000400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000406:	4a12      	ldr	r2, [pc, #72]	; (8000450 <MX_USART1_UART_Init+0x50>)
 8000408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800040a:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800040c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000418:	4b0c      	ldr	r3, [pc, #48]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000424:	4b09      	ldr	r3, [pc, #36]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000426:	220c      	movs	r2, #12
 8000428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_USART1_UART_Init+0x4c>)
 8000438:	f001 fdd8 	bl	8001fec <HAL_UART_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000442:	f000 f873 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000011c 	.word	0x2000011c
 8000450:	40013800 	.word	0x40013800

08000454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b088      	sub	sp, #32
 8000458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000468:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <MX_GPIO_Init+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <MX_GPIO_Init+0x90>)
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_GPIO_Init+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0310 	and.w	r3, r3, #16
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000480:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_GPIO_Init+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <MX_GPIO_Init+0x90>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_GPIO_Init+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0320 	and.w	r3, r3, #32
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <MX_GPIO_Init+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <MX_GPIO_Init+0x90>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_GPIO_Init+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_GPIO_Init+0x94>)
 80004b8:	f000 fd22 	bl	8000f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MX_GPIO_Init+0x94>)
 80004d6:	f000 fb8f 	bl	8000bf8 <HAL_GPIO_Init>

}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000

080004ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* update event interrupt handler callback */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	inrpt_sgnl_lvl = !inrpt_sgnl_lvl;		// toggle the interrupt signal's value
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf14      	ite	ne
 80004fc:	2301      	movne	r3, #1
 80004fe:	2300      	moveq	r3, #0
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f083 0301 	eor.w	r3, r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	f003 0301 	and.w	r3, r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000510:	701a      	strb	r2, [r3, #0]
	state_update = true;					// set the update flag
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20000162 	.word	0x20000162
 8000528:	20000163 	.word	0x20000163

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_MspInit+0x5c>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <HAL_MspInit+0x5c>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_MspInit+0x5c>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x5c>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_MspInit+0x5c>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_MspInit+0x5c>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_MspInit+0x60>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_MspInit+0x60>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40021000 	.word	0x40021000
 8000598:	40010000 	.word	0x40010000

0800059c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0318 	add.w	r3, r7, #24
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a23      	ldr	r2, [pc, #140]	; (8000644 <HAL_TIM_Base_MspInit+0xa8>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d125      	bne.n	8000608 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005bc:	4b22      	ldr	r3, [pc, #136]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	4619      	mov	r1, r3
 8000600:	4812      	ldr	r0, [pc, #72]	; (800064c <HAL_TIM_Base_MspInit+0xb0>)
 8000602:	f000 faf9 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000606:	e018      	b.n	800063a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000610:	d113      	bne.n	800063a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <HAL_TIM_Base_MspInit+0xac>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	201c      	movs	r0, #28
 8000630:	f000 faab 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000634:	201c      	movs	r0, #28
 8000636:	f000 fac4 	bl	8000bc2 <HAL_NVIC_EnableIRQ>
}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40012c00 	.word	0x40012c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <HAL_UART_MspInit+0x8c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d131      	bne.n	80006d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <HAL_UART_MspInit+0x90>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <HAL_UART_MspInit+0x90>)
 8000676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0x90>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_UART_MspInit+0x90>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <HAL_UART_MspInit+0x90>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_UART_MspInit+0x90>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a6:	2302      	movs	r3, #2
 80006a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <HAL_UART_MspInit+0x94>)
 80006b6:	f000 fa9f 	bl	8000bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <HAL_UART_MspInit+0x94>)
 80006d0:	f000 fa92 	bl	8000bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr

0800072a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072e:	f000 f939 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <TIM2_IRQHandler+0x10>)
 800073e:	f001 f8fd 	bl	800193c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d4 	.word	0x200000d4

0800074c <_close>:
	}
	return len;
}

int _close(int file)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	return -1;
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000772:	605a      	str	r2, [r3, #4]
	return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <_isatty>:

int _isatty(int file)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	return 1;
 8000788:	2301      	movs	r3, #1
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	return 0;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <_sbrk+0x5c>)
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <_sbrk+0x60>)
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <_sbrk+0x64>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <_sbrk+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d207      	bcs.n	80007ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007dc:	f001 fe60 	bl	80024a0 <__errno>
 80007e0:	4603      	mov	r3, r0
 80007e2:	220c      	movs	r2, #12
 80007e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	e009      	b.n	8000800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ec:	4b08      	ldr	r3, [pc, #32]	; (8000810 <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007f2:	4b07      	ldr	r3, [pc, #28]	; (8000810 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	4a05      	ldr	r2, [pc, #20]	; (8000810 <_sbrk+0x64>)
 80007fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20005000 	.word	0x20005000
 800080c:	00000400 	.word	0x00000400
 8000810:	20000164 	.word	0x20000164
 8000814:	20000180 	.word	0x20000180

08000818 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000826:	490d      	ldr	r1, [pc, #52]	; (800085c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000828:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800082c:	e002      	b.n	8000834 <LoopCopyDataInit>

0800082e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000832:	3304      	adds	r3, #4

08000834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000838:	d3f9      	bcc.n	800082e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800083c:	4c0a      	ldr	r4, [pc, #40]	; (8000868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000840:	e001      	b.n	8000846 <LoopFillZerobss>

08000842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000844:	3204      	adds	r2, #4

08000846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000848:	d3fb      	bcc.n	8000842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800084a:	f7ff ffe5 	bl	8000818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084e:	f001 fe2d 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000852:	f7ff fc7b 	bl	800014c <main>
  bx lr
 8000856:	4770      	bx	lr
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000860:	080036fc 	.word	0x080036fc
  ldr r2, =_sbss
 8000864:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000868:	20000180 	.word	0x20000180

0800086c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC1_2_IRQHandler>
	...

08000870 <RetargetInit>:


UART_HandleTypeDef *gHuart;

//Initialization function sets the uart handler
void RetargetInit(UART_HandleTypeDef *huart) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <RetargetInit+0x28>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800087e:	4b07      	ldr	r3, [pc, #28]	; (800089c <RetargetInit+0x2c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	6898      	ldr	r0, [r3, #8]
 8000884:	2300      	movs	r3, #0
 8000886:	2202      	movs	r2, #2
 8000888:	2100      	movs	r1, #0
 800088a:	f001 fe53 	bl	8002534 <setvbuf>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000168 	.word	0x20000168
 800089c:	2000000c 	.word	0x2000000c

080008a0 <_write>:

//Definition of the underlying function for std out
int _write(int fd, char* ptr, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <_write+0x38>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	f001 fbe4 	bl	8002086 <HAL_UART_Transmit>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <_write+0x2c>
    	return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	e001      	b.n	80008d0 <_write+0x30>
    else
    	return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000168 	.word	0x20000168

080008dc <_read>:

//Definition of the underlying function for std in
int _read(int fd, char* ptr, int len) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <_read+0x38>)
 80008ea:	6818      	ldr	r0, [r3, #0]
 80008ec:	f04f 33ff 	mov.w	r3, #4294967295
 80008f0:	2201      	movs	r2, #1
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	f001 fc59 	bl	80021aa <HAL_UART_Receive>
 80008f8:	4603      	mov	r3, r0
 80008fa:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <_read+0x2a>
    	return 1;
 8000902:	2301      	movs	r3, #1
 8000904:	e001      	b.n	800090a <_read+0x2e>
    else
    	return -1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000168 	.word	0x20000168

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_Init+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <HAL_Init+0x28>)
 8000922:	f043 0310 	orr.w	r3, r3, #16
 8000926:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000928:	2003      	movs	r0, #3
 800092a:	f000 f923 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	200f      	movs	r0, #15
 8000930:	f000 f808 	bl	8000944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000934:	f7ff fe00 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_InitTick+0x54>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x58>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fbb3 f3f1 	udiv	r3, r3, r1
 800095e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f93b 	bl	8000bde <HAL_SYSTICK_Config>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e00e      	b.n	8000990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d80a      	bhi.n	800098e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f903 	bl	8000b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000984:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <HAL_InitTick+0x5c>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000000 	.word	0x20000000
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a03      	ldr	r2, [pc, #12]	; (80009c4 <HAL_IncTick+0x20>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000008 	.word	0x20000008
 80009c4:	2000016c 	.word	0x2000016c

080009c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	; (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	2000016c 	.word	0x2000016c

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4906      	ldr	r1, [pc, #24]	; (8000a74 <__NVIC_EnableIRQ+0x34>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	; (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	; (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	; 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	; 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	; (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff90 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff2d 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9c:	f7ff ff42 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	6978      	ldr	r0, [r7, #20]
 8000ba8:	f7ff ff90 	bl	8000acc <NVIC_EncodePriority>
 8000bac:	4602      	mov	r2, r0
 8000bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff5f 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff35 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ffa2 	bl	8000b30 <SysTick_Config>
 8000bec:	4603      	mov	r3, r0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b08b      	sub	sp, #44	; 0x2c
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0a:	e169      	b.n	8000ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 8158 	bne.w	8000eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	4a9a      	ldr	r2, [pc, #616]	; (8000e98 <HAL_GPIO_Init+0x2a0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d05e      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c34:	4a98      	ldr	r2, [pc, #608]	; (8000e98 <HAL_GPIO_Init+0x2a0>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d875      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c3a:	4a98      	ldr	r2, [pc, #608]	; (8000e9c <HAL_GPIO_Init+0x2a4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d058      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c40:	4a96      	ldr	r2, [pc, #600]	; (8000e9c <HAL_GPIO_Init+0x2a4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d86f      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c46:	4a96      	ldr	r2, [pc, #600]	; (8000ea0 <HAL_GPIO_Init+0x2a8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d052      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c4c:	4a94      	ldr	r2, [pc, #592]	; (8000ea0 <HAL_GPIO_Init+0x2a8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d869      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c52:	4a94      	ldr	r2, [pc, #592]	; (8000ea4 <HAL_GPIO_Init+0x2ac>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d04c      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c58:	4a92      	ldr	r2, [pc, #584]	; (8000ea4 <HAL_GPIO_Init+0x2ac>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d863      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c5e:	4a92      	ldr	r2, [pc, #584]	; (8000ea8 <HAL_GPIO_Init+0x2b0>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d046      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
 8000c64:	4a90      	ldr	r2, [pc, #576]	; (8000ea8 <HAL_GPIO_Init+0x2b0>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d85d      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c6a:	2b12      	cmp	r3, #18
 8000c6c:	d82a      	bhi.n	8000cc4 <HAL_GPIO_Init+0xcc>
 8000c6e:	2b12      	cmp	r3, #18
 8000c70:	d859      	bhi.n	8000d26 <HAL_GPIO_Init+0x12e>
 8000c72:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <HAL_GPIO_Init+0x80>)
 8000c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c78:	08000cf3 	.word	0x08000cf3
 8000c7c:	08000ccd 	.word	0x08000ccd
 8000c80:	08000cdf 	.word	0x08000cdf
 8000c84:	08000d21 	.word	0x08000d21
 8000c88:	08000d27 	.word	0x08000d27
 8000c8c:	08000d27 	.word	0x08000d27
 8000c90:	08000d27 	.word	0x08000d27
 8000c94:	08000d27 	.word	0x08000d27
 8000c98:	08000d27 	.word	0x08000d27
 8000c9c:	08000d27 	.word	0x08000d27
 8000ca0:	08000d27 	.word	0x08000d27
 8000ca4:	08000d27 	.word	0x08000d27
 8000ca8:	08000d27 	.word	0x08000d27
 8000cac:	08000d27 	.word	0x08000d27
 8000cb0:	08000d27 	.word	0x08000d27
 8000cb4:	08000d27 	.word	0x08000d27
 8000cb8:	08000d27 	.word	0x08000d27
 8000cbc:	08000cd5 	.word	0x08000cd5
 8000cc0:	08000ce9 	.word	0x08000ce9
 8000cc4:	4a79      	ldr	r2, [pc, #484]	; (8000eac <HAL_GPIO_Init+0x2b4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d013      	beq.n	8000cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cca:	e02c      	b.n	8000d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e029      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e024      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	623b      	str	r3, [r7, #32]
          break;
 8000ce6:	e01f      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	330c      	adds	r3, #12
 8000cee:	623b      	str	r3, [r7, #32]
          break;
 8000cf0:	e01a      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	623b      	str	r3, [r7, #32]
          break;
 8000cfe:	e013      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d08:	2308      	movs	r3, #8
 8000d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	611a      	str	r2, [r3, #16]
          break;
 8000d12:	e009      	b.n	8000d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d14:	2308      	movs	r3, #8
 8000d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	615a      	str	r2, [r3, #20]
          break;
 8000d1e:	e003      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x130>
          break;
 8000d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2bff      	cmp	r3, #255	; 0xff
 8000d2c:	d801      	bhi.n	8000d32 <HAL_GPIO_Init+0x13a>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	e001      	b.n	8000d36 <HAL_GPIO_Init+0x13e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3304      	adds	r3, #4
 8000d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	2bff      	cmp	r3, #255	; 0xff
 8000d3c:	d802      	bhi.n	8000d44 <HAL_GPIO_Init+0x14c>
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	e002      	b.n	8000d4a <HAL_GPIO_Init+0x152>
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	3b08      	subs	r3, #8
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	210f      	movs	r1, #15
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	6a39      	ldr	r1, [r7, #32]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	431a      	orrs	r2, r3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 80b1 	beq.w	8000eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d78:	4b4d      	ldr	r3, [pc, #308]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <HAL_GPIO_Init+0x2b8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d90:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_GPIO_Init+0x2c0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d013      	beq.n	8000de4 <HAL_GPIO_Init+0x1ec>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	; (8000ebc <HAL_GPIO_Init+0x2c4>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d00d      	beq.n	8000de0 <HAL_GPIO_Init+0x1e8>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3e      	ldr	r2, [pc, #248]	; (8000ec0 <HAL_GPIO_Init+0x2c8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <HAL_GPIO_Init+0x1e4>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a3d      	ldr	r2, [pc, #244]	; (8000ec4 <HAL_GPIO_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_GPIO_Init+0x1e0>
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e006      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000dd8:	2304      	movs	r3, #4
 8000dda:	e004      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <HAL_GPIO_Init+0x1ee>
 8000de4:	2300      	movs	r3, #0
 8000de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de8:	f002 0203 	and.w	r2, r2, #3
 8000dec:	0092      	lsls	r2, r2, #2
 8000dee:	4093      	lsls	r3, r2
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000df6:	492f      	ldr	r1, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x2bc>)
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d006      	beq.n	8000e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	492c      	ldr	r1, [pc, #176]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	600b      	str	r3, [r1, #0]
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4928      	ldr	r1, [pc, #160]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	4922      	ldr	r1, [pc, #136]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	491e      	ldr	r1, [pc, #120]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	4918      	ldr	r1, [pc, #96]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	608b      	str	r3, [r1, #8]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d021      	beq.n	8000ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	60cb      	str	r3, [r1, #12]
 8000e94:	e021      	b.n	8000eda <HAL_GPIO_Init+0x2e2>
 8000e96:	bf00      	nop
 8000e98:	10320000 	.word	0x10320000
 8000e9c:	10310000 	.word	0x10310000
 8000ea0:	10220000 	.word	0x10220000
 8000ea4:	10210000 	.word	0x10210000
 8000ea8:	10120000 	.word	0x10120000
 8000eac:	10110000 	.word	0x10110000
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	40010800 	.word	0x40010800
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	40011000 	.word	0x40011000
 8000ec4:	40011400 	.word	0x40011400
 8000ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <HAL_GPIO_Init+0x304>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000edc:	3301      	adds	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f47f ae8e 	bne.w	8000c0c <HAL_GPIO_Init+0x14>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	372c      	adds	r7, #44	; 0x2c
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40010400 	.word	0x40010400

08000f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f10:	787b      	ldrb	r3, [r7, #1]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1c:	e003      	b.n	8000f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	041a      	lsls	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	611a      	str	r2, [r3, #16]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e272      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8087 	beq.w	800105e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f50:	4b92      	ldr	r3, [pc, #584]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d00c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
 8000f68:	4b8c      	ldr	r3, [pc, #560]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d10b      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	4b89      	ldr	r3, [pc, #548]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d06c      	beq.n	800105c <HAL_RCC_OscConfig+0x12c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d168      	bne.n	800105c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e24c      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x76>
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e02e      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b7b      	ldr	r3, [pc, #492]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7a      	ldr	r2, [pc, #488]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a77      	ldr	r2, [pc, #476]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01d      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0xbc>
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a71      	ldr	r2, [pc, #452]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6f      	ldr	r3, [pc, #444]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a6a      	ldr	r2, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a67      	ldr	r2, [pc, #412]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcdc 	bl	80009c8 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fcd8 	bl	80009c8 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e200      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0xe4>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fcc8 	bl	80009c8 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcc4 	bl	80009c8 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1ec      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x10c>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d063      	beq.n	8001132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b08      	cmp	r3, #8
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1c0      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4939      	ldr	r1, [pc, #228]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e03a      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fc7d 	bl	80009c8 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc79 	bl	80009c8 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1a1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc5c 	bl	80009c8 <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fc58 	bl	80009c8 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e180      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d03a      	beq.n	80011b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d019      	beq.n	800117a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fc3c 	bl	80009c8 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc38 	bl	80009c8 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e160      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fad8 	bl	8001728 <RCC_Delay>
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc22 	bl	80009c8 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e00f      	b.n	80011a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc1e 	bl	80009c8 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d908      	bls.n	80011a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e146      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	42420000 	.word	0x42420000
 80011a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	4b92      	ldr	r3, [pc, #584]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e9      	bne.n	8001188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a6 	beq.w	800130e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b8b      	ldr	r3, [pc, #556]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b88      	ldr	r3, [pc, #544]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a87      	ldr	r2, [pc, #540]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b85      	ldr	r3, [pc, #532]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fbdf 	bl	80009c8 <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fbdb 	bl	80009c8 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e103      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b75      	ldr	r3, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x4c8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x312>
 8001234:	4b6f      	ldr	r3, [pc, #444]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a6e      	ldr	r2, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e02d      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x334>
 800124a:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a69      	ldr	r2, [pc, #420]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b67      	ldr	r3, [pc, #412]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a66      	ldr	r2, [pc, #408]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x356>
 800126c:	4b61      	ldr	r3, [pc, #388]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a60      	ldr	r2, [pc, #384]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	4b5e      	ldr	r3, [pc, #376]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a5d      	ldr	r2, [pc, #372]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a57      	ldr	r2, [pc, #348]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fb8f 	bl	80009c8 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fb8b 	bl	80009c8 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0b1      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x37e>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb79 	bl	80009c8 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb75 	bl	80009c8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e09b      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8087 	beq.w	8001426 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d061      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d146      	bne.n	80013ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb49 	bl	80009c8 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fb45 	bl	80009c8 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e06d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	4921      	ldr	r1, [pc, #132]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a19      	ldr	r1, [r3, #32]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	430b      	orrs	r3, r1
 8001386:	491b      	ldr	r1, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb19 	bl	80009c8 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb15 	bl	80009c8 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e03d      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x46a>
 80013b8:	e035      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x4cc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb02 	bl	80009c8 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fafe 	bl	80009c8 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e026      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x498>
 80013e6:	e01e      	b.n	8001426 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e019      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40007000 	.word	0x40007000
 80013fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x500>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	429a      	cmp	r2, r3
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000

08001434 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0d0      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b6a      	ldr	r3, [pc, #424]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d910      	bls.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b67      	ldr	r3, [pc, #412]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 0207 	bic.w	r2, r3, #7
 800145e:	4965      	ldr	r1, [pc, #404]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	4313      	orrs	r3, r2
 8001464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0b8      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800149a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	494d      	ldr	r1, [pc, #308]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d040      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d115      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e073      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e06b      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4936      	ldr	r1, [pc, #216]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fa50 	bl	80009c8 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fa4c 	bl	80009c8 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e053      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d210      	bcs.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b24      	ldr	r3, [pc, #144]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 0207 	bic.w	r2, r3, #7
 800156a:	4922      	ldr	r1, [pc, #136]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e032      	b.n	80015ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4916      	ldr	r1, [pc, #88]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f821 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	490a      	ldr	r1, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1cc>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1d0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f9ae 	bl	8000944 <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40022000 	.word	0x40022000
 80015f8:	40021000 	.word	0x40021000
 80015fc:	08003644 	.word	0x08003644
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	b490      	push	{r4, r7}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001610:	1d3c      	adds	r4, r7, #4
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001618:	f240 2301 	movw	r3, #513	; 0x201
 800161c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b04      	cmp	r3, #4
 8001640:	d002      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x40>
 8001642:	2b08      	cmp	r3, #8
 8001644:	d003      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x46>
 8001646:	e02b      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001648:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800164a:	623b      	str	r3, [r7, #32]
      break;
 800164c:	e02b      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3328      	adds	r3, #40	; 0x28
 8001658:	443b      	add	r3, r7
 800165a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800165e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	0c5b      	lsrs	r3, r3, #17
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	3328      	adds	r3, #40	; 0x28
 8001676:	443b      	add	r3, r7
 8001678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800167c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001682:	fb03 f202 	mul.w	r2, r3, r2
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e004      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4a0b      	ldr	r2, [pc, #44]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	623b      	str	r3, [r7, #32]
      break;
 800169e:	e002      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a6:	6a3b      	ldr	r3, [r7, #32]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc90      	pop	{r4, r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	08003634 	.word	0x08003634
 80016b8:	40021000 	.word	0x40021000
 80016bc:	007a1200 	.word	0x007a1200
 80016c0:	003d0900 	.word	0x003d0900

080016c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c8:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016ca:	681b      	ldr	r3, [r3, #0]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000000 	.word	0x20000000

080016d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016dc:	f7ff fff2 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	0a1b      	lsrs	r3, r3, #8
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	4903      	ldr	r1, [pc, #12]	; (80016fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08003654 	.word	0x08003654

08001700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001704:	f7ff ffde 	bl	80016c4 <HAL_RCC_GetHCLKFreq>
 8001708:	4602      	mov	r2, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK2Freq+0x20>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0adb      	lsrs	r3, r3, #11
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4903      	ldr	r1, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000
 8001724:	08003654 	.word	0x08003654

08001728 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <RCC_Delay+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <RCC_Delay+0x38>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	0a5b      	lsrs	r3, r3, #9
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001744:	bf00      	nop
  }
  while (Delay --);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	60fa      	str	r2, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <RCC_Delay+0x1c>
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000000 	.word	0x20000000
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e041      	b.n	80017fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7fe ff06 	bl	800059c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f000 faba 	bl	8001d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d001      	beq.n	800181c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_TIM_Base_Start+0x88>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00e      	beq.n	800184c <HAL_TIM_Base_Start+0x48>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d009      	beq.n	800184c <HAL_TIM_Base_Start+0x48>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <HAL_TIM_Base_Start+0x8c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d004      	beq.n	800184c <HAL_TIM_Base_Start+0x48>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a13      	ldr	r2, [pc, #76]	; (8001894 <HAL_TIM_Base_Start+0x90>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d111      	bne.n	8001870 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d010      	beq.n	8001880 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186e:	e007      	b.n	8001880 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40012c00 	.word	0x40012c00
 8001890:	40000400 	.word	0x40000400
 8001894:	40000800 	.word	0x40000800

08001898 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d001      	beq.n	80018b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e03a      	b.n	8001926 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_TIM_Base_Start_IT+0x98>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00e      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d009      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_TIM_Base_Start_IT+0x9c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x58>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_TIM_Base_Start_IT+0xa0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d010      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001912:	e007      	b.n	8001924 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40012c00 	.word	0x40012c00
 8001934:	40000400 	.word	0x40000400
 8001938:	40000800 	.word	0x40000800

0800193c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b02      	cmp	r3, #2
 8001950:	d122      	bne.n	8001998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d11b      	bne.n	8001998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0202 	mvn.w	r2, #2
 8001968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f9b1 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001984:	e005      	b.n	8001992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f9a4 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f9b3 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d122      	bne.n	80019ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d11b      	bne.n	80019ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f06f 0204 	mvn.w	r2, #4
 80019bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2202      	movs	r2, #2
 80019c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f987 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 80019d8:	e005      	b.n	80019e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f97a 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f989 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d122      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d11b      	bne.n	8001a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f06f 0208 	mvn.w	r2, #8
 8001a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2204      	movs	r2, #4
 8001a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f95d 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001a2c:	e005      	b.n	8001a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f950 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f95f 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	2b10      	cmp	r3, #16
 8001a4c:	d122      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d11b      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0210 	mvn.w	r2, #16
 8001a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f933 	bl	8001ce6 <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f926 	bl	8001cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f935 	bl	8001cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0201 	mvn.w	r2, #1
 8001ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fd16 	bl	80004ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d10e      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b80      	cmp	r3, #128	; 0x80
 8001ada:	d107      	bne.n	8001aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fa77 	bl	8001fda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	2b40      	cmp	r3, #64	; 0x40
 8001af8:	d10e      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b04:	2b40      	cmp	r3, #64	; 0x40
 8001b06:	d107      	bne.n	8001b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8f9 	bl	8001d0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d107      	bne.n	8001b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0220 	mvn.w	r2, #32
 8001b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 fa42 	bl	8001fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_TIM_ConfigClockSource+0x18>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0b3      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x180>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b9c:	d03e      	beq.n	8001c1c <HAL_TIM_ConfigClockSource+0xd0>
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	f200 8087 	bhi.w	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001baa:	f000 8085 	beq.w	8001cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb2:	d87f      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bb4:	2b70      	cmp	r3, #112	; 0x70
 8001bb6:	d01a      	beq.n	8001bee <HAL_TIM_ConfigClockSource+0xa2>
 8001bb8:	2b70      	cmp	r3, #112	; 0x70
 8001bba:	d87b      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bbc:	2b60      	cmp	r3, #96	; 0x60
 8001bbe:	d050      	beq.n	8001c62 <HAL_TIM_ConfigClockSource+0x116>
 8001bc0:	2b60      	cmp	r3, #96	; 0x60
 8001bc2:	d877      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bc4:	2b50      	cmp	r3, #80	; 0x50
 8001bc6:	d03c      	beq.n	8001c42 <HAL_TIM_ConfigClockSource+0xf6>
 8001bc8:	2b50      	cmp	r3, #80	; 0x50
 8001bca:	d873      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bcc:	2b40      	cmp	r3, #64	; 0x40
 8001bce:	d058      	beq.n	8001c82 <HAL_TIM_ConfigClockSource+0x136>
 8001bd0:	2b40      	cmp	r3, #64	; 0x40
 8001bd2:	d86f      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bd4:	2b30      	cmp	r3, #48	; 0x30
 8001bd6:	d064      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x156>
 8001bd8:	2b30      	cmp	r3, #48	; 0x30
 8001bda:	d86b      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d060      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x156>
 8001be0:	2b20      	cmp	r3, #32
 8001be2:	d867      	bhi.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d05c      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x156>
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d05a      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001bec:	e062      	b.n	8001cb4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f000 f966 	bl	8001ece <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	609a      	str	r2, [r3, #8]
      break;
 8001c1a:	e04e      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f000 f94f 	bl	8001ece <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c3e:	609a      	str	r2, [r3, #8]
      break;
 8001c40:	e03b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f000 f8c6 	bl	8001de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2150      	movs	r1, #80	; 0x50
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f91d 	bl	8001e9a <TIM_ITRx_SetConfig>
      break;
 8001c60:	e02b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f000 f8e4 	bl	8001e3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2160      	movs	r1, #96	; 0x60
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f90d 	bl	8001e9a <TIM_ITRx_SetConfig>
      break;
 8001c80:	e01b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	6859      	ldr	r1, [r3, #4]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f000 f8a6 	bl	8001de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f8fd 	bl	8001e9a <TIM_ITRx_SetConfig>
      break;
 8001ca0:	e00b      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f000 f8f4 	bl	8001e9a <TIM_ITRx_SetConfig>
        break;
 8001cb2:	e002      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cb4:	bf00      	nop
 8001cb6:	e000      	b.n	8001cba <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001cb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <TIM_Base_SetConfig+0xb8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00b      	beq.n	8001d4c <TIM_Base_SetConfig+0x30>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3a:	d007      	beq.n	8001d4c <TIM_Base_SetConfig+0x30>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <TIM_Base_SetConfig+0xbc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d003      	beq.n	8001d4c <TIM_Base_SetConfig+0x30>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a25      	ldr	r2, [pc, #148]	; (8001ddc <TIM_Base_SetConfig+0xc0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d108      	bne.n	8001d5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <TIM_Base_SetConfig+0xb8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00b      	beq.n	8001d7e <TIM_Base_SetConfig+0x62>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6c:	d007      	beq.n	8001d7e <TIM_Base_SetConfig+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <TIM_Base_SetConfig+0xbc>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d003      	beq.n	8001d7e <TIM_Base_SetConfig+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <TIM_Base_SetConfig+0xc0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d108      	bne.n	8001d90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <TIM_Base_SetConfig+0xb8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d103      	bne.n	8001dc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	615a      	str	r2, [r3, #20]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800

08001de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	f023 0201 	bic.w	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f023 030a 	bic.w	r3, r3, #10
 8001e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	621a      	str	r2, [r3, #32]
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f023 0210 	bic.w	r2, r3, #16
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	031b      	lsls	r3, r3, #12
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	621a      	str	r2, [r3, #32]
}
 8001e90:	bf00      	nop
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f043 0307 	orr.w	r3, r3, #7
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	609a      	str	r2, [r3, #8]
}
 8001f02:	bf00      	nop
 8001f04:	371c      	adds	r7, #28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e046      	b.n	8001fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f70:	d009      	beq.n	8001f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d10c      	bne.n	8001fa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40000800 	.word	0x40000800

08001fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr

08001fda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e03f      	b.n	800207e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d106      	bne.n	8002018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7fe fb1c 	bl	8000650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2224      	movs	r2, #36	; 0x24
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800202e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f9a7 	bl	8002384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b08a      	sub	sp, #40	; 0x28
 800208a:	af02      	add	r7, sp, #8
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4613      	mov	r3, r2
 8002094:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d17c      	bne.n	80021a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_UART_Transmit+0x2c>
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e075      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_UART_Transmit+0x3e>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e06e      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2221      	movs	r2, #33	; 0x21
 80020d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020da:	f7fe fc75 	bl	80009c8 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d108      	bne.n	8002108 <HAL_UART_Transmit+0x82>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	e003      	b.n	8002110 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002118:	e02a      	b.n	8002170 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f8e2 	bl	80022ee <UART_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e036      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10b      	bne.n	8002152 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002148:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	3302      	adds	r3, #2
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e007      	b.n	8002162 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	3301      	adds	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002166:	b29b      	uxth	r3, r3
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1cf      	bne.n	800211a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 f8b2 	bl	80022ee <UART_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e006      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	e000      	b.n	80021a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021a0:	2302      	movs	r3, #2
  }
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b08a      	sub	sp, #40	; 0x28
 80021ae:	af02      	add	r7, sp, #8
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	f040 808c 	bne.w	80022e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_UART_Receive+0x2e>
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e084      	b.n	80022e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Receive+0x40>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e07d      	b.n	80022e6 <HAL_UART_Receive+0x13c>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2222      	movs	r2, #34	; 0x22
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002206:	f7fe fbdf 	bl	80009c8 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	88fa      	ldrh	r2, [r7, #6]
 8002210:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002220:	d108      	bne.n	8002234 <HAL_UART_Receive+0x8a>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d104      	bne.n	8002234 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e003      	b.n	800223c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002244:	e043      	b.n	80022ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2200      	movs	r2, #0
 800224e:	2120      	movs	r1, #32
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f84c 	bl	80022ee <UART_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e042      	b.n	80022e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	b29b      	uxth	r3, r3
 800226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002272:	b29a      	uxth	r2, r3
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	3302      	adds	r3, #2
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	e01f      	b.n	80022c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002288:	d007      	beq.n	800229a <HAL_UART_Receive+0xf0>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_UART_Receive+0xfe>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e008      	b.n	80022ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1b6      	bne.n	8002246 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e000      	b.n	80022e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022e4:	2302      	movs	r3, #2
  }
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3720      	adds	r7, #32
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b084      	sub	sp, #16
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fe:	e02c      	b.n	800235a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002306:	d028      	beq.n	800235a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d007      	beq.n	800231e <UART_WaitOnFlagUntilTimeout+0x30>
 800230e:	f7fe fb5b 	bl	80009c8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	429a      	cmp	r2, r3
 800231c:	d21d      	bcs.n	800235a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800232c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e00f      	b.n	800237a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4013      	ands	r3, r2
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	bf0c      	ite	eq
 800236a:	2301      	moveq	r3, #1
 800236c:	2300      	movne	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	429a      	cmp	r2, r3
 8002376:	d0c3      	beq.n	8002300 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023be:	f023 030c 	bic.w	r3, r3, #12
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	430b      	orrs	r3, r1
 80023ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2c      	ldr	r2, [pc, #176]	; (8002498 <UART_SetConfig+0x114>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023ec:	f7ff f988 	bl	8001700 <HAL_RCC_GetPCLK2Freq>
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	e002      	b.n	80023fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff f970 	bl	80016d8 <HAL_RCC_GetPCLK1Freq>
 80023f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	441a      	add	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	4a22      	ldr	r2, [pc, #136]	; (800249c <UART_SetConfig+0x118>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	0119      	lsls	r1, r3, #4
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	009a      	lsls	r2, r3, #2
 8002424:	441a      	add	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <UART_SetConfig+0x118>)
 8002432:	fba3 0302 	umull	r0, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2064      	movs	r0, #100	; 0x64
 800243a:	fb00 f303 	mul.w	r3, r0, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	3332      	adds	r3, #50	; 0x32
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <UART_SetConfig+0x118>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	4419      	add	r1, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <UART_SetConfig+0x118>)
 800246a:	fba3 0302 	umull	r0, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2064      	movs	r0, #100	; 0x64
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	; 0x32
 800247c:	4a07      	ldr	r2, [pc, #28]	; (800249c <UART_SetConfig+0x118>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 020f 	and.w	r2, r3, #15
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	440a      	add	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40013800 	.word	0x40013800
 800249c:	51eb851f 	.word	0x51eb851f

080024a0 <__errno>:
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <__errno+0x8>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	2000000c 	.word	0x2000000c

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	2600      	movs	r6, #0
 80024b0:	4d0c      	ldr	r5, [pc, #48]	; (80024e4 <__libc_init_array+0x38>)
 80024b2:	4c0d      	ldr	r4, [pc, #52]	; (80024e8 <__libc_init_array+0x3c>)
 80024b4:	1b64      	subs	r4, r4, r5
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	42a6      	cmp	r6, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	f001 f884 	bl	80035c8 <_init>
 80024c0:	2600      	movs	r6, #0
 80024c2:	4d0a      	ldr	r5, [pc, #40]	; (80024ec <__libc_init_array+0x40>)
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <__libc_init_array+0x44>)
 80024c6:	1b64      	subs	r4, r4, r5
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d4:	4798      	blx	r3
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	f855 3b04 	ldr.w	r3, [r5], #4
 80024de:	4798      	blx	r3
 80024e0:	3601      	adds	r6, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	080036f4 	.word	0x080036f4
 80024e8:	080036f4 	.word	0x080036f4
 80024ec:	080036f4 	.word	0x080036f4
 80024f0:	080036f8 	.word	0x080036f8

080024f4 <memset>:
 80024f4:	4603      	mov	r3, r0
 80024f6:	4402      	add	r2, r0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <memset+0xa>
 80024fc:	4770      	bx	lr
 80024fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002502:	e7f9      	b.n	80024f8 <memset+0x4>

08002504 <iprintf>:
 8002504:	b40f      	push	{r0, r1, r2, r3}
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <iprintf+0x2c>)
 8002508:	b513      	push	{r0, r1, r4, lr}
 800250a:	681c      	ldr	r4, [r3, #0]
 800250c:	b124      	cbz	r4, 8002518 <iprintf+0x14>
 800250e:	69a3      	ldr	r3, [r4, #24]
 8002510:	b913      	cbnz	r3, 8002518 <iprintf+0x14>
 8002512:	4620      	mov	r0, r4
 8002514:	f000 f9ea 	bl	80028ec <__sinit>
 8002518:	ab05      	add	r3, sp, #20
 800251a:	4620      	mov	r0, r4
 800251c:	9a04      	ldr	r2, [sp, #16]
 800251e:	68a1      	ldr	r1, [r4, #8]
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	f000 fbf5 	bl	8002d10 <_vfiprintf_r>
 8002526:	b002      	add	sp, #8
 8002528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800252c:	b004      	add	sp, #16
 800252e:	4770      	bx	lr
 8002530:	2000000c 	.word	0x2000000c

08002534 <setvbuf>:
 8002534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002538:	461d      	mov	r5, r3
 800253a:	4b5d      	ldr	r3, [pc, #372]	; (80026b0 <setvbuf+0x17c>)
 800253c:	4604      	mov	r4, r0
 800253e:	681f      	ldr	r7, [r3, #0]
 8002540:	460e      	mov	r6, r1
 8002542:	4690      	mov	r8, r2
 8002544:	b127      	cbz	r7, 8002550 <setvbuf+0x1c>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	b913      	cbnz	r3, 8002550 <setvbuf+0x1c>
 800254a:	4638      	mov	r0, r7
 800254c:	f000 f9ce 	bl	80028ec <__sinit>
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <setvbuf+0x180>)
 8002552:	429c      	cmp	r4, r3
 8002554:	d167      	bne.n	8002626 <setvbuf+0xf2>
 8002556:	687c      	ldr	r4, [r7, #4]
 8002558:	f1b8 0f02 	cmp.w	r8, #2
 800255c:	d006      	beq.n	800256c <setvbuf+0x38>
 800255e:	f1b8 0f01 	cmp.w	r8, #1
 8002562:	f200 809f 	bhi.w	80026a4 <setvbuf+0x170>
 8002566:	2d00      	cmp	r5, #0
 8002568:	f2c0 809c 	blt.w	80026a4 <setvbuf+0x170>
 800256c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800256e:	07db      	lsls	r3, r3, #31
 8002570:	d405      	bmi.n	800257e <setvbuf+0x4a>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	0598      	lsls	r0, r3, #22
 8002576:	d402      	bmi.n	800257e <setvbuf+0x4a>
 8002578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800257a:	f000 fa55 	bl	8002a28 <__retarget_lock_acquire_recursive>
 800257e:	4621      	mov	r1, r4
 8002580:	4638      	mov	r0, r7
 8002582:	f000 f91f 	bl	80027c4 <_fflush_r>
 8002586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002588:	b141      	cbz	r1, 800259c <setvbuf+0x68>
 800258a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800258e:	4299      	cmp	r1, r3
 8002590:	d002      	beq.n	8002598 <setvbuf+0x64>
 8002592:	4638      	mov	r0, r7
 8002594:	f000 fab8 	bl	8002b08 <_free_r>
 8002598:	2300      	movs	r3, #0
 800259a:	6363      	str	r3, [r4, #52]	; 0x34
 800259c:	2300      	movs	r3, #0
 800259e:	61a3      	str	r3, [r4, #24]
 80025a0:	6063      	str	r3, [r4, #4]
 80025a2:	89a3      	ldrh	r3, [r4, #12]
 80025a4:	0619      	lsls	r1, r3, #24
 80025a6:	d503      	bpl.n	80025b0 <setvbuf+0x7c>
 80025a8:	4638      	mov	r0, r7
 80025aa:	6921      	ldr	r1, [r4, #16]
 80025ac:	f000 faac 	bl	8002b08 <_free_r>
 80025b0:	89a3      	ldrh	r3, [r4, #12]
 80025b2:	f1b8 0f02 	cmp.w	r8, #2
 80025b6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	81a3      	strh	r3, [r4, #12]
 80025c0:	d06c      	beq.n	800269c <setvbuf+0x168>
 80025c2:	ab01      	add	r3, sp, #4
 80025c4:	466a      	mov	r2, sp
 80025c6:	4621      	mov	r1, r4
 80025c8:	4638      	mov	r0, r7
 80025ca:	f000 fa2f 	bl	8002a2c <__swhatbuf_r>
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	4318      	orrs	r0, r3
 80025d2:	81a0      	strh	r0, [r4, #12]
 80025d4:	2d00      	cmp	r5, #0
 80025d6:	d130      	bne.n	800263a <setvbuf+0x106>
 80025d8:	9d00      	ldr	r5, [sp, #0]
 80025da:	4628      	mov	r0, r5
 80025dc:	f000 fa8c 	bl	8002af8 <malloc>
 80025e0:	4606      	mov	r6, r0
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d155      	bne.n	8002692 <setvbuf+0x15e>
 80025e6:	f8dd 9000 	ldr.w	r9, [sp]
 80025ea:	45a9      	cmp	r9, r5
 80025ec:	d14a      	bne.n	8002684 <setvbuf+0x150>
 80025ee:	f04f 35ff 	mov.w	r5, #4294967295
 80025f2:	2200      	movs	r2, #0
 80025f4:	60a2      	str	r2, [r4, #8]
 80025f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80025fa:	6022      	str	r2, [r4, #0]
 80025fc:	6122      	str	r2, [r4, #16]
 80025fe:	2201      	movs	r2, #1
 8002600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002604:	6162      	str	r2, [r4, #20]
 8002606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002608:	f043 0302 	orr.w	r3, r3, #2
 800260c:	07d2      	lsls	r2, r2, #31
 800260e:	81a3      	strh	r3, [r4, #12]
 8002610:	d405      	bmi.n	800261e <setvbuf+0xea>
 8002612:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002616:	d102      	bne.n	800261e <setvbuf+0xea>
 8002618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800261a:	f000 fa06 	bl	8002a2a <__retarget_lock_release_recursive>
 800261e:	4628      	mov	r0, r5
 8002620:	b003      	add	sp, #12
 8002622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <setvbuf+0x184>)
 8002628:	429c      	cmp	r4, r3
 800262a:	d101      	bne.n	8002630 <setvbuf+0xfc>
 800262c:	68bc      	ldr	r4, [r7, #8]
 800262e:	e793      	b.n	8002558 <setvbuf+0x24>
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <setvbuf+0x188>)
 8002632:	429c      	cmp	r4, r3
 8002634:	bf08      	it	eq
 8002636:	68fc      	ldreq	r4, [r7, #12]
 8002638:	e78e      	b.n	8002558 <setvbuf+0x24>
 800263a:	2e00      	cmp	r6, #0
 800263c:	d0cd      	beq.n	80025da <setvbuf+0xa6>
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	b913      	cbnz	r3, 8002648 <setvbuf+0x114>
 8002642:	4638      	mov	r0, r7
 8002644:	f000 f952 	bl	80028ec <__sinit>
 8002648:	f1b8 0f01 	cmp.w	r8, #1
 800264c:	bf08      	it	eq
 800264e:	89a3      	ldrheq	r3, [r4, #12]
 8002650:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8002654:	bf04      	itt	eq
 8002656:	f043 0301 	orreq.w	r3, r3, #1
 800265a:	81a3      	strheq	r3, [r4, #12]
 800265c:	89a2      	ldrh	r2, [r4, #12]
 800265e:	6026      	str	r6, [r4, #0]
 8002660:	f012 0308 	ands.w	r3, r2, #8
 8002664:	d01c      	beq.n	80026a0 <setvbuf+0x16c>
 8002666:	07d3      	lsls	r3, r2, #31
 8002668:	bf41      	itttt	mi
 800266a:	2300      	movmi	r3, #0
 800266c:	426d      	negmi	r5, r5
 800266e:	60a3      	strmi	r3, [r4, #8]
 8002670:	61a5      	strmi	r5, [r4, #24]
 8002672:	bf58      	it	pl
 8002674:	60a5      	strpl	r5, [r4, #8]
 8002676:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002678:	f015 0501 	ands.w	r5, r5, #1
 800267c:	d115      	bne.n	80026aa <setvbuf+0x176>
 800267e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002682:	e7c8      	b.n	8002616 <setvbuf+0xe2>
 8002684:	4648      	mov	r0, r9
 8002686:	f000 fa37 	bl	8002af8 <malloc>
 800268a:	4606      	mov	r6, r0
 800268c:	2800      	cmp	r0, #0
 800268e:	d0ae      	beq.n	80025ee <setvbuf+0xba>
 8002690:	464d      	mov	r5, r9
 8002692:	89a3      	ldrh	r3, [r4, #12]
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	81a3      	strh	r3, [r4, #12]
 800269a:	e7d0      	b.n	800263e <setvbuf+0x10a>
 800269c:	2500      	movs	r5, #0
 800269e:	e7a8      	b.n	80025f2 <setvbuf+0xbe>
 80026a0:	60a3      	str	r3, [r4, #8]
 80026a2:	e7e8      	b.n	8002676 <setvbuf+0x142>
 80026a4:	f04f 35ff 	mov.w	r5, #4294967295
 80026a8:	e7b9      	b.n	800261e <setvbuf+0xea>
 80026aa:	2500      	movs	r5, #0
 80026ac:	e7b7      	b.n	800261e <setvbuf+0xea>
 80026ae:	bf00      	nop
 80026b0:	2000000c 	.word	0x2000000c
 80026b4:	08003680 	.word	0x08003680
 80026b8:	080036a0 	.word	0x080036a0
 80026bc:	08003660 	.word	0x08003660

080026c0 <__sflush_r>:
 80026c0:	898a      	ldrh	r2, [r1, #12]
 80026c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c4:	4605      	mov	r5, r0
 80026c6:	0710      	lsls	r0, r2, #28
 80026c8:	460c      	mov	r4, r1
 80026ca:	d457      	bmi.n	800277c <__sflush_r+0xbc>
 80026cc:	684b      	ldr	r3, [r1, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	dc04      	bgt.n	80026dc <__sflush_r+0x1c>
 80026d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	dc01      	bgt.n	80026dc <__sflush_r+0x1c>
 80026d8:	2000      	movs	r0, #0
 80026da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80026de:	2e00      	cmp	r6, #0
 80026e0:	d0fa      	beq.n	80026d8 <__sflush_r+0x18>
 80026e2:	2300      	movs	r3, #0
 80026e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80026e8:	682f      	ldr	r7, [r5, #0]
 80026ea:	602b      	str	r3, [r5, #0]
 80026ec:	d032      	beq.n	8002754 <__sflush_r+0x94>
 80026ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80026f0:	89a3      	ldrh	r3, [r4, #12]
 80026f2:	075a      	lsls	r2, r3, #29
 80026f4:	d505      	bpl.n	8002702 <__sflush_r+0x42>
 80026f6:	6863      	ldr	r3, [r4, #4]
 80026f8:	1ac0      	subs	r0, r0, r3
 80026fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026fc:	b10b      	cbz	r3, 8002702 <__sflush_r+0x42>
 80026fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002700:	1ac0      	subs	r0, r0, r3
 8002702:	2300      	movs	r3, #0
 8002704:	4602      	mov	r2, r0
 8002706:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002708:	4628      	mov	r0, r5
 800270a:	6a21      	ldr	r1, [r4, #32]
 800270c:	47b0      	blx	r6
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	d106      	bne.n	8002722 <__sflush_r+0x62>
 8002714:	6829      	ldr	r1, [r5, #0]
 8002716:	291d      	cmp	r1, #29
 8002718:	d82c      	bhi.n	8002774 <__sflush_r+0xb4>
 800271a:	4a29      	ldr	r2, [pc, #164]	; (80027c0 <__sflush_r+0x100>)
 800271c:	40ca      	lsrs	r2, r1
 800271e:	07d6      	lsls	r6, r2, #31
 8002720:	d528      	bpl.n	8002774 <__sflush_r+0xb4>
 8002722:	2200      	movs	r2, #0
 8002724:	6062      	str	r2, [r4, #4]
 8002726:	6922      	ldr	r2, [r4, #16]
 8002728:	04d9      	lsls	r1, r3, #19
 800272a:	6022      	str	r2, [r4, #0]
 800272c:	d504      	bpl.n	8002738 <__sflush_r+0x78>
 800272e:	1c42      	adds	r2, r0, #1
 8002730:	d101      	bne.n	8002736 <__sflush_r+0x76>
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	b903      	cbnz	r3, 8002738 <__sflush_r+0x78>
 8002736:	6560      	str	r0, [r4, #84]	; 0x54
 8002738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800273a:	602f      	str	r7, [r5, #0]
 800273c:	2900      	cmp	r1, #0
 800273e:	d0cb      	beq.n	80026d8 <__sflush_r+0x18>
 8002740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002744:	4299      	cmp	r1, r3
 8002746:	d002      	beq.n	800274e <__sflush_r+0x8e>
 8002748:	4628      	mov	r0, r5
 800274a:	f000 f9dd 	bl	8002b08 <_free_r>
 800274e:	2000      	movs	r0, #0
 8002750:	6360      	str	r0, [r4, #52]	; 0x34
 8002752:	e7c2      	b.n	80026da <__sflush_r+0x1a>
 8002754:	6a21      	ldr	r1, [r4, #32]
 8002756:	2301      	movs	r3, #1
 8002758:	4628      	mov	r0, r5
 800275a:	47b0      	blx	r6
 800275c:	1c41      	adds	r1, r0, #1
 800275e:	d1c7      	bne.n	80026f0 <__sflush_r+0x30>
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0c4      	beq.n	80026f0 <__sflush_r+0x30>
 8002766:	2b1d      	cmp	r3, #29
 8002768:	d001      	beq.n	800276e <__sflush_r+0xae>
 800276a:	2b16      	cmp	r3, #22
 800276c:	d101      	bne.n	8002772 <__sflush_r+0xb2>
 800276e:	602f      	str	r7, [r5, #0]
 8002770:	e7b2      	b.n	80026d8 <__sflush_r+0x18>
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002778:	81a3      	strh	r3, [r4, #12]
 800277a:	e7ae      	b.n	80026da <__sflush_r+0x1a>
 800277c:	690f      	ldr	r7, [r1, #16]
 800277e:	2f00      	cmp	r7, #0
 8002780:	d0aa      	beq.n	80026d8 <__sflush_r+0x18>
 8002782:	0793      	lsls	r3, r2, #30
 8002784:	bf18      	it	ne
 8002786:	2300      	movne	r3, #0
 8002788:	680e      	ldr	r6, [r1, #0]
 800278a:	bf08      	it	eq
 800278c:	694b      	ldreq	r3, [r1, #20]
 800278e:	1bf6      	subs	r6, r6, r7
 8002790:	600f      	str	r7, [r1, #0]
 8002792:	608b      	str	r3, [r1, #8]
 8002794:	2e00      	cmp	r6, #0
 8002796:	dd9f      	ble.n	80026d8 <__sflush_r+0x18>
 8002798:	4633      	mov	r3, r6
 800279a:	463a      	mov	r2, r7
 800279c:	4628      	mov	r0, r5
 800279e:	6a21      	ldr	r1, [r4, #32]
 80027a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80027a4:	47e0      	blx	ip
 80027a6:	2800      	cmp	r0, #0
 80027a8:	dc06      	bgt.n	80027b8 <__sflush_r+0xf8>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b4:	81a3      	strh	r3, [r4, #12]
 80027b6:	e790      	b.n	80026da <__sflush_r+0x1a>
 80027b8:	4407      	add	r7, r0
 80027ba:	1a36      	subs	r6, r6, r0
 80027bc:	e7ea      	b.n	8002794 <__sflush_r+0xd4>
 80027be:	bf00      	nop
 80027c0:	20400001 	.word	0x20400001

080027c4 <_fflush_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	690b      	ldr	r3, [r1, #16]
 80027c8:	4605      	mov	r5, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	b913      	cbnz	r3, 80027d4 <_fflush_r+0x10>
 80027ce:	2500      	movs	r5, #0
 80027d0:	4628      	mov	r0, r5
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	b118      	cbz	r0, 80027de <_fflush_r+0x1a>
 80027d6:	6983      	ldr	r3, [r0, #24]
 80027d8:	b90b      	cbnz	r3, 80027de <_fflush_r+0x1a>
 80027da:	f000 f887 	bl	80028ec <__sinit>
 80027de:	4b14      	ldr	r3, [pc, #80]	; (8002830 <_fflush_r+0x6c>)
 80027e0:	429c      	cmp	r4, r3
 80027e2:	d11b      	bne.n	800281c <_fflush_r+0x58>
 80027e4:	686c      	ldr	r4, [r5, #4]
 80027e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ef      	beq.n	80027ce <_fflush_r+0xa>
 80027ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80027f0:	07d0      	lsls	r0, r2, #31
 80027f2:	d404      	bmi.n	80027fe <_fflush_r+0x3a>
 80027f4:	0599      	lsls	r1, r3, #22
 80027f6:	d402      	bmi.n	80027fe <_fflush_r+0x3a>
 80027f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027fa:	f000 f915 	bl	8002a28 <__retarget_lock_acquire_recursive>
 80027fe:	4628      	mov	r0, r5
 8002800:	4621      	mov	r1, r4
 8002802:	f7ff ff5d 	bl	80026c0 <__sflush_r>
 8002806:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002808:	4605      	mov	r5, r0
 800280a:	07da      	lsls	r2, r3, #31
 800280c:	d4e0      	bmi.n	80027d0 <_fflush_r+0xc>
 800280e:	89a3      	ldrh	r3, [r4, #12]
 8002810:	059b      	lsls	r3, r3, #22
 8002812:	d4dd      	bmi.n	80027d0 <_fflush_r+0xc>
 8002814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002816:	f000 f908 	bl	8002a2a <__retarget_lock_release_recursive>
 800281a:	e7d9      	b.n	80027d0 <_fflush_r+0xc>
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <_fflush_r+0x70>)
 800281e:	429c      	cmp	r4, r3
 8002820:	d101      	bne.n	8002826 <_fflush_r+0x62>
 8002822:	68ac      	ldr	r4, [r5, #8]
 8002824:	e7df      	b.n	80027e6 <_fflush_r+0x22>
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <_fflush_r+0x74>)
 8002828:	429c      	cmp	r4, r3
 800282a:	bf08      	it	eq
 800282c:	68ec      	ldreq	r4, [r5, #12]
 800282e:	e7da      	b.n	80027e6 <_fflush_r+0x22>
 8002830:	08003680 	.word	0x08003680
 8002834:	080036a0 	.word	0x080036a0
 8002838:	08003660 	.word	0x08003660

0800283c <std>:
 800283c:	2300      	movs	r3, #0
 800283e:	b510      	push	{r4, lr}
 8002840:	4604      	mov	r4, r0
 8002842:	e9c0 3300 	strd	r3, r3, [r0]
 8002846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800284a:	6083      	str	r3, [r0, #8]
 800284c:	8181      	strh	r1, [r0, #12]
 800284e:	6643      	str	r3, [r0, #100]	; 0x64
 8002850:	81c2      	strh	r2, [r0, #14]
 8002852:	6183      	str	r3, [r0, #24]
 8002854:	4619      	mov	r1, r3
 8002856:	2208      	movs	r2, #8
 8002858:	305c      	adds	r0, #92	; 0x5c
 800285a:	f7ff fe4b 	bl	80024f4 <memset>
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <std+0x38>)
 8002860:	6224      	str	r4, [r4, #32]
 8002862:	6263      	str	r3, [r4, #36]	; 0x24
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <std+0x3c>)
 8002866:	62a3      	str	r3, [r4, #40]	; 0x28
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <std+0x40>)
 800286a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <std+0x44>)
 800286e:	6323      	str	r3, [r4, #48]	; 0x30
 8002870:	bd10      	pop	{r4, pc}
 8002872:	bf00      	nop
 8002874:	080032bd 	.word	0x080032bd
 8002878:	080032df 	.word	0x080032df
 800287c:	08003317 	.word	0x08003317
 8002880:	0800333b 	.word	0x0800333b

08002884 <_cleanup_r>:
 8002884:	4901      	ldr	r1, [pc, #4]	; (800288c <_cleanup_r+0x8>)
 8002886:	f000 b8af 	b.w	80029e8 <_fwalk_reent>
 800288a:	bf00      	nop
 800288c:	080027c5 	.word	0x080027c5

08002890 <__sfmoreglue>:
 8002890:	2268      	movs	r2, #104	; 0x68
 8002892:	b570      	push	{r4, r5, r6, lr}
 8002894:	1e4d      	subs	r5, r1, #1
 8002896:	4355      	muls	r5, r2
 8002898:	460e      	mov	r6, r1
 800289a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800289e:	f000 f99b 	bl	8002bd8 <_malloc_r>
 80028a2:	4604      	mov	r4, r0
 80028a4:	b140      	cbz	r0, 80028b8 <__sfmoreglue+0x28>
 80028a6:	2100      	movs	r1, #0
 80028a8:	e9c0 1600 	strd	r1, r6, [r0]
 80028ac:	300c      	adds	r0, #12
 80028ae:	60a0      	str	r0, [r4, #8]
 80028b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028b4:	f7ff fe1e 	bl	80024f4 <memset>
 80028b8:	4620      	mov	r0, r4
 80028ba:	bd70      	pop	{r4, r5, r6, pc}

080028bc <__sfp_lock_acquire>:
 80028bc:	4801      	ldr	r0, [pc, #4]	; (80028c4 <__sfp_lock_acquire+0x8>)
 80028be:	f000 b8b3 	b.w	8002a28 <__retarget_lock_acquire_recursive>
 80028c2:	bf00      	nop
 80028c4:	20000171 	.word	0x20000171

080028c8 <__sfp_lock_release>:
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <__sfp_lock_release+0x8>)
 80028ca:	f000 b8ae 	b.w	8002a2a <__retarget_lock_release_recursive>
 80028ce:	bf00      	nop
 80028d0:	20000171 	.word	0x20000171

080028d4 <__sinit_lock_acquire>:
 80028d4:	4801      	ldr	r0, [pc, #4]	; (80028dc <__sinit_lock_acquire+0x8>)
 80028d6:	f000 b8a7 	b.w	8002a28 <__retarget_lock_acquire_recursive>
 80028da:	bf00      	nop
 80028dc:	20000172 	.word	0x20000172

080028e0 <__sinit_lock_release>:
 80028e0:	4801      	ldr	r0, [pc, #4]	; (80028e8 <__sinit_lock_release+0x8>)
 80028e2:	f000 b8a2 	b.w	8002a2a <__retarget_lock_release_recursive>
 80028e6:	bf00      	nop
 80028e8:	20000172 	.word	0x20000172

080028ec <__sinit>:
 80028ec:	b510      	push	{r4, lr}
 80028ee:	4604      	mov	r4, r0
 80028f0:	f7ff fff0 	bl	80028d4 <__sinit_lock_acquire>
 80028f4:	69a3      	ldr	r3, [r4, #24]
 80028f6:	b11b      	cbz	r3, 8002900 <__sinit+0x14>
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	f7ff bff0 	b.w	80028e0 <__sinit_lock_release>
 8002900:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002904:	6523      	str	r3, [r4, #80]	; 0x50
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <__sinit+0x68>)
 8002908:	4a13      	ldr	r2, [pc, #76]	; (8002958 <__sinit+0x6c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	62a2      	str	r2, [r4, #40]	; 0x28
 800290e:	42a3      	cmp	r3, r4
 8002910:	bf08      	it	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	4620      	mov	r0, r4
 8002916:	bf08      	it	eq
 8002918:	61a3      	streq	r3, [r4, #24]
 800291a:	f000 f81f 	bl	800295c <__sfp>
 800291e:	6060      	str	r0, [r4, #4]
 8002920:	4620      	mov	r0, r4
 8002922:	f000 f81b 	bl	800295c <__sfp>
 8002926:	60a0      	str	r0, [r4, #8]
 8002928:	4620      	mov	r0, r4
 800292a:	f000 f817 	bl	800295c <__sfp>
 800292e:	2200      	movs	r2, #0
 8002930:	2104      	movs	r1, #4
 8002932:	60e0      	str	r0, [r4, #12]
 8002934:	6860      	ldr	r0, [r4, #4]
 8002936:	f7ff ff81 	bl	800283c <std>
 800293a:	2201      	movs	r2, #1
 800293c:	2109      	movs	r1, #9
 800293e:	68a0      	ldr	r0, [r4, #8]
 8002940:	f7ff ff7c 	bl	800283c <std>
 8002944:	2202      	movs	r2, #2
 8002946:	2112      	movs	r1, #18
 8002948:	68e0      	ldr	r0, [r4, #12]
 800294a:	f7ff ff77 	bl	800283c <std>
 800294e:	2301      	movs	r3, #1
 8002950:	61a3      	str	r3, [r4, #24]
 8002952:	e7d1      	b.n	80028f8 <__sinit+0xc>
 8002954:	0800365c 	.word	0x0800365c
 8002958:	08002885 	.word	0x08002885

0800295c <__sfp>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	4607      	mov	r7, r0
 8002960:	f7ff ffac 	bl	80028bc <__sfp_lock_acquire>
 8002964:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <__sfp+0x84>)
 8002966:	681e      	ldr	r6, [r3, #0]
 8002968:	69b3      	ldr	r3, [r6, #24]
 800296a:	b913      	cbnz	r3, 8002972 <__sfp+0x16>
 800296c:	4630      	mov	r0, r6
 800296e:	f7ff ffbd 	bl	80028ec <__sinit>
 8002972:	3648      	adds	r6, #72	; 0x48
 8002974:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002978:	3b01      	subs	r3, #1
 800297a:	d503      	bpl.n	8002984 <__sfp+0x28>
 800297c:	6833      	ldr	r3, [r6, #0]
 800297e:	b30b      	cbz	r3, 80029c4 <__sfp+0x68>
 8002980:	6836      	ldr	r6, [r6, #0]
 8002982:	e7f7      	b.n	8002974 <__sfp+0x18>
 8002984:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002988:	b9d5      	cbnz	r5, 80029c0 <__sfp+0x64>
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <__sfp+0x88>)
 800298c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002990:	60e3      	str	r3, [r4, #12]
 8002992:	6665      	str	r5, [r4, #100]	; 0x64
 8002994:	f000 f847 	bl	8002a26 <__retarget_lock_init_recursive>
 8002998:	f7ff ff96 	bl	80028c8 <__sfp_lock_release>
 800299c:	2208      	movs	r2, #8
 800299e:	4629      	mov	r1, r5
 80029a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80029a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80029a8:	6025      	str	r5, [r4, #0]
 80029aa:	61a5      	str	r5, [r4, #24]
 80029ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029b0:	f7ff fda0 	bl	80024f4 <memset>
 80029b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029bc:	4620      	mov	r0, r4
 80029be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029c0:	3468      	adds	r4, #104	; 0x68
 80029c2:	e7d9      	b.n	8002978 <__sfp+0x1c>
 80029c4:	2104      	movs	r1, #4
 80029c6:	4638      	mov	r0, r7
 80029c8:	f7ff ff62 	bl	8002890 <__sfmoreglue>
 80029cc:	4604      	mov	r4, r0
 80029ce:	6030      	str	r0, [r6, #0]
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d1d5      	bne.n	8002980 <__sfp+0x24>
 80029d4:	f7ff ff78 	bl	80028c8 <__sfp_lock_release>
 80029d8:	230c      	movs	r3, #12
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	e7ee      	b.n	80029bc <__sfp+0x60>
 80029de:	bf00      	nop
 80029e0:	0800365c 	.word	0x0800365c
 80029e4:	ffff0001 	.word	0xffff0001

080029e8 <_fwalk_reent>:
 80029e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029ec:	4606      	mov	r6, r0
 80029ee:	4688      	mov	r8, r1
 80029f0:	2700      	movs	r7, #0
 80029f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029fa:	f1b9 0901 	subs.w	r9, r9, #1
 80029fe:	d505      	bpl.n	8002a0c <_fwalk_reent+0x24>
 8002a00:	6824      	ldr	r4, [r4, #0]
 8002a02:	2c00      	cmp	r4, #0
 8002a04:	d1f7      	bne.n	80029f6 <_fwalk_reent+0xe>
 8002a06:	4638      	mov	r0, r7
 8002a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a0c:	89ab      	ldrh	r3, [r5, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d907      	bls.n	8002a22 <_fwalk_reent+0x3a>
 8002a12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a16:	3301      	adds	r3, #1
 8002a18:	d003      	beq.n	8002a22 <_fwalk_reent+0x3a>
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	4630      	mov	r0, r6
 8002a1e:	47c0      	blx	r8
 8002a20:	4307      	orrs	r7, r0
 8002a22:	3568      	adds	r5, #104	; 0x68
 8002a24:	e7e9      	b.n	80029fa <_fwalk_reent+0x12>

08002a26 <__retarget_lock_init_recursive>:
 8002a26:	4770      	bx	lr

08002a28 <__retarget_lock_acquire_recursive>:
 8002a28:	4770      	bx	lr

08002a2a <__retarget_lock_release_recursive>:
 8002a2a:	4770      	bx	lr

08002a2c <__swhatbuf_r>:
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	460e      	mov	r6, r1
 8002a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a34:	4614      	mov	r4, r2
 8002a36:	2900      	cmp	r1, #0
 8002a38:	461d      	mov	r5, r3
 8002a3a:	b096      	sub	sp, #88	; 0x58
 8002a3c:	da08      	bge.n	8002a50 <__swhatbuf_r+0x24>
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002a44:	602a      	str	r2, [r5, #0]
 8002a46:	061a      	lsls	r2, r3, #24
 8002a48:	d410      	bmi.n	8002a6c <__swhatbuf_r+0x40>
 8002a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4e:	e00e      	b.n	8002a6e <__swhatbuf_r+0x42>
 8002a50:	466a      	mov	r2, sp
 8002a52:	f000 fd59 	bl	8003508 <_fstat_r>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	dbf1      	blt.n	8002a3e <__swhatbuf_r+0x12>
 8002a5a:	9a01      	ldr	r2, [sp, #4]
 8002a5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a64:	425a      	negs	r2, r3
 8002a66:	415a      	adcs	r2, r3
 8002a68:	602a      	str	r2, [r5, #0]
 8002a6a:	e7ee      	b.n	8002a4a <__swhatbuf_r+0x1e>
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	2000      	movs	r0, #0
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	b016      	add	sp, #88	; 0x58
 8002a74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a78 <__smakebuf_r>:
 8002a78:	898b      	ldrh	r3, [r1, #12]
 8002a7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a7c:	079d      	lsls	r5, r3, #30
 8002a7e:	4606      	mov	r6, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	d507      	bpl.n	8002a94 <__smakebuf_r+0x1c>
 8002a84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	6123      	str	r3, [r4, #16]
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6163      	str	r3, [r4, #20]
 8002a90:	b002      	add	sp, #8
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
 8002a94:	466a      	mov	r2, sp
 8002a96:	ab01      	add	r3, sp, #4
 8002a98:	f7ff ffc8 	bl	8002a2c <__swhatbuf_r>
 8002a9c:	9900      	ldr	r1, [sp, #0]
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	4630      	mov	r0, r6
 8002aa2:	f000 f899 	bl	8002bd8 <_malloc_r>
 8002aa6:	b948      	cbnz	r0, 8002abc <__smakebuf_r+0x44>
 8002aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aac:	059a      	lsls	r2, r3, #22
 8002aae:	d4ef      	bmi.n	8002a90 <__smakebuf_r+0x18>
 8002ab0:	f023 0303 	bic.w	r3, r3, #3
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	81a3      	strh	r3, [r4, #12]
 8002aba:	e7e3      	b.n	8002a84 <__smakebuf_r+0xc>
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <__smakebuf_r+0x7c>)
 8002abe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ac0:	89a3      	ldrh	r3, [r4, #12]
 8002ac2:	6020      	str	r0, [r4, #0]
 8002ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac8:	81a3      	strh	r3, [r4, #12]
 8002aca:	9b00      	ldr	r3, [sp, #0]
 8002acc:	6120      	str	r0, [r4, #16]
 8002ace:	6163      	str	r3, [r4, #20]
 8002ad0:	9b01      	ldr	r3, [sp, #4]
 8002ad2:	b15b      	cbz	r3, 8002aec <__smakebuf_r+0x74>
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ada:	f000 fd27 	bl	800352c <_isatty_r>
 8002ade:	b128      	cbz	r0, 8002aec <__smakebuf_r+0x74>
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	89a0      	ldrh	r0, [r4, #12]
 8002aee:	4305      	orrs	r5, r0
 8002af0:	81a5      	strh	r5, [r4, #12]
 8002af2:	e7cd      	b.n	8002a90 <__smakebuf_r+0x18>
 8002af4:	08002885 	.word	0x08002885

08002af8 <malloc>:
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <malloc+0xc>)
 8002afa:	4601      	mov	r1, r0
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	f000 b86b 	b.w	8002bd8 <_malloc_r>
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <_free_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	d040      	beq.n	8002b92 <_free_r+0x8a>
 8002b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b14:	1f0c      	subs	r4, r1, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bfb8      	it	lt
 8002b1a:	18e4      	addlt	r4, r4, r3
 8002b1c:	f000 fd36 	bl	800358c <__malloc_lock>
 8002b20:	4a1c      	ldr	r2, [pc, #112]	; (8002b94 <_free_r+0x8c>)
 8002b22:	6813      	ldr	r3, [r2, #0]
 8002b24:	b933      	cbnz	r3, 8002b34 <_free_r+0x2c>
 8002b26:	6063      	str	r3, [r4, #4]
 8002b28:	6014      	str	r4, [r2, #0]
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b30:	f000 bd32 	b.w	8003598 <__malloc_unlock>
 8002b34:	42a3      	cmp	r3, r4
 8002b36:	d908      	bls.n	8002b4a <_free_r+0x42>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	1821      	adds	r1, r4, r0
 8002b3c:	428b      	cmp	r3, r1
 8002b3e:	bf01      	itttt	eq
 8002b40:	6819      	ldreq	r1, [r3, #0]
 8002b42:	685b      	ldreq	r3, [r3, #4]
 8002b44:	1809      	addeq	r1, r1, r0
 8002b46:	6021      	streq	r1, [r4, #0]
 8002b48:	e7ed      	b.n	8002b26 <_free_r+0x1e>
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	b10b      	cbz	r3, 8002b54 <_free_r+0x4c>
 8002b50:	42a3      	cmp	r3, r4
 8002b52:	d9fa      	bls.n	8002b4a <_free_r+0x42>
 8002b54:	6811      	ldr	r1, [r2, #0]
 8002b56:	1850      	adds	r0, r2, r1
 8002b58:	42a0      	cmp	r0, r4
 8002b5a:	d10b      	bne.n	8002b74 <_free_r+0x6c>
 8002b5c:	6820      	ldr	r0, [r4, #0]
 8002b5e:	4401      	add	r1, r0
 8002b60:	1850      	adds	r0, r2, r1
 8002b62:	4283      	cmp	r3, r0
 8002b64:	6011      	str	r1, [r2, #0]
 8002b66:	d1e0      	bne.n	8002b2a <_free_r+0x22>
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4401      	add	r1, r0
 8002b6e:	6011      	str	r1, [r2, #0]
 8002b70:	6053      	str	r3, [r2, #4]
 8002b72:	e7da      	b.n	8002b2a <_free_r+0x22>
 8002b74:	d902      	bls.n	8002b7c <_free_r+0x74>
 8002b76:	230c      	movs	r3, #12
 8002b78:	602b      	str	r3, [r5, #0]
 8002b7a:	e7d6      	b.n	8002b2a <_free_r+0x22>
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	1821      	adds	r1, r4, r0
 8002b80:	428b      	cmp	r3, r1
 8002b82:	bf01      	itttt	eq
 8002b84:	6819      	ldreq	r1, [r3, #0]
 8002b86:	685b      	ldreq	r3, [r3, #4]
 8002b88:	1809      	addeq	r1, r1, r0
 8002b8a:	6021      	streq	r1, [r4, #0]
 8002b8c:	6063      	str	r3, [r4, #4]
 8002b8e:	6054      	str	r4, [r2, #4]
 8002b90:	e7cb      	b.n	8002b2a <_free_r+0x22>
 8002b92:	bd38      	pop	{r3, r4, r5, pc}
 8002b94:	20000174 	.word	0x20000174

08002b98 <sbrk_aligned>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	4e0e      	ldr	r6, [pc, #56]	; (8002bd4 <sbrk_aligned+0x3c>)
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	6831      	ldr	r1, [r6, #0]
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b911      	cbnz	r1, 8002baa <sbrk_aligned+0x12>
 8002ba4:	f000 fb7a 	bl	800329c <_sbrk_r>
 8002ba8:	6030      	str	r0, [r6, #0]
 8002baa:	4621      	mov	r1, r4
 8002bac:	4628      	mov	r0, r5
 8002bae:	f000 fb75 	bl	800329c <_sbrk_r>
 8002bb2:	1c43      	adds	r3, r0, #1
 8002bb4:	d00a      	beq.n	8002bcc <sbrk_aligned+0x34>
 8002bb6:	1cc4      	adds	r4, r0, #3
 8002bb8:	f024 0403 	bic.w	r4, r4, #3
 8002bbc:	42a0      	cmp	r0, r4
 8002bbe:	d007      	beq.n	8002bd0 <sbrk_aligned+0x38>
 8002bc0:	1a21      	subs	r1, r4, r0
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f000 fb6a 	bl	800329c <_sbrk_r>
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d101      	bne.n	8002bd0 <sbrk_aligned+0x38>
 8002bcc:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	20000178 	.word	0x20000178

08002bd8 <_malloc_r>:
 8002bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bdc:	1ccd      	adds	r5, r1, #3
 8002bde:	f025 0503 	bic.w	r5, r5, #3
 8002be2:	3508      	adds	r5, #8
 8002be4:	2d0c      	cmp	r5, #12
 8002be6:	bf38      	it	cc
 8002be8:	250c      	movcc	r5, #12
 8002bea:	2d00      	cmp	r5, #0
 8002bec:	4607      	mov	r7, r0
 8002bee:	db01      	blt.n	8002bf4 <_malloc_r+0x1c>
 8002bf0:	42a9      	cmp	r1, r5
 8002bf2:	d905      	bls.n	8002c00 <_malloc_r+0x28>
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c00:	4e2e      	ldr	r6, [pc, #184]	; (8002cbc <_malloc_r+0xe4>)
 8002c02:	f000 fcc3 	bl	800358c <__malloc_lock>
 8002c06:	6833      	ldr	r3, [r6, #0]
 8002c08:	461c      	mov	r4, r3
 8002c0a:	bb34      	cbnz	r4, 8002c5a <_malloc_r+0x82>
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	4638      	mov	r0, r7
 8002c10:	f7ff ffc2 	bl	8002b98 <sbrk_aligned>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	4604      	mov	r4, r0
 8002c18:	d14d      	bne.n	8002cb6 <_malloc_r+0xde>
 8002c1a:	6834      	ldr	r4, [r6, #0]
 8002c1c:	4626      	mov	r6, r4
 8002c1e:	2e00      	cmp	r6, #0
 8002c20:	d140      	bne.n	8002ca4 <_malloc_r+0xcc>
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	4631      	mov	r1, r6
 8002c26:	4638      	mov	r0, r7
 8002c28:	eb04 0803 	add.w	r8, r4, r3
 8002c2c:	f000 fb36 	bl	800329c <_sbrk_r>
 8002c30:	4580      	cmp	r8, r0
 8002c32:	d13a      	bne.n	8002caa <_malloc_r+0xd2>
 8002c34:	6821      	ldr	r1, [r4, #0]
 8002c36:	3503      	adds	r5, #3
 8002c38:	1a6d      	subs	r5, r5, r1
 8002c3a:	f025 0503 	bic.w	r5, r5, #3
 8002c3e:	3508      	adds	r5, #8
 8002c40:	2d0c      	cmp	r5, #12
 8002c42:	bf38      	it	cc
 8002c44:	250c      	movcc	r5, #12
 8002c46:	4638      	mov	r0, r7
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f7ff ffa5 	bl	8002b98 <sbrk_aligned>
 8002c4e:	3001      	adds	r0, #1
 8002c50:	d02b      	beq.n	8002caa <_malloc_r+0xd2>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	442b      	add	r3, r5
 8002c56:	6023      	str	r3, [r4, #0]
 8002c58:	e00e      	b.n	8002c78 <_malloc_r+0xa0>
 8002c5a:	6822      	ldr	r2, [r4, #0]
 8002c5c:	1b52      	subs	r2, r2, r5
 8002c5e:	d41e      	bmi.n	8002c9e <_malloc_r+0xc6>
 8002c60:	2a0b      	cmp	r2, #11
 8002c62:	d916      	bls.n	8002c92 <_malloc_r+0xba>
 8002c64:	1961      	adds	r1, r4, r5
 8002c66:	42a3      	cmp	r3, r4
 8002c68:	6025      	str	r5, [r4, #0]
 8002c6a:	bf18      	it	ne
 8002c6c:	6059      	strne	r1, [r3, #4]
 8002c6e:	6863      	ldr	r3, [r4, #4]
 8002c70:	bf08      	it	eq
 8002c72:	6031      	streq	r1, [r6, #0]
 8002c74:	5162      	str	r2, [r4, r5]
 8002c76:	604b      	str	r3, [r1, #4]
 8002c78:	4638      	mov	r0, r7
 8002c7a:	f104 060b 	add.w	r6, r4, #11
 8002c7e:	f000 fc8b 	bl	8003598 <__malloc_unlock>
 8002c82:	f026 0607 	bic.w	r6, r6, #7
 8002c86:	1d23      	adds	r3, r4, #4
 8002c88:	1af2      	subs	r2, r6, r3
 8002c8a:	d0b6      	beq.n	8002bfa <_malloc_r+0x22>
 8002c8c:	1b9b      	subs	r3, r3, r6
 8002c8e:	50a3      	str	r3, [r4, r2]
 8002c90:	e7b3      	b.n	8002bfa <_malloc_r+0x22>
 8002c92:	6862      	ldr	r2, [r4, #4]
 8002c94:	42a3      	cmp	r3, r4
 8002c96:	bf0c      	ite	eq
 8002c98:	6032      	streq	r2, [r6, #0]
 8002c9a:	605a      	strne	r2, [r3, #4]
 8002c9c:	e7ec      	b.n	8002c78 <_malloc_r+0xa0>
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	6864      	ldr	r4, [r4, #4]
 8002ca2:	e7b2      	b.n	8002c0a <_malloc_r+0x32>
 8002ca4:	4634      	mov	r4, r6
 8002ca6:	6876      	ldr	r6, [r6, #4]
 8002ca8:	e7b9      	b.n	8002c1e <_malloc_r+0x46>
 8002caa:	230c      	movs	r3, #12
 8002cac:	4638      	mov	r0, r7
 8002cae:	603b      	str	r3, [r7, #0]
 8002cb0:	f000 fc72 	bl	8003598 <__malloc_unlock>
 8002cb4:	e7a1      	b.n	8002bfa <_malloc_r+0x22>
 8002cb6:	6025      	str	r5, [r4, #0]
 8002cb8:	e7de      	b.n	8002c78 <_malloc_r+0xa0>
 8002cba:	bf00      	nop
 8002cbc:	20000174 	.word	0x20000174

08002cc0 <__sfputc_r>:
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	b410      	push	{r4}
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	6093      	str	r3, [r2, #8]
 8002cca:	da07      	bge.n	8002cdc <__sfputc_r+0x1c>
 8002ccc:	6994      	ldr	r4, [r2, #24]
 8002cce:	42a3      	cmp	r3, r4
 8002cd0:	db01      	blt.n	8002cd6 <__sfputc_r+0x16>
 8002cd2:	290a      	cmp	r1, #10
 8002cd4:	d102      	bne.n	8002cdc <__sfputc_r+0x1c>
 8002cd6:	bc10      	pop	{r4}
 8002cd8:	f000 bb34 	b.w	8003344 <__swbuf_r>
 8002cdc:	6813      	ldr	r3, [r2, #0]
 8002cde:	1c58      	adds	r0, r3, #1
 8002ce0:	6010      	str	r0, [r2, #0]
 8002ce2:	7019      	strb	r1, [r3, #0]
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	bc10      	pop	{r4}
 8002ce8:	4770      	bx	lr

08002cea <__sfputs_r>:
 8002cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cec:	4606      	mov	r6, r0
 8002cee:	460f      	mov	r7, r1
 8002cf0:	4614      	mov	r4, r2
 8002cf2:	18d5      	adds	r5, r2, r3
 8002cf4:	42ac      	cmp	r4, r5
 8002cf6:	d101      	bne.n	8002cfc <__sfputs_r+0x12>
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e007      	b.n	8002d0c <__sfputs_r+0x22>
 8002cfc:	463a      	mov	r2, r7
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d04:	f7ff ffdc 	bl	8002cc0 <__sfputc_r>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d1f3      	bne.n	8002cf4 <__sfputs_r+0xa>
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d10 <_vfiprintf_r>:
 8002d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d14:	460d      	mov	r5, r1
 8002d16:	4614      	mov	r4, r2
 8002d18:	4698      	mov	r8, r3
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	b09d      	sub	sp, #116	; 0x74
 8002d1e:	b118      	cbz	r0, 8002d28 <_vfiprintf_r+0x18>
 8002d20:	6983      	ldr	r3, [r0, #24]
 8002d22:	b90b      	cbnz	r3, 8002d28 <_vfiprintf_r+0x18>
 8002d24:	f7ff fde2 	bl	80028ec <__sinit>
 8002d28:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <_vfiprintf_r+0x240>)
 8002d2a:	429d      	cmp	r5, r3
 8002d2c:	d11b      	bne.n	8002d66 <_vfiprintf_r+0x56>
 8002d2e:	6875      	ldr	r5, [r6, #4]
 8002d30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d32:	07d9      	lsls	r1, r3, #31
 8002d34:	d405      	bmi.n	8002d42 <_vfiprintf_r+0x32>
 8002d36:	89ab      	ldrh	r3, [r5, #12]
 8002d38:	059a      	lsls	r2, r3, #22
 8002d3a:	d402      	bmi.n	8002d42 <_vfiprintf_r+0x32>
 8002d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d3e:	f7ff fe73 	bl	8002a28 <__retarget_lock_acquire_recursive>
 8002d42:	89ab      	ldrh	r3, [r5, #12]
 8002d44:	071b      	lsls	r3, r3, #28
 8002d46:	d501      	bpl.n	8002d4c <_vfiprintf_r+0x3c>
 8002d48:	692b      	ldr	r3, [r5, #16]
 8002d4a:	b9eb      	cbnz	r3, 8002d88 <_vfiprintf_r+0x78>
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4630      	mov	r0, r6
 8002d50:	f000 fb5c 	bl	800340c <__swsetup_r>
 8002d54:	b1c0      	cbz	r0, 8002d88 <_vfiprintf_r+0x78>
 8002d56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d58:	07dc      	lsls	r4, r3, #31
 8002d5a:	d50e      	bpl.n	8002d7a <_vfiprintf_r+0x6a>
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	b01d      	add	sp, #116	; 0x74
 8002d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d66:	4b7b      	ldr	r3, [pc, #492]	; (8002f54 <_vfiprintf_r+0x244>)
 8002d68:	429d      	cmp	r5, r3
 8002d6a:	d101      	bne.n	8002d70 <_vfiprintf_r+0x60>
 8002d6c:	68b5      	ldr	r5, [r6, #8]
 8002d6e:	e7df      	b.n	8002d30 <_vfiprintf_r+0x20>
 8002d70:	4b79      	ldr	r3, [pc, #484]	; (8002f58 <_vfiprintf_r+0x248>)
 8002d72:	429d      	cmp	r5, r3
 8002d74:	bf08      	it	eq
 8002d76:	68f5      	ldreq	r5, [r6, #12]
 8002d78:	e7da      	b.n	8002d30 <_vfiprintf_r+0x20>
 8002d7a:	89ab      	ldrh	r3, [r5, #12]
 8002d7c:	0598      	lsls	r0, r3, #22
 8002d7e:	d4ed      	bmi.n	8002d5c <_vfiprintf_r+0x4c>
 8002d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d82:	f7ff fe52 	bl	8002a2a <__retarget_lock_release_recursive>
 8002d86:	e7e9      	b.n	8002d5c <_vfiprintf_r+0x4c>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d92:	2330      	movs	r3, #48	; 0x30
 8002d94:	f04f 0901 	mov.w	r9, #1
 8002d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d9c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f5c <_vfiprintf_r+0x24c>
 8002da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da4:	4623      	mov	r3, r4
 8002da6:	469a      	mov	sl, r3
 8002da8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dac:	b10a      	cbz	r2, 8002db2 <_vfiprintf_r+0xa2>
 8002dae:	2a25      	cmp	r2, #37	; 0x25
 8002db0:	d1f9      	bne.n	8002da6 <_vfiprintf_r+0x96>
 8002db2:	ebba 0b04 	subs.w	fp, sl, r4
 8002db6:	d00b      	beq.n	8002dd0 <_vfiprintf_r+0xc0>
 8002db8:	465b      	mov	r3, fp
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7ff ff93 	bl	8002cea <__sfputs_r>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	f000 80aa 	beq.w	8002f1e <_vfiprintf_r+0x20e>
 8002dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dcc:	445a      	add	r2, fp
 8002dce:	9209      	str	r2, [sp, #36]	; 0x24
 8002dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a2 	beq.w	8002f1e <_vfiprintf_r+0x20e>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de4:	f10a 0a01 	add.w	sl, sl, #1
 8002de8:	9304      	str	r3, [sp, #16]
 8002dea:	9307      	str	r3, [sp, #28]
 8002dec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002df0:	931a      	str	r3, [sp, #104]	; 0x68
 8002df2:	4654      	mov	r4, sl
 8002df4:	2205      	movs	r2, #5
 8002df6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfa:	4858      	ldr	r0, [pc, #352]	; (8002f5c <_vfiprintf_r+0x24c>)
 8002dfc:	f000 fbb8 	bl	8003570 <memchr>
 8002e00:	9a04      	ldr	r2, [sp, #16]
 8002e02:	b9d8      	cbnz	r0, 8002e3c <_vfiprintf_r+0x12c>
 8002e04:	06d1      	lsls	r1, r2, #27
 8002e06:	bf44      	itt	mi
 8002e08:	2320      	movmi	r3, #32
 8002e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e0e:	0713      	lsls	r3, r2, #28
 8002e10:	bf44      	itt	mi
 8002e12:	232b      	movmi	r3, #43	; 0x2b
 8002e14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e18:	f89a 3000 	ldrb.w	r3, [sl]
 8002e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002e1e:	d015      	beq.n	8002e4c <_vfiprintf_r+0x13c>
 8002e20:	4654      	mov	r4, sl
 8002e22:	2000      	movs	r0, #0
 8002e24:	f04f 0c0a 	mov.w	ip, #10
 8002e28:	9a07      	ldr	r2, [sp, #28]
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e30:	3b30      	subs	r3, #48	; 0x30
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	d94e      	bls.n	8002ed4 <_vfiprintf_r+0x1c4>
 8002e36:	b1b0      	cbz	r0, 8002e66 <_vfiprintf_r+0x156>
 8002e38:	9207      	str	r2, [sp, #28]
 8002e3a:	e014      	b.n	8002e66 <_vfiprintf_r+0x156>
 8002e3c:	eba0 0308 	sub.w	r3, r0, r8
 8002e40:	fa09 f303 	lsl.w	r3, r9, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	46a2      	mov	sl, r4
 8002e48:	9304      	str	r3, [sp, #16]
 8002e4a:	e7d2      	b.n	8002df2 <_vfiprintf_r+0xe2>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	1d19      	adds	r1, r3, #4
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	9103      	str	r1, [sp, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bfbb      	ittet	lt
 8002e58:	425b      	neglt	r3, r3
 8002e5a:	f042 0202 	orrlt.w	r2, r2, #2
 8002e5e:	9307      	strge	r3, [sp, #28]
 8002e60:	9307      	strlt	r3, [sp, #28]
 8002e62:	bfb8      	it	lt
 8002e64:	9204      	strlt	r2, [sp, #16]
 8002e66:	7823      	ldrb	r3, [r4, #0]
 8002e68:	2b2e      	cmp	r3, #46	; 0x2e
 8002e6a:	d10c      	bne.n	8002e86 <_vfiprintf_r+0x176>
 8002e6c:	7863      	ldrb	r3, [r4, #1]
 8002e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e70:	d135      	bne.n	8002ede <_vfiprintf_r+0x1ce>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	3402      	adds	r4, #2
 8002e76:	1d1a      	adds	r2, r3, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	9203      	str	r2, [sp, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bfb8      	it	lt
 8002e80:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e84:	9305      	str	r3, [sp, #20]
 8002e86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002f60 <_vfiprintf_r+0x250>
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	7821      	ldrb	r1, [r4, #0]
 8002e90:	f000 fb6e 	bl	8003570 <memchr>
 8002e94:	b140      	cbz	r0, 8002ea8 <_vfiprintf_r+0x198>
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	eba0 000a 	sub.w	r0, r0, sl
 8002e9c:	fa03 f000 	lsl.w	r0, r3, r0
 8002ea0:	9b04      	ldr	r3, [sp, #16]
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	4303      	orrs	r3, r0
 8002ea6:	9304      	str	r3, [sp, #16]
 8002ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eac:	2206      	movs	r2, #6
 8002eae:	482d      	ldr	r0, [pc, #180]	; (8002f64 <_vfiprintf_r+0x254>)
 8002eb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eb4:	f000 fb5c 	bl	8003570 <memchr>
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	d03f      	beq.n	8002f3c <_vfiprintf_r+0x22c>
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <_vfiprintf_r+0x258>)
 8002ebe:	bb1b      	cbnz	r3, 8002f08 <_vfiprintf_r+0x1f8>
 8002ec0:	9b03      	ldr	r3, [sp, #12]
 8002ec2:	3307      	adds	r3, #7
 8002ec4:	f023 0307 	bic.w	r3, r3, #7
 8002ec8:	3308      	adds	r3, #8
 8002eca:	9303      	str	r3, [sp, #12]
 8002ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ece:	443b      	add	r3, r7
 8002ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed2:	e767      	b.n	8002da4 <_vfiprintf_r+0x94>
 8002ed4:	460c      	mov	r4, r1
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002edc:	e7a5      	b.n	8002e2a <_vfiprintf_r+0x11a>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f04f 0c0a 	mov.w	ip, #10
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	3401      	adds	r4, #1
 8002ee8:	9305      	str	r3, [sp, #20]
 8002eea:	4620      	mov	r0, r4
 8002eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ef0:	3a30      	subs	r2, #48	; 0x30
 8002ef2:	2a09      	cmp	r2, #9
 8002ef4:	d903      	bls.n	8002efe <_vfiprintf_r+0x1ee>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0c5      	beq.n	8002e86 <_vfiprintf_r+0x176>
 8002efa:	9105      	str	r1, [sp, #20]
 8002efc:	e7c3      	b.n	8002e86 <_vfiprintf_r+0x176>
 8002efe:	4604      	mov	r4, r0
 8002f00:	2301      	movs	r3, #1
 8002f02:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f06:	e7f0      	b.n	8002eea <_vfiprintf_r+0x1da>
 8002f08:	ab03      	add	r3, sp, #12
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	462a      	mov	r2, r5
 8002f0e:	4630      	mov	r0, r6
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <_vfiprintf_r+0x25c>)
 8002f12:	a904      	add	r1, sp, #16
 8002f14:	f3af 8000 	nop.w
 8002f18:	4607      	mov	r7, r0
 8002f1a:	1c78      	adds	r0, r7, #1
 8002f1c:	d1d6      	bne.n	8002ecc <_vfiprintf_r+0x1bc>
 8002f1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f20:	07d9      	lsls	r1, r3, #31
 8002f22:	d405      	bmi.n	8002f30 <_vfiprintf_r+0x220>
 8002f24:	89ab      	ldrh	r3, [r5, #12]
 8002f26:	059a      	lsls	r2, r3, #22
 8002f28:	d402      	bmi.n	8002f30 <_vfiprintf_r+0x220>
 8002f2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f2c:	f7ff fd7d 	bl	8002a2a <__retarget_lock_release_recursive>
 8002f30:	89ab      	ldrh	r3, [r5, #12]
 8002f32:	065b      	lsls	r3, r3, #25
 8002f34:	f53f af12 	bmi.w	8002d5c <_vfiprintf_r+0x4c>
 8002f38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f3a:	e711      	b.n	8002d60 <_vfiprintf_r+0x50>
 8002f3c:	ab03      	add	r3, sp, #12
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	462a      	mov	r2, r5
 8002f42:	4630      	mov	r0, r6
 8002f44:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <_vfiprintf_r+0x25c>)
 8002f46:	a904      	add	r1, sp, #16
 8002f48:	f000 f882 	bl	8003050 <_printf_i>
 8002f4c:	e7e4      	b.n	8002f18 <_vfiprintf_r+0x208>
 8002f4e:	bf00      	nop
 8002f50:	08003680 	.word	0x08003680
 8002f54:	080036a0 	.word	0x080036a0
 8002f58:	08003660 	.word	0x08003660
 8002f5c:	080036c0 	.word	0x080036c0
 8002f60:	080036c6 	.word	0x080036c6
 8002f64:	080036ca 	.word	0x080036ca
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	08002ceb 	.word	0x08002ceb

08002f70 <_printf_common>:
 8002f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	4616      	mov	r6, r2
 8002f76:	4699      	mov	r9, r3
 8002f78:	688a      	ldr	r2, [r1, #8]
 8002f7a:	690b      	ldr	r3, [r1, #16]
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	bfb8      	it	lt
 8002f82:	4613      	movlt	r3, r2
 8002f84:	6033      	str	r3, [r6, #0]
 8002f86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f90:	b10a      	cbz	r2, 8002f96 <_printf_common+0x26>
 8002f92:	3301      	adds	r3, #1
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	0699      	lsls	r1, r3, #26
 8002f9a:	bf42      	ittt	mi
 8002f9c:	6833      	ldrmi	r3, [r6, #0]
 8002f9e:	3302      	addmi	r3, #2
 8002fa0:	6033      	strmi	r3, [r6, #0]
 8002fa2:	6825      	ldr	r5, [r4, #0]
 8002fa4:	f015 0506 	ands.w	r5, r5, #6
 8002fa8:	d106      	bne.n	8002fb8 <_printf_common+0x48>
 8002faa:	f104 0a19 	add.w	sl, r4, #25
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	6832      	ldr	r2, [r6, #0]
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	42ab      	cmp	r3, r5
 8002fb6:	dc28      	bgt.n	800300a <_printf_common+0x9a>
 8002fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fbc:	1e13      	subs	r3, r2, #0
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	bf18      	it	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	0692      	lsls	r2, r2, #26
 8002fc6:	d42d      	bmi.n	8003024 <_printf_common+0xb4>
 8002fc8:	4649      	mov	r1, r9
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd0:	47c0      	blx	r8
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d020      	beq.n	8003018 <_printf_common+0xa8>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	68e5      	ldr	r5, [r4, #12]
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf18      	it	ne
 8002fe2:	2500      	movne	r5, #0
 8002fe4:	6832      	ldr	r2, [r6, #0]
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	68a3      	ldr	r3, [r4, #8]
 8002fec:	bf08      	it	eq
 8002fee:	1aad      	subeq	r5, r5, r2
 8002ff0:	6922      	ldr	r2, [r4, #16]
 8002ff2:	bf08      	it	eq
 8002ff4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	bfc4      	itt	gt
 8002ffc:	1a9b      	subgt	r3, r3, r2
 8002ffe:	18ed      	addgt	r5, r5, r3
 8003000:	341a      	adds	r4, #26
 8003002:	42b5      	cmp	r5, r6
 8003004:	d11a      	bne.n	800303c <_printf_common+0xcc>
 8003006:	2000      	movs	r0, #0
 8003008:	e008      	b.n	800301c <_printf_common+0xac>
 800300a:	2301      	movs	r3, #1
 800300c:	4652      	mov	r2, sl
 800300e:	4649      	mov	r1, r9
 8003010:	4638      	mov	r0, r7
 8003012:	47c0      	blx	r8
 8003014:	3001      	adds	r0, #1
 8003016:	d103      	bne.n	8003020 <_printf_common+0xb0>
 8003018:	f04f 30ff 	mov.w	r0, #4294967295
 800301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003020:	3501      	adds	r5, #1
 8003022:	e7c4      	b.n	8002fae <_printf_common+0x3e>
 8003024:	2030      	movs	r0, #48	; 0x30
 8003026:	18e1      	adds	r1, r4, r3
 8003028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003032:	4422      	add	r2, r4
 8003034:	3302      	adds	r3, #2
 8003036:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800303a:	e7c5      	b.n	8002fc8 <_printf_common+0x58>
 800303c:	2301      	movs	r3, #1
 800303e:	4622      	mov	r2, r4
 8003040:	4649      	mov	r1, r9
 8003042:	4638      	mov	r0, r7
 8003044:	47c0      	blx	r8
 8003046:	3001      	adds	r0, #1
 8003048:	d0e6      	beq.n	8003018 <_printf_common+0xa8>
 800304a:	3601      	adds	r6, #1
 800304c:	e7d9      	b.n	8003002 <_printf_common+0x92>
	...

08003050 <_printf_i>:
 8003050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	7e0f      	ldrb	r7, [r1, #24]
 8003056:	4691      	mov	r9, r2
 8003058:	2f78      	cmp	r7, #120	; 0x78
 800305a:	4680      	mov	r8, r0
 800305c:	460c      	mov	r4, r1
 800305e:	469a      	mov	sl, r3
 8003060:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003066:	d807      	bhi.n	8003078 <_printf_i+0x28>
 8003068:	2f62      	cmp	r7, #98	; 0x62
 800306a:	d80a      	bhi.n	8003082 <_printf_i+0x32>
 800306c:	2f00      	cmp	r7, #0
 800306e:	f000 80d9 	beq.w	8003224 <_printf_i+0x1d4>
 8003072:	2f58      	cmp	r7, #88	; 0x58
 8003074:	f000 80a4 	beq.w	80031c0 <_printf_i+0x170>
 8003078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800307c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003080:	e03a      	b.n	80030f8 <_printf_i+0xa8>
 8003082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003086:	2b15      	cmp	r3, #21
 8003088:	d8f6      	bhi.n	8003078 <_printf_i+0x28>
 800308a:	a101      	add	r1, pc, #4	; (adr r1, 8003090 <_printf_i+0x40>)
 800308c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003079 	.word	0x08003079
 800309c:	08003079 	.word	0x08003079
 80030a0:	08003079 	.word	0x08003079
 80030a4:	08003079 	.word	0x08003079
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003079 	.word	0x08003079
 80030b0:	08003079 	.word	0x08003079
 80030b4:	08003079 	.word	0x08003079
 80030b8:	08003079 	.word	0x08003079
 80030bc:	0800320b 	.word	0x0800320b
 80030c0:	0800312d 	.word	0x0800312d
 80030c4:	080031ed 	.word	0x080031ed
 80030c8:	08003079 	.word	0x08003079
 80030cc:	08003079 	.word	0x08003079
 80030d0:	0800322d 	.word	0x0800322d
 80030d4:	08003079 	.word	0x08003079
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	08003079 	.word	0x08003079
 80030e0:	08003079 	.word	0x08003079
 80030e4:	080031f5 	.word	0x080031f5
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	602a      	str	r2, [r5, #0]
 80030f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0a4      	b.n	8003246 <_printf_i+0x1f6>
 80030fc:	6820      	ldr	r0, [r4, #0]
 80030fe:	6829      	ldr	r1, [r5, #0]
 8003100:	0606      	lsls	r6, r0, #24
 8003102:	f101 0304 	add.w	r3, r1, #4
 8003106:	d50a      	bpl.n	800311e <_printf_i+0xce>
 8003108:	680e      	ldr	r6, [r1, #0]
 800310a:	602b      	str	r3, [r5, #0]
 800310c:	2e00      	cmp	r6, #0
 800310e:	da03      	bge.n	8003118 <_printf_i+0xc8>
 8003110:	232d      	movs	r3, #45	; 0x2d
 8003112:	4276      	negs	r6, r6
 8003114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003118:	230a      	movs	r3, #10
 800311a:	485e      	ldr	r0, [pc, #376]	; (8003294 <_printf_i+0x244>)
 800311c:	e019      	b.n	8003152 <_printf_i+0x102>
 800311e:	680e      	ldr	r6, [r1, #0]
 8003120:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003124:	602b      	str	r3, [r5, #0]
 8003126:	bf18      	it	ne
 8003128:	b236      	sxthne	r6, r6
 800312a:	e7ef      	b.n	800310c <_printf_i+0xbc>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	1d19      	adds	r1, r3, #4
 8003132:	6029      	str	r1, [r5, #0]
 8003134:	0601      	lsls	r1, r0, #24
 8003136:	d501      	bpl.n	800313c <_printf_i+0xec>
 8003138:	681e      	ldr	r6, [r3, #0]
 800313a:	e002      	b.n	8003142 <_printf_i+0xf2>
 800313c:	0646      	lsls	r6, r0, #25
 800313e:	d5fb      	bpl.n	8003138 <_printf_i+0xe8>
 8003140:	881e      	ldrh	r6, [r3, #0]
 8003142:	2f6f      	cmp	r7, #111	; 0x6f
 8003144:	bf0c      	ite	eq
 8003146:	2308      	moveq	r3, #8
 8003148:	230a      	movne	r3, #10
 800314a:	4852      	ldr	r0, [pc, #328]	; (8003294 <_printf_i+0x244>)
 800314c:	2100      	movs	r1, #0
 800314e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003152:	6865      	ldr	r5, [r4, #4]
 8003154:	2d00      	cmp	r5, #0
 8003156:	bfa8      	it	ge
 8003158:	6821      	ldrge	r1, [r4, #0]
 800315a:	60a5      	str	r5, [r4, #8]
 800315c:	bfa4      	itt	ge
 800315e:	f021 0104 	bicge.w	r1, r1, #4
 8003162:	6021      	strge	r1, [r4, #0]
 8003164:	b90e      	cbnz	r6, 800316a <_printf_i+0x11a>
 8003166:	2d00      	cmp	r5, #0
 8003168:	d04d      	beq.n	8003206 <_printf_i+0x1b6>
 800316a:	4615      	mov	r5, r2
 800316c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003170:	fb03 6711 	mls	r7, r3, r1, r6
 8003174:	5dc7      	ldrb	r7, [r0, r7]
 8003176:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800317a:	4637      	mov	r7, r6
 800317c:	42bb      	cmp	r3, r7
 800317e:	460e      	mov	r6, r1
 8003180:	d9f4      	bls.n	800316c <_printf_i+0x11c>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d10b      	bne.n	800319e <_printf_i+0x14e>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	07de      	lsls	r6, r3, #31
 800318a:	d508      	bpl.n	800319e <_printf_i+0x14e>
 800318c:	6923      	ldr	r3, [r4, #16]
 800318e:	6861      	ldr	r1, [r4, #4]
 8003190:	4299      	cmp	r1, r3
 8003192:	bfde      	ittt	le
 8003194:	2330      	movle	r3, #48	; 0x30
 8003196:	f805 3c01 	strble.w	r3, [r5, #-1]
 800319a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800319e:	1b52      	subs	r2, r2, r5
 80031a0:	6122      	str	r2, [r4, #16]
 80031a2:	464b      	mov	r3, r9
 80031a4:	4621      	mov	r1, r4
 80031a6:	4640      	mov	r0, r8
 80031a8:	f8cd a000 	str.w	sl, [sp]
 80031ac:	aa03      	add	r2, sp, #12
 80031ae:	f7ff fedf 	bl	8002f70 <_printf_common>
 80031b2:	3001      	adds	r0, #1
 80031b4:	d14c      	bne.n	8003250 <_printf_i+0x200>
 80031b6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ba:	b004      	add	sp, #16
 80031bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c0:	4834      	ldr	r0, [pc, #208]	; (8003294 <_printf_i+0x244>)
 80031c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031c6:	6829      	ldr	r1, [r5, #0]
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80031ce:	6029      	str	r1, [r5, #0]
 80031d0:	061d      	lsls	r5, r3, #24
 80031d2:	d514      	bpl.n	80031fe <_printf_i+0x1ae>
 80031d4:	07df      	lsls	r7, r3, #31
 80031d6:	bf44      	itt	mi
 80031d8:	f043 0320 	orrmi.w	r3, r3, #32
 80031dc:	6023      	strmi	r3, [r4, #0]
 80031de:	b91e      	cbnz	r6, 80031e8 <_printf_i+0x198>
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	f023 0320 	bic.w	r3, r3, #32
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	2310      	movs	r3, #16
 80031ea:	e7af      	b.n	800314c <_printf_i+0xfc>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	2378      	movs	r3, #120	; 0x78
 80031f6:	4828      	ldr	r0, [pc, #160]	; (8003298 <_printf_i+0x248>)
 80031f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031fc:	e7e3      	b.n	80031c6 <_printf_i+0x176>
 80031fe:	0659      	lsls	r1, r3, #25
 8003200:	bf48      	it	mi
 8003202:	b2b6      	uxthmi	r6, r6
 8003204:	e7e6      	b.n	80031d4 <_printf_i+0x184>
 8003206:	4615      	mov	r5, r2
 8003208:	e7bb      	b.n	8003182 <_printf_i+0x132>
 800320a:	682b      	ldr	r3, [r5, #0]
 800320c:	6826      	ldr	r6, [r4, #0]
 800320e:	1d18      	adds	r0, r3, #4
 8003210:	6961      	ldr	r1, [r4, #20]
 8003212:	6028      	str	r0, [r5, #0]
 8003214:	0635      	lsls	r5, r6, #24
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	d501      	bpl.n	800321e <_printf_i+0x1ce>
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	e002      	b.n	8003224 <_printf_i+0x1d4>
 800321e:	0670      	lsls	r0, r6, #25
 8003220:	d5fb      	bpl.n	800321a <_printf_i+0x1ca>
 8003222:	8019      	strh	r1, [r3, #0]
 8003224:	2300      	movs	r3, #0
 8003226:	4615      	mov	r5, r2
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	e7ba      	b.n	80031a2 <_printf_i+0x152>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	2100      	movs	r1, #0
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	602a      	str	r2, [r5, #0]
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	6862      	ldr	r2, [r4, #4]
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f999 	bl	8003570 <memchr>
 800323e:	b108      	cbz	r0, 8003244 <_printf_i+0x1f4>
 8003240:	1b40      	subs	r0, r0, r5
 8003242:	6060      	str	r0, [r4, #4]
 8003244:	6863      	ldr	r3, [r4, #4]
 8003246:	6123      	str	r3, [r4, #16]
 8003248:	2300      	movs	r3, #0
 800324a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800324e:	e7a8      	b.n	80031a2 <_printf_i+0x152>
 8003250:	462a      	mov	r2, r5
 8003252:	4649      	mov	r1, r9
 8003254:	4640      	mov	r0, r8
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	47d0      	blx	sl
 800325a:	3001      	adds	r0, #1
 800325c:	d0ab      	beq.n	80031b6 <_printf_i+0x166>
 800325e:	6823      	ldr	r3, [r4, #0]
 8003260:	079b      	lsls	r3, r3, #30
 8003262:	d413      	bmi.n	800328c <_printf_i+0x23c>
 8003264:	68e0      	ldr	r0, [r4, #12]
 8003266:	9b03      	ldr	r3, [sp, #12]
 8003268:	4298      	cmp	r0, r3
 800326a:	bfb8      	it	lt
 800326c:	4618      	movlt	r0, r3
 800326e:	e7a4      	b.n	80031ba <_printf_i+0x16a>
 8003270:	2301      	movs	r3, #1
 8003272:	4632      	mov	r2, r6
 8003274:	4649      	mov	r1, r9
 8003276:	4640      	mov	r0, r8
 8003278:	47d0      	blx	sl
 800327a:	3001      	adds	r0, #1
 800327c:	d09b      	beq.n	80031b6 <_printf_i+0x166>
 800327e:	3501      	adds	r5, #1
 8003280:	68e3      	ldr	r3, [r4, #12]
 8003282:	9903      	ldr	r1, [sp, #12]
 8003284:	1a5b      	subs	r3, r3, r1
 8003286:	42ab      	cmp	r3, r5
 8003288:	dcf2      	bgt.n	8003270 <_printf_i+0x220>
 800328a:	e7eb      	b.n	8003264 <_printf_i+0x214>
 800328c:	2500      	movs	r5, #0
 800328e:	f104 0619 	add.w	r6, r4, #25
 8003292:	e7f5      	b.n	8003280 <_printf_i+0x230>
 8003294:	080036d1 	.word	0x080036d1
 8003298:	080036e2 	.word	0x080036e2

0800329c <_sbrk_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	2300      	movs	r3, #0
 80032a0:	4d05      	ldr	r5, [pc, #20]	; (80032b8 <_sbrk_r+0x1c>)
 80032a2:	4604      	mov	r4, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	f7fd fa80 	bl	80007ac <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_sbrk_r+0x1a>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_sbrk_r+0x1a>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	2000017c 	.word	0x2000017c

080032bc <__sread>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	460c      	mov	r4, r1
 80032c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c4:	f000 f96e 	bl	80035a4 <_read_r>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	bfab      	itete	ge
 80032cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032ce:	89a3      	ldrhlt	r3, [r4, #12]
 80032d0:	181b      	addge	r3, r3, r0
 80032d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032d6:	bfac      	ite	ge
 80032d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80032da:	81a3      	strhlt	r3, [r4, #12]
 80032dc:	bd10      	pop	{r4, pc}

080032de <__swrite>:
 80032de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e2:	461f      	mov	r7, r3
 80032e4:	898b      	ldrh	r3, [r1, #12]
 80032e6:	4605      	mov	r5, r0
 80032e8:	05db      	lsls	r3, r3, #23
 80032ea:	460c      	mov	r4, r1
 80032ec:	4616      	mov	r6, r2
 80032ee:	d505      	bpl.n	80032fc <__swrite+0x1e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	2200      	movs	r2, #0
 80032f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f8:	f000 f928 	bl	800354c <_lseek_r>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	4632      	mov	r2, r6
 8003300:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	4628      	mov	r0, r5
 8003308:	463b      	mov	r3, r7
 800330a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800330e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	f000 b869 	b.w	80033e8 <_write_r>

08003316 <__sseek>:
 8003316:	b510      	push	{r4, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331e:	f000 f915 	bl	800354c <_lseek_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	bf15      	itete	ne
 8003328:	6560      	strne	r0, [r4, #84]	; 0x54
 800332a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800332e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003332:	81a3      	strheq	r3, [r4, #12]
 8003334:	bf18      	it	ne
 8003336:	81a3      	strhne	r3, [r4, #12]
 8003338:	bd10      	pop	{r4, pc}

0800333a <__sclose>:
 800333a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333e:	f000 b8d3 	b.w	80034e8 <_close_r>
	...

08003344 <__swbuf_r>:
 8003344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003346:	460e      	mov	r6, r1
 8003348:	4614      	mov	r4, r2
 800334a:	4605      	mov	r5, r0
 800334c:	b118      	cbz	r0, 8003356 <__swbuf_r+0x12>
 800334e:	6983      	ldr	r3, [r0, #24]
 8003350:	b90b      	cbnz	r3, 8003356 <__swbuf_r+0x12>
 8003352:	f7ff facb 	bl	80028ec <__sinit>
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <__swbuf_r+0x98>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d12b      	bne.n	80033b4 <__swbuf_r+0x70>
 800335c:	686c      	ldr	r4, [r5, #4]
 800335e:	69a3      	ldr	r3, [r4, #24]
 8003360:	60a3      	str	r3, [r4, #8]
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	071a      	lsls	r2, r3, #28
 8003366:	d52f      	bpl.n	80033c8 <__swbuf_r+0x84>
 8003368:	6923      	ldr	r3, [r4, #16]
 800336a:	b36b      	cbz	r3, 80033c8 <__swbuf_r+0x84>
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	6820      	ldr	r0, [r4, #0]
 8003370:	b2f6      	uxtb	r6, r6
 8003372:	1ac0      	subs	r0, r0, r3
 8003374:	6963      	ldr	r3, [r4, #20]
 8003376:	4637      	mov	r7, r6
 8003378:	4283      	cmp	r3, r0
 800337a:	dc04      	bgt.n	8003386 <__swbuf_r+0x42>
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	f7ff fa20 	bl	80027c4 <_fflush_r>
 8003384:	bb30      	cbnz	r0, 80033d4 <__swbuf_r+0x90>
 8003386:	68a3      	ldr	r3, [r4, #8]
 8003388:	3001      	adds	r0, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	60a3      	str	r3, [r4, #8]
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	6022      	str	r2, [r4, #0]
 8003394:	701e      	strb	r6, [r3, #0]
 8003396:	6963      	ldr	r3, [r4, #20]
 8003398:	4283      	cmp	r3, r0
 800339a:	d004      	beq.n	80033a6 <__swbuf_r+0x62>
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	07db      	lsls	r3, r3, #31
 80033a0:	d506      	bpl.n	80033b0 <__swbuf_r+0x6c>
 80033a2:	2e0a      	cmp	r6, #10
 80033a4:	d104      	bne.n	80033b0 <__swbuf_r+0x6c>
 80033a6:	4621      	mov	r1, r4
 80033a8:	4628      	mov	r0, r5
 80033aa:	f7ff fa0b 	bl	80027c4 <_fflush_r>
 80033ae:	b988      	cbnz	r0, 80033d4 <__swbuf_r+0x90>
 80033b0:	4638      	mov	r0, r7
 80033b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <__swbuf_r+0x9c>)
 80033b6:	429c      	cmp	r4, r3
 80033b8:	d101      	bne.n	80033be <__swbuf_r+0x7a>
 80033ba:	68ac      	ldr	r4, [r5, #8]
 80033bc:	e7cf      	b.n	800335e <__swbuf_r+0x1a>
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <__swbuf_r+0xa0>)
 80033c0:	429c      	cmp	r4, r3
 80033c2:	bf08      	it	eq
 80033c4:	68ec      	ldreq	r4, [r5, #12]
 80033c6:	e7ca      	b.n	800335e <__swbuf_r+0x1a>
 80033c8:	4621      	mov	r1, r4
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 f81e 	bl	800340c <__swsetup_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d0cb      	beq.n	800336c <__swbuf_r+0x28>
 80033d4:	f04f 37ff 	mov.w	r7, #4294967295
 80033d8:	e7ea      	b.n	80033b0 <__swbuf_r+0x6c>
 80033da:	bf00      	nop
 80033dc:	08003680 	.word	0x08003680
 80033e0:	080036a0 	.word	0x080036a0
 80033e4:	08003660 	.word	0x08003660

080033e8 <_write_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	2200      	movs	r2, #0
 80033f2:	4d05      	ldr	r5, [pc, #20]	; (8003408 <_write_r+0x20>)
 80033f4:	602a      	str	r2, [r5, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f7fd fa52 	bl	80008a0 <_write>
 80033fc:	1c43      	adds	r3, r0, #1
 80033fe:	d102      	bne.n	8003406 <_write_r+0x1e>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	b103      	cbz	r3, 8003406 <_write_r+0x1e>
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	bd38      	pop	{r3, r4, r5, pc}
 8003408:	2000017c 	.word	0x2000017c

0800340c <__swsetup_r>:
 800340c:	4b32      	ldr	r3, [pc, #200]	; (80034d8 <__swsetup_r+0xcc>)
 800340e:	b570      	push	{r4, r5, r6, lr}
 8003410:	681d      	ldr	r5, [r3, #0]
 8003412:	4606      	mov	r6, r0
 8003414:	460c      	mov	r4, r1
 8003416:	b125      	cbz	r5, 8003422 <__swsetup_r+0x16>
 8003418:	69ab      	ldr	r3, [r5, #24]
 800341a:	b913      	cbnz	r3, 8003422 <__swsetup_r+0x16>
 800341c:	4628      	mov	r0, r5
 800341e:	f7ff fa65 	bl	80028ec <__sinit>
 8003422:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <__swsetup_r+0xd0>)
 8003424:	429c      	cmp	r4, r3
 8003426:	d10f      	bne.n	8003448 <__swsetup_r+0x3c>
 8003428:	686c      	ldr	r4, [r5, #4]
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003430:	0719      	lsls	r1, r3, #28
 8003432:	d42c      	bmi.n	800348e <__swsetup_r+0x82>
 8003434:	06dd      	lsls	r5, r3, #27
 8003436:	d411      	bmi.n	800345c <__swsetup_r+0x50>
 8003438:	2309      	movs	r3, #9
 800343a:	6033      	str	r3, [r6, #0]
 800343c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	81a3      	strh	r3, [r4, #12]
 8003446:	e03e      	b.n	80034c6 <__swsetup_r+0xba>
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <__swsetup_r+0xd4>)
 800344a:	429c      	cmp	r4, r3
 800344c:	d101      	bne.n	8003452 <__swsetup_r+0x46>
 800344e:	68ac      	ldr	r4, [r5, #8]
 8003450:	e7eb      	b.n	800342a <__swsetup_r+0x1e>
 8003452:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <__swsetup_r+0xd8>)
 8003454:	429c      	cmp	r4, r3
 8003456:	bf08      	it	eq
 8003458:	68ec      	ldreq	r4, [r5, #12]
 800345a:	e7e6      	b.n	800342a <__swsetup_r+0x1e>
 800345c:	0758      	lsls	r0, r3, #29
 800345e:	d512      	bpl.n	8003486 <__swsetup_r+0x7a>
 8003460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003462:	b141      	cbz	r1, 8003476 <__swsetup_r+0x6a>
 8003464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003468:	4299      	cmp	r1, r3
 800346a:	d002      	beq.n	8003472 <__swsetup_r+0x66>
 800346c:	4630      	mov	r0, r6
 800346e:	f7ff fb4b 	bl	8002b08 <_free_r>
 8003472:	2300      	movs	r3, #0
 8003474:	6363      	str	r3, [r4, #52]	; 0x34
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800347c:	81a3      	strh	r3, [r4, #12]
 800347e:	2300      	movs	r3, #0
 8003480:	6063      	str	r3, [r4, #4]
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	6023      	str	r3, [r4, #0]
 8003486:	89a3      	ldrh	r3, [r4, #12]
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	81a3      	strh	r3, [r4, #12]
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	b94b      	cbnz	r3, 80034a6 <__swsetup_r+0x9a>
 8003492:	89a3      	ldrh	r3, [r4, #12]
 8003494:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800349c:	d003      	beq.n	80034a6 <__swsetup_r+0x9a>
 800349e:	4621      	mov	r1, r4
 80034a0:	4630      	mov	r0, r6
 80034a2:	f7ff fae9 	bl	8002a78 <__smakebuf_r>
 80034a6:	89a0      	ldrh	r0, [r4, #12]
 80034a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034ac:	f010 0301 	ands.w	r3, r0, #1
 80034b0:	d00a      	beq.n	80034c8 <__swsetup_r+0xbc>
 80034b2:	2300      	movs	r3, #0
 80034b4:	60a3      	str	r3, [r4, #8]
 80034b6:	6963      	ldr	r3, [r4, #20]
 80034b8:	425b      	negs	r3, r3
 80034ba:	61a3      	str	r3, [r4, #24]
 80034bc:	6923      	ldr	r3, [r4, #16]
 80034be:	b943      	cbnz	r3, 80034d2 <__swsetup_r+0xc6>
 80034c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034c4:	d1ba      	bne.n	800343c <__swsetup_r+0x30>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	0781      	lsls	r1, r0, #30
 80034ca:	bf58      	it	pl
 80034cc:	6963      	ldrpl	r3, [r4, #20]
 80034ce:	60a3      	str	r3, [r4, #8]
 80034d0:	e7f4      	b.n	80034bc <__swsetup_r+0xb0>
 80034d2:	2000      	movs	r0, #0
 80034d4:	e7f7      	b.n	80034c6 <__swsetup_r+0xba>
 80034d6:	bf00      	nop
 80034d8:	2000000c 	.word	0x2000000c
 80034dc:	08003680 	.word	0x08003680
 80034e0:	080036a0 	.word	0x080036a0
 80034e4:	08003660 	.word	0x08003660

080034e8 <_close_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	2300      	movs	r3, #0
 80034ec:	4d05      	ldr	r5, [pc, #20]	; (8003504 <_close_r+0x1c>)
 80034ee:	4604      	mov	r4, r0
 80034f0:	4608      	mov	r0, r1
 80034f2:	602b      	str	r3, [r5, #0]
 80034f4:	f7fd f92a 	bl	800074c <_close>
 80034f8:	1c43      	adds	r3, r0, #1
 80034fa:	d102      	bne.n	8003502 <_close_r+0x1a>
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	b103      	cbz	r3, 8003502 <_close_r+0x1a>
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	bd38      	pop	{r3, r4, r5, pc}
 8003504:	2000017c 	.word	0x2000017c

08003508 <_fstat_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	2300      	movs	r3, #0
 800350c:	4d06      	ldr	r5, [pc, #24]	; (8003528 <_fstat_r+0x20>)
 800350e:	4604      	mov	r4, r0
 8003510:	4608      	mov	r0, r1
 8003512:	4611      	mov	r1, r2
 8003514:	602b      	str	r3, [r5, #0]
 8003516:	f7fd f924 	bl	8000762 <_fstat>
 800351a:	1c43      	adds	r3, r0, #1
 800351c:	d102      	bne.n	8003524 <_fstat_r+0x1c>
 800351e:	682b      	ldr	r3, [r5, #0]
 8003520:	b103      	cbz	r3, 8003524 <_fstat_r+0x1c>
 8003522:	6023      	str	r3, [r4, #0]
 8003524:	bd38      	pop	{r3, r4, r5, pc}
 8003526:	bf00      	nop
 8003528:	2000017c 	.word	0x2000017c

0800352c <_isatty_r>:
 800352c:	b538      	push	{r3, r4, r5, lr}
 800352e:	2300      	movs	r3, #0
 8003530:	4d05      	ldr	r5, [pc, #20]	; (8003548 <_isatty_r+0x1c>)
 8003532:	4604      	mov	r4, r0
 8003534:	4608      	mov	r0, r1
 8003536:	602b      	str	r3, [r5, #0]
 8003538:	f7fd f922 	bl	8000780 <_isatty>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_isatty_r+0x1a>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_isatty_r+0x1a>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	2000017c 	.word	0x2000017c

0800354c <_lseek_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4604      	mov	r4, r0
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	2200      	movs	r2, #0
 8003556:	4d05      	ldr	r5, [pc, #20]	; (800356c <_lseek_r+0x20>)
 8003558:	602a      	str	r2, [r5, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	f7fd f91a 	bl	8000794 <_lseek>
 8003560:	1c43      	adds	r3, r0, #1
 8003562:	d102      	bne.n	800356a <_lseek_r+0x1e>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	b103      	cbz	r3, 800356a <_lseek_r+0x1e>
 8003568:	6023      	str	r3, [r4, #0]
 800356a:	bd38      	pop	{r3, r4, r5, pc}
 800356c:	2000017c 	.word	0x2000017c

08003570 <memchr>:
 8003570:	4603      	mov	r3, r0
 8003572:	b510      	push	{r4, lr}
 8003574:	b2c9      	uxtb	r1, r1
 8003576:	4402      	add	r2, r0
 8003578:	4293      	cmp	r3, r2
 800357a:	4618      	mov	r0, r3
 800357c:	d101      	bne.n	8003582 <memchr+0x12>
 800357e:	2000      	movs	r0, #0
 8003580:	e003      	b.n	800358a <memchr+0x1a>
 8003582:	7804      	ldrb	r4, [r0, #0]
 8003584:	3301      	adds	r3, #1
 8003586:	428c      	cmp	r4, r1
 8003588:	d1f6      	bne.n	8003578 <memchr+0x8>
 800358a:	bd10      	pop	{r4, pc}

0800358c <__malloc_lock>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__malloc_lock+0x8>)
 800358e:	f7ff ba4b 	b.w	8002a28 <__retarget_lock_acquire_recursive>
 8003592:	bf00      	nop
 8003594:	20000170 	.word	0x20000170

08003598 <__malloc_unlock>:
 8003598:	4801      	ldr	r0, [pc, #4]	; (80035a0 <__malloc_unlock+0x8>)
 800359a:	f7ff ba46 	b.w	8002a2a <__retarget_lock_release_recursive>
 800359e:	bf00      	nop
 80035a0:	20000170 	.word	0x20000170

080035a4 <_read_r>:
 80035a4:	b538      	push	{r3, r4, r5, lr}
 80035a6:	4604      	mov	r4, r0
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	2200      	movs	r2, #0
 80035ae:	4d05      	ldr	r5, [pc, #20]	; (80035c4 <_read_r+0x20>)
 80035b0:	602a      	str	r2, [r5, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f7fd f992 	bl	80008dc <_read>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_read_r+0x1e>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_read_r+0x1e>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	2000017c 	.word	0x2000017c

080035c8 <_init>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	bf00      	nop
 80035cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ce:	bc08      	pop	{r3}
 80035d0:	469e      	mov	lr, r3
 80035d2:	4770      	bx	lr

080035d4 <_fini>:
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d6:	bf00      	nop
 80035d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035da:	bc08      	pop	{r3}
 80035dc:	469e      	mov	lr, r3
 80035de:	4770      	bx	lr
