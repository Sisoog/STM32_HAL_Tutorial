
10_Redirecting stdio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080056c0  080056c0  000156c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b9c  08005b9c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005b9c  08005b9c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b9c  08005b9c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b9c  08005b9c  00015b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08005d80  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005d80  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f43  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001909  00000000  00000000  00027148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  000291c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b2d  00000000  00000000  00029880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008495  00000000  00000000  000413ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008393f  00000000  00000000  00049842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  000cd1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080056a4 	.word	0x080056a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080056a4 	.word	0x080056a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09e      	sub	sp, #120	; 0x78
 8000a8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fab5 	bl	8000ffc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f85b 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 f8c9 	bl	8000c2c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000a9a:	f000 f89d 	bl	8000bd8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);		// initializing the stdio retargetting
 8000a9e:	4820      	ldr	r0, [pc, #128]	; (8000b20 <main+0x98>)
 8000aa0:	f000 fa58 	bl	8000f54 <RetargetInit>

  // testing different input formats for printf
  printf("Characters: %c %c\n\r", 'a', 65);
 8000aa4:	2241      	movs	r2, #65	; 0x41
 8000aa6:	2161      	movs	r1, #97	; 0x61
 8000aa8:	481e      	ldr	r0, [pc, #120]	; (8000b24 <main+0x9c>)
 8000aaa:	f002 fc71 	bl	8003390 <iprintf>
  printf("Decimals: %d %ld\n\r", 1977, 650000L);
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <main+0xa0>)
 8000ab0:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <main+0xa4>)
 8000ab6:	f002 fc6b 	bl	8003390 <iprintf>
  printf("Preceding with blanks: %10d\n\r", 1977);
 8000aba:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8000abe:	481c      	ldr	r0, [pc, #112]	; (8000b30 <main+0xa8>)
 8000ac0:	f002 fc66 	bl	8003390 <iprintf>
  printf("Preceding with zeros: %010d\n\r", 1977);
 8000ac4:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8000ac8:	481a      	ldr	r0, [pc, #104]	; (8000b34 <main+0xac>)
 8000aca:	f002 fc61 	bl	8003390 <iprintf>
  printf("Some different radices: %d %x %o %#x %#o\n\r", 100, 100, 100, 100, 100);
 8000ace:	2364      	movs	r3, #100	; 0x64
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2264      	movs	r2, #100	; 0x64
 8000ada:	2164      	movs	r1, #100	; 0x64
 8000adc:	4816      	ldr	r0, [pc, #88]	; (8000b38 <main+0xb0>)
 8000ade:	f002 fc57 	bl	8003390 <iprintf>
  printf("floats: %4.2f %+.0e %E\n\r", 3.1416, 3.1416, 3.1416);
 8000ae2:	a30d      	add	r3, pc, #52	; (adr r3, 8000b18 <main+0x90>)
 8000ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000aec:	a30a      	add	r3, pc, #40	; (adr r3, 8000b18 <main+0x90>)
 8000aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af2:	e9cd 2300 	strd	r2, r3, [sp]
 8000af6:	a308      	add	r3, pc, #32	; (adr r3, 8000b18 <main+0x90>)
 8000af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afc:	480f      	ldr	r0, [pc, #60]	; (8000b3c <main+0xb4>)
 8000afe:	f002 fc47 	bl	8003390 <iprintf>
  printf("Width trick: %*d\n\r", 5, 10);
 8000b02:	220a      	movs	r2, #10
 8000b04:	2105      	movs	r1, #5
 8000b06:	480e      	ldr	r0, [pc, #56]	; (8000b40 <main+0xb8>)
 8000b08:	f002 fc42 	bl	8003390 <iprintf>
  printf("%s\n\r", "A string");
 8000b0c:	490d      	ldr	r1, [pc, #52]	; (8000b44 <main+0xbc>)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <main+0xc0>)
 8000b10:	f002 fc3e 	bl	8003390 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x8c>
 8000b16:	bf00      	nop
 8000b18:	2e48e8a7 	.word	0x2e48e8a7
 8000b1c:	400921ff 	.word	0x400921ff
 8000b20:	200001f8 	.word	0x200001f8
 8000b24:	080056c0 	.word	0x080056c0
 8000b28:	0009eb10 	.word	0x0009eb10
 8000b2c:	080056d4 	.word	0x080056d4
 8000b30:	080056e8 	.word	0x080056e8
 8000b34:	08005708 	.word	0x08005708
 8000b38:	08005728 	.word	0x08005728
 8000b3c:	08005754 	.word	0x08005754
 8000b40:	08005770 	.word	0x08005770
 8000b44:	08005784 	.word	0x08005784
 8000b48:	08005790 	.word	0x08005790

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b090      	sub	sp, #64	; 0x40
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2228      	movs	r2, #40	; 0x28
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 ffb0 	bl	8002ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 0318 	add.w	r3, r7, #24
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fdd5 	bl	8001744 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f866 	bl	8000c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f842 	bl	8001c48 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bca:	f000 f851 	bl	8000c70 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3740      	adds	r7, #64	; 0x40
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <MX_USART1_UART_Init+0x50>)
 8000be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_USART1_UART_Init+0x4c>)
 8000c10:	f001 f9b2 	bl	8001f78 <HAL_UART_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f829 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001f8 	.word	0x200001f8
 8000c28:	40013800 	.word	0x40013800

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a0d      	ldr	r2, [pc, #52]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c38:	f043 0320 	orr.w	r3, r3, #32
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0320 	and.w	r3, r3, #32
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_GPIO_Init+0x40>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]

}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	61d3      	str	r3, [r2, #28]
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_MspInit+0x5c>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_MspInit+0x60>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_MspInit+0x60>)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a20      	ldr	r2, [pc, #128]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d139      	bne.n	8000d74 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d00:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1e      	ldr	r2, [pc, #120]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480f      	ldr	r0, [pc, #60]	; (8000d84 <HAL_UART_MspInit+0xa4>)
 8000d46:	f000 fb79 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_UART_MspInit+0xa4>)
 8000d60:	f000 fb6c 	bl	800143c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2025      	movs	r0, #37	; 0x25
 8000d6a:	f000 fa80 	bl	800126e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6e:	2025      	movs	r0, #37	; 0x25
 8000d70:	f000 fa99 	bl	80012a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dce:	f000 f95b 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <USART1_IRQHandler+0x10>)
 8000dde:	f001 fa4d 	bl	800227c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001f8 	.word	0x200001f8

08000dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr

08000dfa <_kill>:

int _kill(int pid, int sig)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e04:	f001 fe32 	bl	8002a6c <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2216      	movs	r2, #22
 8000e0c:	601a      	str	r2, [r3, #0]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_exit>:

void _exit (int status)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e22:	f04f 31ff 	mov.w	r1, #4294967295
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffe7 	bl	8000dfa <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e2c:	e7fe      	b.n	8000e2c <_exit+0x12>

08000e2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	b083      	sub	sp, #12
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
	return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e54:	605a      	str	r2, [r3, #4]
	return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
	return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b085      	sub	sp, #20
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
	return 0;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f001 fdd4 	bl	8002a6c <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20005000 	.word	0x20005000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	2000023c 	.word	0x2000023c
 8000ef8:	20000258 	.word	0x20000258

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f10:	e002      	b.n	8000f18 <LoopCopyDataInit>

08000f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f16:	3304      	adds	r3, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f1c:	d3f9      	bcc.n	8000f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f20:	4c0a      	ldr	r4, [pc, #40]	; (8000f4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f24:	e001      	b.n	8000f2a <LoopFillZerobss>

08000f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f28:	3204      	adds	r2, #4

08000f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f2c:	d3fb      	bcc.n	8000f26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f2e:	f7ff ffe5 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f001 fda1 	bl	8002a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff fda7 	bl	8000a88 <main>
  bx lr
 8000f3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000f44:	08005ba4 	.word	0x08005ba4
  ldr r2, =_sbss
 8000f48:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000f4c:	20000258 	.word	0x20000258

08000f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_2_IRQHandler>
	...

08000f54 <RetargetInit>:


UART_HandleTypeDef *gHuart;

//Initialization function sets the uart handler
void RetargetInit(UART_HandleTypeDef *huart) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <RetargetInit+0x28>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <RetargetInit+0x2c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6898      	ldr	r0, [r3, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f002 fa27 	bl	80033c0 <setvbuf>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000240 	.word	0x20000240
 8000f80:	2000000c 	.word	0x2000000c

08000f84 <_write>:

//Definition of the underlying function for std out
int _write(int fd, char* ptr, int len) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <_write+0x38>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	f001 f838 	bl	8002012 <HAL_UART_Transmit>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <_write+0x2c>
    	return len;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	e001      	b.n	8000fb4 <_write+0x30>
    else
    	return -1;
 8000fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000240 	.word	0x20000240

08000fc0 <_read>:

//Definition of the underlying function for std in
int _read(int fd, char* ptr, int len) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <_read+0x38>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	68b9      	ldr	r1, [r7, #8]
 8000fd8:	f001 f8ad 	bl	8002136 <HAL_UART_Receive>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <_read+0x2a>
    	return 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e001      	b.n	8000fee <_read+0x2e>
    else
    	return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000240 	.word	0x20000240

08000ffc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_Init+0x28>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <HAL_Init+0x28>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 f923 	bl	8001258 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001012:	200f      	movs	r0, #15
 8001014:	f000 f808 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001018:	f7ff fe30 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f93b 	bl	80012c2 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f903 	bl	800126e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr
 80010a4:	20000008 	.word	0x20000008
 80010a8:	20000244 	.word	0x20000244

080010ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	20000244 	.word	0x20000244

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <__NVIC_EnableIRQ+0x34>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001224:	d301      	bcc.n	800122a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001226:	2301      	movs	r3, #1
 8001228:	e00f      	b.n	800124a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <SysTick_Config+0x40>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001232:	210f      	movs	r1, #15
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f7ff ff90 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <SysTick_Config+0x40>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <SysTick_Config+0x40>)
 8001244:	2207      	movs	r2, #7
 8001246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010

08001258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff2d 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001280:	f7ff ff42 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001284:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff ff90 	bl	80011b0 <NVIC_EncodePriority>
 8001290:	4602      	mov	r2, r0
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	4611      	mov	r1, r2
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff5f 	bl	800115c <__NVIC_SetPriority>
}
 800129e:	bf00      	nop
 80012a0:	3718      	adds	r7, #24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	4603      	mov	r3, r0
 80012ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff35 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffa2 	bl	8001214 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012da:	b480      	push	{r7}
 80012dc:	b085      	sub	sp, #20
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d008      	beq.n	8001302 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2204      	movs	r2, #4
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e020      	b.n	8001344 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 020e 	bic.w	r2, r2, #14
 8001310:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132a:	2101      	movs	r1, #1
 800132c:	fa01 f202 	lsl.w	r2, r1, r2
 8001330:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2201      	movs	r2, #1
 8001336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001342:	7bfb      	ldrb	r3, [r7, #15]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
	...

08001350 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001362:	2b02      	cmp	r3, #2
 8001364:	d005      	beq.n	8001372 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2204      	movs	r2, #4
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e051      	b.n	8001416 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 020e 	bic.w	r2, r2, #14
 8001380:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_DMA_Abort_IT+0xd0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d029      	beq.n	80013f0 <HAL_DMA_Abort_IT+0xa0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <HAL_DMA_Abort_IT+0xd4>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_Abort_IT+0x9c>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1f      	ldr	r2, [pc, #124]	; (8001428 <HAL_DMA_Abort_IT+0xd8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01a      	beq.n	80013e6 <HAL_DMA_Abort_IT+0x96>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_DMA_Abort_IT+0xdc>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d012      	beq.n	80013e0 <HAL_DMA_Abort_IT+0x90>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <HAL_DMA_Abort_IT+0xe0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00a      	beq.n	80013da <HAL_DMA_Abort_IT+0x8a>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <HAL_DMA_Abort_IT+0xe4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d102      	bne.n	80013d4 <HAL_DMA_Abort_IT+0x84>
 80013ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013d2:	e00e      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d8:	e00b      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013de:	e008      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	e005      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	e002      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013ec:	2310      	movs	r3, #16
 80013ee:	e000      	b.n	80013f2 <HAL_DMA_Abort_IT+0xa2>
 80013f0:	2301      	movs	r3, #1
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_DMA_Abort_IT+0xe8>)
 80013f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	4798      	blx	r3
    } 
  }
  return status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020008 	.word	0x40020008
 8001424:	4002001c 	.word	0x4002001c
 8001428:	40020030 	.word	0x40020030
 800142c:	40020044 	.word	0x40020044
 8001430:	40020058 	.word	0x40020058
 8001434:	4002006c 	.word	0x4002006c
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	e169      	b.n	8001724 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001450:	2201      	movs	r2, #1
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8158 	bne.w	800171e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a9a      	ldr	r2, [pc, #616]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d05e      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001478:	4a98      	ldr	r2, [pc, #608]	; (80016dc <HAL_GPIO_Init+0x2a0>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d875      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800147e:	4a98      	ldr	r2, [pc, #608]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d058      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001484:	4a96      	ldr	r2, [pc, #600]	; (80016e0 <HAL_GPIO_Init+0x2a4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d86f      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 800148a:	4a96      	ldr	r2, [pc, #600]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d052      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 8001490:	4a94      	ldr	r2, [pc, #592]	; (80016e4 <HAL_GPIO_Init+0x2a8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d869      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 8001496:	4a94      	ldr	r2, [pc, #592]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d04c      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <HAL_GPIO_Init+0x2ac>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d863      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014a2:	4a92      	ldr	r2, [pc, #584]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d046      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
 80014a8:	4a90      	ldr	r2, [pc, #576]	; (80016ec <HAL_GPIO_Init+0x2b0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d85d      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d82a      	bhi.n	8001508 <HAL_GPIO_Init+0xcc>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d859      	bhi.n	800156a <HAL_GPIO_Init+0x12e>
 80014b6:	a201      	add	r2, pc, #4	; (adr r2, 80014bc <HAL_GPIO_Init+0x80>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001511 	.word	0x08001511
 80014c4:	08001523 	.word	0x08001523
 80014c8:	08001565 	.word	0x08001565
 80014cc:	0800156b 	.word	0x0800156b
 80014d0:	0800156b 	.word	0x0800156b
 80014d4:	0800156b 	.word	0x0800156b
 80014d8:	0800156b 	.word	0x0800156b
 80014dc:	0800156b 	.word	0x0800156b
 80014e0:	0800156b 	.word	0x0800156b
 80014e4:	0800156b 	.word	0x0800156b
 80014e8:	0800156b 	.word	0x0800156b
 80014ec:	0800156b 	.word	0x0800156b
 80014f0:	0800156b 	.word	0x0800156b
 80014f4:	0800156b 	.word	0x0800156b
 80014f8:	0800156b 	.word	0x0800156b
 80014fc:	0800156b 	.word	0x0800156b
 8001500:	08001519 	.word	0x08001519
 8001504:	0800152d 	.word	0x0800152d
 8001508:	4a79      	ldr	r2, [pc, #484]	; (80016f0 <HAL_GPIO_Init+0x2b4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d013      	beq.n	8001536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800150e:	e02c      	b.n	800156a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	623b      	str	r3, [r7, #32]
          break;
 8001516:	e029      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	3304      	adds	r3, #4
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e024      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	3308      	adds	r3, #8
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e01f      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	330c      	adds	r3, #12
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e01a      	b.n	800156c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153e:	2304      	movs	r3, #4
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e013      	b.n	800156c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800154c:	2308      	movs	r3, #8
 800154e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	611a      	str	r2, [r3, #16]
          break;
 8001556:	e009      	b.n	800156c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001558:	2308      	movs	r3, #8
 800155a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	615a      	str	r2, [r3, #20]
          break;
 8001562:	e003      	b.n	800156c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e000      	b.n	800156c <HAL_GPIO_Init+0x130>
          break;
 800156a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	2bff      	cmp	r3, #255	; 0xff
 8001570:	d801      	bhi.n	8001576 <HAL_GPIO_Init+0x13a>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	e001      	b.n	800157a <HAL_GPIO_Init+0x13e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3304      	adds	r3, #4
 800157a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	; 0xff
 8001580:	d802      	bhi.n	8001588 <HAL_GPIO_Init+0x14c>
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x152>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	3b08      	subs	r3, #8
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	210f      	movs	r1, #15
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	fa01 f303 	lsl.w	r3, r1, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	401a      	ands	r2, r3
 80015a0:	6a39      	ldr	r1, [r7, #32]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80b1 	beq.w	800171e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a4c      	ldr	r2, [pc, #304]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_GPIO_Init+0x2b8>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d4:	4a48      	ldr	r2, [pc, #288]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	089b      	lsrs	r3, r3, #2
 80015da:	3302      	adds	r3, #2
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	220f      	movs	r2, #15
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a40      	ldr	r2, [pc, #256]	; (80016fc <HAL_GPIO_Init+0x2c0>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x1ec>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a3f      	ldr	r2, [pc, #252]	; (8001700 <HAL_GPIO_Init+0x2c4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d00d      	beq.n	8001624 <HAL_GPIO_Init+0x1e8>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <HAL_GPIO_Init+0x2c8>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d007      	beq.n	8001620 <HAL_GPIO_Init+0x1e4>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3d      	ldr	r2, [pc, #244]	; (8001708 <HAL_GPIO_Init+0x2cc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d101      	bne.n	800161c <HAL_GPIO_Init+0x1e0>
 8001618:	2303      	movs	r3, #3
 800161a:	e006      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 800161c:	2304      	movs	r3, #4
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001620:	2302      	movs	r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1ee>
 8001628:	2300      	movs	r3, #0
 800162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163a:	492f      	ldr	r1, [pc, #188]	; (80016f8 <HAL_GPIO_Init+0x2bc>)
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	492c      	ldr	r1, [pc, #176]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001662:	4b2a      	ldr	r3, [pc, #168]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	43db      	mvns	r3, r3
 800166a:	4928      	ldr	r1, [pc, #160]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800166c:	4013      	ands	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d006      	beq.n	800168a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	604b      	str	r3, [r1, #4]
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_GPIO_Init+0x2d0>)
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	43db      	mvns	r3, r3
 8001692:	491e      	ldr	r1, [pc, #120]	; (800170c <HAL_GPIO_Init+0x2d0>)
 8001694:	4013      	ands	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d006      	beq.n	80016b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	4918      	ldr	r1, [pc, #96]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
 80016b0:	e006      	b.n	80016c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	4914      	ldr	r1, [pc, #80]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016bc:	4013      	ands	r3, r2
 80016be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d021      	beq.n	8001710 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_GPIO_Init+0x2d0>)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
 80016d8:	e021      	b.n	800171e <HAL_GPIO_Init+0x2e2>
 80016da:	bf00      	nop
 80016dc:	10320000 	.word	0x10320000
 80016e0:	10310000 	.word	0x10310000
 80016e4:	10220000 	.word	0x10220000
 80016e8:	10210000 	.word	0x10210000
 80016ec:	10120000 	.word	0x10120000
 80016f0:	10110000 	.word	0x10110000
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40010800 	.word	0x40010800
 8001700:	40010c00 	.word	0x40010c00
 8001704:	40011000 	.word	0x40011000
 8001708:	40011400 	.word	0x40011400
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_GPIO_Init+0x304>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4909      	ldr	r1, [pc, #36]	; (8001740 <HAL_GPIO_Init+0x304>)
 800171a:	4013      	ands	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae8e 	bne.w	8001450 <HAL_GPIO_Init+0x14>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	; 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e272      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8087 	beq.w	8001872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
 800177c:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d06c      	beq.n	8001870 <HAL_RCC_OscConfig+0x12c>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d168      	bne.n	8001870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e24c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x76>
 80017ac:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a7f      	ldr	r2, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e02e      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x98>
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a7a      	ldr	r2, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b78      	ldr	r3, [pc, #480]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a77      	ldr	r2, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0xbc>
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a71      	ldr	r2, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6e      	ldr	r2, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xd4>
 8001800:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fc44 	bl	80010ac <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fc40 	bl	80010ac <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	; 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e200      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5d      	ldr	r3, [pc, #372]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xe4>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fc30 	bl	80010ac <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fc2c 	bl	80010ac <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1ec      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x10c>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800187e:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
 8001896:	4b46      	ldr	r3, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c0      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4939      	ldr	r1, [pc, #228]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fbe5 	bl	80010ac <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fbe1 	bl	80010ac <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4927      	ldr	r1, [pc, #156]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <HAL_RCC_OscConfig+0x270>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fbc4 	bl	80010ac <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff fbc0 	bl	80010ac <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e180      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d019      	beq.n	800198e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001960:	f7ff fba4 	bl	80010ac <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fba0 	bl	80010ac <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e160      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001986:	2001      	movs	r0, #1
 8001988:	f000 fad8 	bl	8001f3c <RCC_Delay>
 800198c:	e01c      	b.n	80019c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fb8a 	bl	80010ac <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00f      	b.n	80019bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800199c:	f7ff fb86 	bl	80010ac <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d908      	bls.n	80019bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e146      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 80019ae:	bf00      	nop
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420000 	.word	0x42420000
 80019b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019bc:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1e9      	bne.n	800199c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80a6 	beq.w	8001b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019da:	4b8b      	ldr	r3, [pc, #556]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e6:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b85      	ldr	r3, [pc, #532]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7e      	ldr	r2, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fb47 	bl	80010ac <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fb43 	bl	80010ac <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b64      	cmp	r3, #100	; 0x64
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e103      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b75      	ldr	r3, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x4c8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x312>
 8001a48:	4b6f      	ldr	r3, [pc, #444]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6213      	str	r3, [r2, #32]
 8001a54:	e02d      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x334>
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a69      	ldr	r2, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a66      	ldr	r2, [pc, #408]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	e01c      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b05      	cmp	r3, #5
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0x356>
 8001a80:	4b61      	ldr	r3, [pc, #388]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4a60      	ldr	r2, [pc, #384]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6213      	str	r3, [r2, #32]
 8001a8c:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x36e>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	4b58      	ldr	r3, [pc, #352]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff faf7 	bl	80010ac <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac2:	f7ff faf3 	bl	80010ac <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e0b1      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fae1 	bl	80010ac <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aec:	e00a      	b.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fadd 	bl	80010ac <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1ee      	bne.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b10:	7dfb      	ldrb	r3, [r7, #23]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a3b      	ldr	r2, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 8087 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d061      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d146      	bne.n	8001bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b33      	ldr	r3, [pc, #204]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fab1 	bl	80010ac <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7ff faad 	bl	80010ac <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e06d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b74:	d108      	bne.n	8001b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a19      	ldr	r1, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	491b      	ldr	r1, [pc, #108]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa81 	bl	80010ac <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bae:	f7ff fa7d 	bl	80010ac <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03d      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x46a>
 8001bcc:	e035      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fa6a 	bl	80010ac <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa66 	bl	80010ac <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e026      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x498>
 8001bfa:	e01e      	b.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40007000 	.word	0x40007000
 8001c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x500>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0207 	bic.w	r2, r3, #7
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f9b8 	bl	80010ac <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f9b4 	bl	80010ac <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1cc>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f916 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080057a8 	.word	0x080057a8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b490      	push	{r4, r7}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e24:	1d3c      	adds	r4, r7, #4
 8001e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e2c:	f240 2301 	movw	r3, #513	; 0x201
 8001e30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x40>
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x46>
 8001e5a:	e02b      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e5e:	623b      	str	r3, [r7, #32]
      break;
 8001e60:	e02b      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	0c9b      	lsrs	r3, r3, #18
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3328      	adds	r3, #40	; 0x28
 8001e6c:	443b      	add	r3, r7
 8001e6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0c5b      	lsrs	r3, r3, #17
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	3328      	adds	r3, #40	; 0x28
 8001e8a:	443b      	add	r3, r7
 8001e8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea2:	e004      	b.n	8001eae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	623b      	str	r3, [r7, #32]
      break;
 8001eb2:	e002      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb6:	623b      	str	r3, [r7, #32]
      break;
 8001eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eba:	6a3b      	ldr	r3, [r7, #32]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc90      	pop	{r4, r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	08005798 	.word	0x08005798
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	007a1200 	.word	0x007a1200
 8001ed4:	003d0900 	.word	0x003d0900

08001ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ef0:	f7ff fff2 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4903      	ldr	r1, [pc, #12]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	080057b8 	.word	0x080057b8

08001f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0adb      	lsrs	r3, r3, #11
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	4903      	ldr	r1, [pc, #12]	; (8001f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000
 8001f38:	080057b8 	.word	0x080057b8

08001f3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <RCC_Delay+0x34>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <RCC_Delay+0x38>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0a5b      	lsrs	r3, r3, #9
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	fb02 f303 	mul.w	r3, r2, r3
 8001f56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f58:	bf00      	nop
  }
  while (Delay --);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1e5a      	subs	r2, r3, #1
 8001f5e:	60fa      	str	r2, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f9      	bne.n	8001f58 <RCC_Delay+0x1c>
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	20000000 	.word	0x20000000
 8001f74:	10624dd3 	.word	0x10624dd3

08001f78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e03f      	b.n	800200a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fe9e 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fcc7 	bl	8002950 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b08a      	sub	sp, #40	; 0x28
 8002016:	af02      	add	r7, sp, #8
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b20      	cmp	r3, #32
 8002030:	d17c      	bne.n	800212c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_UART_Transmit+0x2c>
 8002038:	88fb      	ldrh	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e075      	b.n	800212e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_UART_Transmit+0x3e>
 800204c:	2302      	movs	r3, #2
 800204e:	e06e      	b.n	800212e <HAL_UART_Transmit+0x11c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2221      	movs	r2, #33	; 0x21
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002066:	f7ff f821 	bl	80010ac <HAL_GetTick>
 800206a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	88fa      	ldrh	r2, [r7, #6]
 8002076:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d108      	bne.n	8002094 <HAL_UART_Transmit+0x82>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d104      	bne.n	8002094 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	e003      	b.n	800209c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020a4:	e02a      	b.n	80020fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fab3 	bl	800261c <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e036      	b.n	800212e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10b      	bne.n	80020de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3302      	adds	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e007      	b.n	80020ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	3301      	adds	r3, #1
 80020ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1cf      	bne.n	80020a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2200      	movs	r2, #0
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fa83 	bl	800261c <UART_WaitOnFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e006      	b.n	800212e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3720      	adds	r7, #32
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b08a      	sub	sp, #40	; 0x28
 800213a:	af02      	add	r7, sp, #8
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b20      	cmp	r3, #32
 8002154:	f040 808c 	bne.w	8002270 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <HAL_UART_Receive+0x2e>
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e084      	b.n	8002272 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800216e:	2b01      	cmp	r3, #1
 8002170:	d101      	bne.n	8002176 <HAL_UART_Receive+0x40>
 8002172:	2302      	movs	r3, #2
 8002174:	e07d      	b.n	8002272 <HAL_UART_Receive+0x13c>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2222      	movs	r2, #34	; 0x22
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002192:	f7fe ff8b 	bl	80010ac <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ac:	d108      	bne.n	80021c0 <HAL_UART_Receive+0x8a>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e003      	b.n	80021c8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021d0:	e043      	b.n	800225a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2120      	movs	r1, #32
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fa1d 	bl	800261c <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e042      	b.n	8002272 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	b29a      	uxth	r2, r3
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	3302      	adds	r3, #2
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	e01f      	b.n	800224c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002214:	d007      	beq.n	8002226 <HAL_UART_Receive+0xf0>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10a      	bne.n	8002234 <HAL_UART_Receive+0xfe>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	701a      	strb	r2, [r3, #0]
 8002232:	e008      	b.n	8002246 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002240:	b2da      	uxtb	r2, r3
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1b6      	bne.n	80021d2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10d      	bne.n	80022ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_UART_IRQHandler+0x52>
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fa99 	bl	80027fe <UART_Receive_IT>
      return;
 80022cc:	e17b      	b.n	80025c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80b1 	beq.w	8002438 <HAL_UART_IRQHandler+0x1bc>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <HAL_UART_IRQHandler+0x70>
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80a6 	beq.w	8002438 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_UART_IRQHandler+0x90>
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_UART_IRQHandler+0xb0>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_UART_IRQHandler+0xd0>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00f      	beq.n	8002376 <HAL_UART_IRQHandler+0xfa>
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_UART_IRQHandler+0xee>
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0208 	orr.w	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 811e 	beq.w	80025bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_UART_IRQHandler+0x11e>
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 fa32 	bl	80027fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <HAL_UART_IRQHandler+0x146>
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d031      	beq.n	8002426 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f974 	bl	80026b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d023      	beq.n	800241e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d013      	beq.n	8002416 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4a76      	ldr	r2, [pc, #472]	; (80025cc <HAL_UART_IRQHandler+0x350>)
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe ffa8 	bl	8001350 <HAL_DMA_Abort_IT>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d016      	beq.n	8002434 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002410:	4610      	mov	r0, r2
 8002412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	e00e      	b.n	8002434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8ec 	bl	80025f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	e00a      	b.n	8002434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f8e8 	bl	80025f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e006      	b.n	8002434 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8e4 	bl	80025f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002432:	e0c3      	b.n	80025bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	bf00      	nop
    return;
 8002436:	e0c1      	b.n	80025bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	2b01      	cmp	r3, #1
 800243e:	f040 80a1 	bne.w	8002584 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 809b 	beq.w	8002584 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8095 	beq.w	8002584 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d04e      	beq.n	800251c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002488:	8a3b      	ldrh	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8098 	beq.w	80025c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002494:	8a3a      	ldrh	r2, [r7, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	f080 8092 	bcs.w	80025c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8a3a      	ldrh	r2, [r7, #16]
 80024a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d02b      	beq.n	8002504 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695a      	ldr	r2, [r3, #20]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695a      	ldr	r2, [r3, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0210 	bic.w	r2, r2, #16
 80024f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe feeb 	bl	80012da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800250c:	b29b      	uxth	r3, r3
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	b29b      	uxth	r3, r3
 8002512:	4619      	mov	r1, r3
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f876 	bl	8002606 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800251a:	e051      	b.n	80025c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002524:	b29b      	uxth	r3, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800252e:	b29b      	uxth	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d047      	beq.n	80025c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002534:	8a7b      	ldrh	r3, [r7, #18]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d044      	beq.n	80025c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002548:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0210 	bic.w	r2, r2, #16
 8002576:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002578:	8a7b      	ldrh	r3, [r7, #18]
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f842 	bl	8002606 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002582:	e01f      	b.n	80025c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_UART_IRQHandler+0x324>
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 f8c9 	bl	8002730 <UART_Transmit_IT>
    return;
 800259e:	e012      	b.n	80025c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <HAL_UART_IRQHandler+0x34a>
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f90a 	bl	80027ce <UART_EndTransmit_IT>
    return;
 80025ba:	e004      	b.n	80025c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80025bc:	bf00      	nop
 80025be:	e002      	b.n	80025c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80025c0:	bf00      	nop
 80025c2:	e000      	b.n	80025c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80025c4:	bf00      	nop
  }
}
 80025c6:	3728      	adds	r7, #40	; 0x28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	08002709 	.word	0x08002709

080025d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	4613      	mov	r3, r2
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800262c:	e02c      	b.n	8002688 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d028      	beq.n	8002688 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <UART_WaitOnFlagUntilTimeout+0x30>
 800263c:	f7fe fd36 	bl	80010ac <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	429a      	cmp	r2, r3
 800264a:	d21d      	bcs.n	8002688 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800265a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e00f      	b.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4013      	ands	r3, r2
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d0c3      	beq.n	800262e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d107      	bne.n	80026f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0210 	bic.w	r2, r2, #16
 80026ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7ff ff66 	bl	80025f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b21      	cmp	r3, #33	; 0x21
 8002742:	d13e      	bne.n	80027c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274c:	d114      	bne.n	8002778 <UART_Transmit_IT+0x48>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d110      	bne.n	8002778 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800276a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	1c9a      	adds	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]
 8002776:	e008      	b.n	800278a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	1c59      	adds	r1, r3, #1
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6211      	str	r1, [r2, #32]
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4619      	mov	r1, r3
 8002798:	84d1      	strh	r1, [r2, #38]	; 0x26
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10f      	bne.n	80027be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff feee 	bl	80025d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b22      	cmp	r3, #34	; 0x22
 8002810:	f040 8099 	bne.w	8002946 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281c:	d117      	bne.n	800284e <UART_Receive_IT+0x50>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d113      	bne.n	800284e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283c:	b29a      	uxth	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	1c9a      	adds	r2, r3, #2
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
 800284c:	e026      	b.n	800289c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d007      	beq.n	8002872 <UART_Receive_IT+0x74>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <UART_Receive_IT+0x82>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e008      	b.n	8002892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288c:	b2da      	uxtb	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d148      	bne.n	8002942 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0220 	bic.w	r2, r2, #32
 80028be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d123      	bne.n	8002938 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0210 	bic.w	r2, r2, #16
 8002904:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b10      	cmp	r3, #16
 8002912:	d10a      	bne.n	800292a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fe68 	bl	8002606 <HAL_UARTEx_RxEventCallback>
 8002936:	e002      	b.n	800293e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff fe52 	bl	80025e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e002      	b.n	8002948 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002946:	2302      	movs	r3, #2
  }
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800298a:	f023 030c 	bic.w	r3, r3, #12
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	430b      	orrs	r3, r1
 8002996:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <UART_SetConfig+0x114>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d103      	bne.n	80029c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029b8:	f7ff faac 	bl	8001f14 <HAL_RCC_GetPCLK2Freq>
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	e002      	b.n	80029c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029c0:	f7ff fa94 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <UART_SetConfig+0x118>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	0119      	lsls	r1, r3, #4
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <UART_SetConfig+0x118>)
 80029fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	3332      	adds	r3, #50	; 0x32
 8002a10:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <UART_SetConfig+0x118>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1c:	4419      	add	r1, r3
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	009a      	lsls	r2, r3, #2
 8002a28:	441a      	add	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <UART_SetConfig+0x118>)
 8002a36:	fba3 0302 	umull	r0, r3, r3, r2
 8002a3a:	095b      	lsrs	r3, r3, #5
 8002a3c:	2064      	movs	r0, #100	; 0x64
 8002a3e:	fb00 f303 	mul.w	r3, r0, r3
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	3332      	adds	r3, #50	; 0x32
 8002a48:	4a07      	ldr	r2, [pc, #28]	; (8002a68 <UART_SetConfig+0x118>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 020f 	and.w	r2, r3, #15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	440a      	add	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40013800 	.word	0x40013800
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <__errno>:
 8002a6c:	4b01      	ldr	r3, [pc, #4]	; (8002a74 <__errno+0x8>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c

08002a78 <__libc_init_array>:
 8002a78:	b570      	push	{r4, r5, r6, lr}
 8002a7a:	2600      	movs	r6, #0
 8002a7c:	4d0c      	ldr	r5, [pc, #48]	; (8002ab0 <__libc_init_array+0x38>)
 8002a7e:	4c0d      	ldr	r4, [pc, #52]	; (8002ab4 <__libc_init_array+0x3c>)
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	42a6      	cmp	r6, r4
 8002a86:	d109      	bne.n	8002a9c <__libc_init_array+0x24>
 8002a88:	f002 fe0c 	bl	80056a4 <_init>
 8002a8c:	2600      	movs	r6, #0
 8002a8e:	4d0a      	ldr	r5, [pc, #40]	; (8002ab8 <__libc_init_array+0x40>)
 8002a90:	4c0a      	ldr	r4, [pc, #40]	; (8002abc <__libc_init_array+0x44>)
 8002a92:	1b64      	subs	r4, r4, r5
 8002a94:	10a4      	asrs	r4, r4, #2
 8002a96:	42a6      	cmp	r6, r4
 8002a98:	d105      	bne.n	8002aa6 <__libc_init_array+0x2e>
 8002a9a:	bd70      	pop	{r4, r5, r6, pc}
 8002a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa0:	4798      	blx	r3
 8002aa2:	3601      	adds	r6, #1
 8002aa4:	e7ee      	b.n	8002a84 <__libc_init_array+0xc>
 8002aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aaa:	4798      	blx	r3
 8002aac:	3601      	adds	r6, #1
 8002aae:	e7f2      	b.n	8002a96 <__libc_init_array+0x1e>
 8002ab0:	08005b9c 	.word	0x08005b9c
 8002ab4:	08005b9c 	.word	0x08005b9c
 8002ab8:	08005b9c 	.word	0x08005b9c
 8002abc:	08005ba0 	.word	0x08005ba0

08002ac0 <memset>:
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4402      	add	r2, r0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d100      	bne.n	8002aca <memset+0xa>
 8002ac8:	4770      	bx	lr
 8002aca:	f803 1b01 	strb.w	r1, [r3], #1
 8002ace:	e7f9      	b.n	8002ac4 <memset+0x4>

08002ad0 <__cvt>:
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad6:	461f      	mov	r7, r3
 8002ad8:	bfbb      	ittet	lt
 8002ada:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002ade:	461f      	movlt	r7, r3
 8002ae0:	2300      	movge	r3, #0
 8002ae2:	232d      	movlt	r3, #45	; 0x2d
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	4614      	mov	r4, r2
 8002ae8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002aea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002aec:	7013      	strb	r3, [r2, #0]
 8002aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002af0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002af4:	f023 0820 	bic.w	r8, r3, #32
 8002af8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002afc:	d005      	beq.n	8002b0a <__cvt+0x3a>
 8002afe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002b02:	d100      	bne.n	8002b06 <__cvt+0x36>
 8002b04:	3501      	adds	r5, #1
 8002b06:	2302      	movs	r3, #2
 8002b08:	e000      	b.n	8002b0c <__cvt+0x3c>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	aa07      	add	r2, sp, #28
 8002b0e:	9204      	str	r2, [sp, #16]
 8002b10:	aa06      	add	r2, sp, #24
 8002b12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b16:	e9cd 3500 	strd	r3, r5, [sp]
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	463b      	mov	r3, r7
 8002b1e:	f000 fda3 	bl	8003668 <_dtoa_r>
 8002b22:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002b26:	4606      	mov	r6, r0
 8002b28:	d102      	bne.n	8002b30 <__cvt+0x60>
 8002b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b2c:	07db      	lsls	r3, r3, #31
 8002b2e:	d522      	bpl.n	8002b76 <__cvt+0xa6>
 8002b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002b34:	eb06 0905 	add.w	r9, r6, r5
 8002b38:	d110      	bne.n	8002b5c <__cvt+0x8c>
 8002b3a:	7833      	ldrb	r3, [r6, #0]
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d10a      	bne.n	8002b56 <__cvt+0x86>
 8002b40:	2200      	movs	r2, #0
 8002b42:	2300      	movs	r3, #0
 8002b44:	4620      	mov	r0, r4
 8002b46:	4639      	mov	r1, r7
 8002b48:	f7fd ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8002b4c:	b918      	cbnz	r0, 8002b56 <__cvt+0x86>
 8002b4e:	f1c5 0501 	rsb	r5, r5, #1
 8002b52:	f8ca 5000 	str.w	r5, [sl]
 8002b56:	f8da 3000 	ldr.w	r3, [sl]
 8002b5a:	4499      	add	r9, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2300      	movs	r3, #0
 8002b60:	4620      	mov	r0, r4
 8002b62:	4639      	mov	r1, r7
 8002b64:	f7fd ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8002b68:	b108      	cbz	r0, 8002b6e <__cvt+0x9e>
 8002b6a:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b6e:	2230      	movs	r2, #48	; 0x30
 8002b70:	9b07      	ldr	r3, [sp, #28]
 8002b72:	454b      	cmp	r3, r9
 8002b74:	d307      	bcc.n	8002b86 <__cvt+0xb6>
 8002b76:	4630      	mov	r0, r6
 8002b78:	9b07      	ldr	r3, [sp, #28]
 8002b7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b7c:	1b9b      	subs	r3, r3, r6
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	b008      	add	sp, #32
 8002b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	9107      	str	r1, [sp, #28]
 8002b8a:	701a      	strb	r2, [r3, #0]
 8002b8c:	e7f0      	b.n	8002b70 <__cvt+0xa0>

08002b8e <__exponent>:
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b92:	2900      	cmp	r1, #0
 8002b94:	f803 2b02 	strb.w	r2, [r3], #2
 8002b98:	bfb6      	itet	lt
 8002b9a:	222d      	movlt	r2, #45	; 0x2d
 8002b9c:	222b      	movge	r2, #43	; 0x2b
 8002b9e:	4249      	neglt	r1, r1
 8002ba0:	2909      	cmp	r1, #9
 8002ba2:	7042      	strb	r2, [r0, #1]
 8002ba4:	dd2b      	ble.n	8002bfe <__exponent+0x70>
 8002ba6:	f10d 0407 	add.w	r4, sp, #7
 8002baa:	46a4      	mov	ip, r4
 8002bac:	270a      	movs	r7, #10
 8002bae:	fb91 f6f7 	sdiv	r6, r1, r7
 8002bb2:	460a      	mov	r2, r1
 8002bb4:	46a6      	mov	lr, r4
 8002bb6:	fb07 1516 	mls	r5, r7, r6, r1
 8002bba:	2a63      	cmp	r2, #99	; 0x63
 8002bbc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002bc0:	4631      	mov	r1, r6
 8002bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8002bc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002bca:	dcf0      	bgt.n	8002bae <__exponent+0x20>
 8002bcc:	3130      	adds	r1, #48	; 0x30
 8002bce:	f1ae 0502 	sub.w	r5, lr, #2
 8002bd2:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	1c44      	adds	r4, r0, #1
 8002bda:	4561      	cmp	r1, ip
 8002bdc:	d30a      	bcc.n	8002bf4 <__exponent+0x66>
 8002bde:	f10d 0209 	add.w	r2, sp, #9
 8002be2:	eba2 020e 	sub.w	r2, r2, lr
 8002be6:	4565      	cmp	r5, ip
 8002be8:	bf88      	it	hi
 8002bea:	2200      	movhi	r2, #0
 8002bec:	4413      	add	r3, r2
 8002bee:	1a18      	subs	r0, r3, r0
 8002bf0:	b003      	add	sp, #12
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bf8:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002bfc:	e7ed      	b.n	8002bda <__exponent+0x4c>
 8002bfe:	2330      	movs	r3, #48	; 0x30
 8002c00:	3130      	adds	r1, #48	; 0x30
 8002c02:	7083      	strb	r3, [r0, #2]
 8002c04:	70c1      	strb	r1, [r0, #3]
 8002c06:	1d03      	adds	r3, r0, #4
 8002c08:	e7f1      	b.n	8002bee <__exponent+0x60>
	...

08002c0c <_printf_float>:
 8002c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c10:	b091      	sub	sp, #68	; 0x44
 8002c12:	460c      	mov	r4, r1
 8002c14:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002c18:	4616      	mov	r6, r2
 8002c1a:	461f      	mov	r7, r3
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	f001 fcc5 	bl	80045ac <_localeconv_r>
 8002c22:	6803      	ldr	r3, [r0, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	9309      	str	r3, [sp, #36]	; 0x24
 8002c28:	f7fd fa92 	bl	8000150 <strlen>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	930e      	str	r3, [sp, #56]	; 0x38
 8002c30:	f8d8 3000 	ldr.w	r3, [r8]
 8002c34:	900a      	str	r0, [sp, #40]	; 0x28
 8002c36:	3307      	adds	r3, #7
 8002c38:	f023 0307 	bic.w	r3, r3, #7
 8002c3c:	f103 0208 	add.w	r2, r3, #8
 8002c40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002c44:	f8d4 b000 	ldr.w	fp, [r4]
 8002c48:	f8c8 2000 	str.w	r2, [r8]
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c54:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002c58:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c62:	4640      	mov	r0, r8
 8002c64:	4b9c      	ldr	r3, [pc, #624]	; (8002ed8 <_printf_float+0x2cc>)
 8002c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c68:	f7fd fed0 	bl	8000a0c <__aeabi_dcmpun>
 8002c6c:	bb70      	cbnz	r0, 8002ccc <_printf_float+0xc0>
 8002c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002c72:	4640      	mov	r0, r8
 8002c74:	4b98      	ldr	r3, [pc, #608]	; (8002ed8 <_printf_float+0x2cc>)
 8002c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c78:	f7fd feaa 	bl	80009d0 <__aeabi_dcmple>
 8002c7c:	bb30      	cbnz	r0, 8002ccc <_printf_float+0xc0>
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2300      	movs	r3, #0
 8002c82:	4640      	mov	r0, r8
 8002c84:	4651      	mov	r1, sl
 8002c86:	f7fd fe99 	bl	80009bc <__aeabi_dcmplt>
 8002c8a:	b110      	cbz	r0, 8002c92 <_printf_float+0x86>
 8002c8c:	232d      	movs	r3, #45	; 0x2d
 8002c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c92:	4b92      	ldr	r3, [pc, #584]	; (8002edc <_printf_float+0x2d0>)
 8002c94:	4892      	ldr	r0, [pc, #584]	; (8002ee0 <_printf_float+0x2d4>)
 8002c96:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002c9a:	bf94      	ite	ls
 8002c9c:	4698      	movls	r8, r3
 8002c9e:	4680      	movhi	r8, r0
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	f04f 0a00 	mov.w	sl, #0
 8002ca6:	6123      	str	r3, [r4, #16]
 8002ca8:	f02b 0304 	bic.w	r3, fp, #4
 8002cac:	6023      	str	r3, [r4, #0]
 8002cae:	4633      	mov	r3, r6
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	9700      	str	r7, [sp, #0]
 8002cb6:	aa0f      	add	r2, sp, #60	; 0x3c
 8002cb8:	f000 f9d4 	bl	8003064 <_printf_common>
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	f040 8090 	bne.w	8002de2 <_printf_float+0x1d6>
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	b011      	add	sp, #68	; 0x44
 8002cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ccc:	4642      	mov	r2, r8
 8002cce:	4653      	mov	r3, sl
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	4651      	mov	r1, sl
 8002cd4:	f7fd fe9a 	bl	8000a0c <__aeabi_dcmpun>
 8002cd8:	b148      	cbz	r0, 8002cee <_printf_float+0xe2>
 8002cda:	f1ba 0f00 	cmp.w	sl, #0
 8002cde:	bfb8      	it	lt
 8002ce0:	232d      	movlt	r3, #45	; 0x2d
 8002ce2:	4880      	ldr	r0, [pc, #512]	; (8002ee4 <_printf_float+0x2d8>)
 8002ce4:	bfb8      	it	lt
 8002ce6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002cea:	4b7f      	ldr	r3, [pc, #508]	; (8002ee8 <_printf_float+0x2dc>)
 8002cec:	e7d3      	b.n	8002c96 <_printf_float+0x8a>
 8002cee:	6863      	ldr	r3, [r4, #4]
 8002cf0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	d142      	bne.n	8002d7e <_printf_float+0x172>
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	6063      	str	r3, [r4, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	9206      	str	r2, [sp, #24]
 8002d00:	aa0e      	add	r2, sp, #56	; 0x38
 8002d02:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002d06:	aa0d      	add	r2, sp, #52	; 0x34
 8002d08:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002d0c:	9203      	str	r2, [sp, #12]
 8002d0e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002d12:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d16:	6023      	str	r3, [r4, #0]
 8002d18:	6863      	ldr	r3, [r4, #4]
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4628      	mov	r0, r5
 8002d20:	4653      	mov	r3, sl
 8002d22:	910b      	str	r1, [sp, #44]	; 0x2c
 8002d24:	f7ff fed4 	bl	8002ad0 <__cvt>
 8002d28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	2947      	cmp	r1, #71	; 0x47
 8002d2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d30:	d108      	bne.n	8002d44 <_printf_float+0x138>
 8002d32:	1cc8      	adds	r0, r1, #3
 8002d34:	db02      	blt.n	8002d3c <_printf_float+0x130>
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	4299      	cmp	r1, r3
 8002d3a:	dd40      	ble.n	8002dbe <_printf_float+0x1b2>
 8002d3c:	f1a9 0902 	sub.w	r9, r9, #2
 8002d40:	fa5f f989 	uxtb.w	r9, r9
 8002d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002d48:	d81f      	bhi.n	8002d8a <_printf_float+0x17e>
 8002d4a:	464a      	mov	r2, r9
 8002d4c:	3901      	subs	r1, #1
 8002d4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d52:	910d      	str	r1, [sp, #52]	; 0x34
 8002d54:	f7ff ff1b 	bl	8002b8e <__exponent>
 8002d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d5a:	4682      	mov	sl, r0
 8002d5c:	1813      	adds	r3, r2, r0
 8002d5e:	2a01      	cmp	r2, #1
 8002d60:	6123      	str	r3, [r4, #16]
 8002d62:	dc02      	bgt.n	8002d6a <_printf_float+0x15e>
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	07d2      	lsls	r2, r2, #31
 8002d68:	d501      	bpl.n	8002d6e <_printf_float+0x162>
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	6123      	str	r3, [r4, #16]
 8002d6e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d09b      	beq.n	8002cae <_printf_float+0xa2>
 8002d76:	232d      	movs	r3, #45	; 0x2d
 8002d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d7c:	e797      	b.n	8002cae <_printf_float+0xa2>
 8002d7e:	2947      	cmp	r1, #71	; 0x47
 8002d80:	d1bc      	bne.n	8002cfc <_printf_float+0xf0>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ba      	bne.n	8002cfc <_printf_float+0xf0>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e7b7      	b.n	8002cfa <_printf_float+0xee>
 8002d8a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002d8e:	d118      	bne.n	8002dc2 <_printf_float+0x1b6>
 8002d90:	2900      	cmp	r1, #0
 8002d92:	6863      	ldr	r3, [r4, #4]
 8002d94:	dd0b      	ble.n	8002dae <_printf_float+0x1a2>
 8002d96:	6121      	str	r1, [r4, #16]
 8002d98:	b913      	cbnz	r3, 8002da0 <_printf_float+0x194>
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	07d0      	lsls	r0, r2, #31
 8002d9e:	d502      	bpl.n	8002da6 <_printf_float+0x19a>
 8002da0:	3301      	adds	r3, #1
 8002da2:	440b      	add	r3, r1
 8002da4:	6123      	str	r3, [r4, #16]
 8002da6:	f04f 0a00 	mov.w	sl, #0
 8002daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8002dac:	e7df      	b.n	8002d6e <_printf_float+0x162>
 8002dae:	b913      	cbnz	r3, 8002db6 <_printf_float+0x1aa>
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	07d2      	lsls	r2, r2, #31
 8002db4:	d501      	bpl.n	8002dba <_printf_float+0x1ae>
 8002db6:	3302      	adds	r3, #2
 8002db8:	e7f4      	b.n	8002da4 <_printf_float+0x198>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e7f2      	b.n	8002da4 <_printf_float+0x198>
 8002dbe:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dc4:	4299      	cmp	r1, r3
 8002dc6:	db05      	blt.n	8002dd4 <_printf_float+0x1c8>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	6121      	str	r1, [r4, #16]
 8002dcc:	07d8      	lsls	r0, r3, #31
 8002dce:	d5ea      	bpl.n	8002da6 <_printf_float+0x19a>
 8002dd0:	1c4b      	adds	r3, r1, #1
 8002dd2:	e7e7      	b.n	8002da4 <_printf_float+0x198>
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	bfcc      	ite	gt
 8002dd8:	2201      	movgt	r2, #1
 8002dda:	f1c1 0202 	rsble	r2, r1, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	e7e0      	b.n	8002da4 <_printf_float+0x198>
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	055a      	lsls	r2, r3, #21
 8002de6:	d407      	bmi.n	8002df8 <_printf_float+0x1ec>
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	4642      	mov	r2, r8
 8002dec:	4631      	mov	r1, r6
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b8      	blx	r7
 8002df2:	3001      	adds	r0, #1
 8002df4:	d12b      	bne.n	8002e4e <_printf_float+0x242>
 8002df6:	e764      	b.n	8002cc2 <_printf_float+0xb6>
 8002df8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002dfc:	f240 80dd 	bls.w	8002fba <_printf_float+0x3ae>
 8002e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e04:	2200      	movs	r2, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	f7fd fdce 	bl	80009a8 <__aeabi_dcmpeq>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d033      	beq.n	8002e78 <_printf_float+0x26c>
 8002e10:	2301      	movs	r3, #1
 8002e12:	4631      	mov	r1, r6
 8002e14:	4628      	mov	r0, r5
 8002e16:	4a35      	ldr	r2, [pc, #212]	; (8002eec <_printf_float+0x2e0>)
 8002e18:	47b8      	blx	r7
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	f43f af51 	beq.w	8002cc2 <_printf_float+0xb6>
 8002e20:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e24:	429a      	cmp	r2, r3
 8002e26:	db02      	blt.n	8002e2e <_printf_float+0x222>
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	07d8      	lsls	r0, r3, #31
 8002e2c:	d50f      	bpl.n	8002e4e <_printf_float+0x242>
 8002e2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e32:	4631      	mov	r1, r6
 8002e34:	4628      	mov	r0, r5
 8002e36:	47b8      	blx	r7
 8002e38:	3001      	adds	r0, #1
 8002e3a:	f43f af42 	beq.w	8002cc2 <_printf_float+0xb6>
 8002e3e:	f04f 0800 	mov.w	r8, #0
 8002e42:	f104 091a 	add.w	r9, r4, #26
 8002e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	4543      	cmp	r3, r8
 8002e4c:	dc09      	bgt.n	8002e62 <_printf_float+0x256>
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	079b      	lsls	r3, r3, #30
 8002e52:	f100 8102 	bmi.w	800305a <_printf_float+0x44e>
 8002e56:	68e0      	ldr	r0, [r4, #12]
 8002e58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e5a:	4298      	cmp	r0, r3
 8002e5c:	bfb8      	it	lt
 8002e5e:	4618      	movlt	r0, r3
 8002e60:	e731      	b.n	8002cc6 <_printf_float+0xba>
 8002e62:	2301      	movs	r3, #1
 8002e64:	464a      	mov	r2, r9
 8002e66:	4631      	mov	r1, r6
 8002e68:	4628      	mov	r0, r5
 8002e6a:	47b8      	blx	r7
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	f43f af28 	beq.w	8002cc2 <_printf_float+0xb6>
 8002e72:	f108 0801 	add.w	r8, r8, #1
 8002e76:	e7e6      	b.n	8002e46 <_printf_float+0x23a>
 8002e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	dc38      	bgt.n	8002ef0 <_printf_float+0x2e4>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4631      	mov	r1, r6
 8002e82:	4628      	mov	r0, r5
 8002e84:	4a19      	ldr	r2, [pc, #100]	; (8002eec <_printf_float+0x2e0>)
 8002e86:	47b8      	blx	r7
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f43f af1a 	beq.w	8002cc2 <_printf_float+0xb6>
 8002e8e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002e92:	4313      	orrs	r3, r2
 8002e94:	d102      	bne.n	8002e9c <_printf_float+0x290>
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	07d9      	lsls	r1, r3, #31
 8002e9a:	d5d8      	bpl.n	8002e4e <_printf_float+0x242>
 8002e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ea0:	4631      	mov	r1, r6
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	47b8      	blx	r7
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	f43f af0b 	beq.w	8002cc2 <_printf_float+0xb6>
 8002eac:	f04f 0900 	mov.w	r9, #0
 8002eb0:	f104 0a1a 	add.w	sl, r4, #26
 8002eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002eb6:	425b      	negs	r3, r3
 8002eb8:	454b      	cmp	r3, r9
 8002eba:	dc01      	bgt.n	8002ec0 <_printf_float+0x2b4>
 8002ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ebe:	e794      	b.n	8002dea <_printf_float+0x1de>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4652      	mov	r2, sl
 8002ec4:	4631      	mov	r1, r6
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	47b8      	blx	r7
 8002eca:	3001      	adds	r0, #1
 8002ecc:	f43f aef9 	beq.w	8002cc2 <_printf_float+0xb6>
 8002ed0:	f109 0901 	add.w	r9, r9, #1
 8002ed4:	e7ee      	b.n	8002eb4 <_printf_float+0x2a8>
 8002ed6:	bf00      	nop
 8002ed8:	7fefffff 	.word	0x7fefffff
 8002edc:	080057c4 	.word	0x080057c4
 8002ee0:	080057c8 	.word	0x080057c8
 8002ee4:	080057d0 	.word	0x080057d0
 8002ee8:	080057cc 	.word	0x080057cc
 8002eec:	080057d4 	.word	0x080057d4
 8002ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ef2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	bfa8      	it	ge
 8002ef8:	461a      	movge	r2, r3
 8002efa:	2a00      	cmp	r2, #0
 8002efc:	4691      	mov	r9, r2
 8002efe:	dc37      	bgt.n	8002f70 <_printf_float+0x364>
 8002f00:	f04f 0b00 	mov.w	fp, #0
 8002f04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f08:	f104 021a 	add.w	r2, r4, #26
 8002f0c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002f10:	ebaa 0309 	sub.w	r3, sl, r9
 8002f14:	455b      	cmp	r3, fp
 8002f16:	dc33      	bgt.n	8002f80 <_printf_float+0x374>
 8002f18:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	db3b      	blt.n	8002f98 <_printf_float+0x38c>
 8002f20:	6823      	ldr	r3, [r4, #0]
 8002f22:	07da      	lsls	r2, r3, #31
 8002f24:	d438      	bmi.n	8002f98 <_printf_float+0x38c>
 8002f26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f28:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f2a:	eba3 020a 	sub.w	r2, r3, sl
 8002f2e:	eba3 0901 	sub.w	r9, r3, r1
 8002f32:	4591      	cmp	r9, r2
 8002f34:	bfa8      	it	ge
 8002f36:	4691      	movge	r9, r2
 8002f38:	f1b9 0f00 	cmp.w	r9, #0
 8002f3c:	dc34      	bgt.n	8002fa8 <_printf_float+0x39c>
 8002f3e:	f04f 0800 	mov.w	r8, #0
 8002f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f46:	f104 0a1a 	add.w	sl, r4, #26
 8002f4a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	eba3 0309 	sub.w	r3, r3, r9
 8002f54:	4543      	cmp	r3, r8
 8002f56:	f77f af7a 	ble.w	8002e4e <_printf_float+0x242>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4652      	mov	r2, sl
 8002f5e:	4631      	mov	r1, r6
 8002f60:	4628      	mov	r0, r5
 8002f62:	47b8      	blx	r7
 8002f64:	3001      	adds	r0, #1
 8002f66:	f43f aeac 	beq.w	8002cc2 <_printf_float+0xb6>
 8002f6a:	f108 0801 	add.w	r8, r8, #1
 8002f6e:	e7ec      	b.n	8002f4a <_printf_float+0x33e>
 8002f70:	4613      	mov	r3, r2
 8002f72:	4631      	mov	r1, r6
 8002f74:	4642      	mov	r2, r8
 8002f76:	4628      	mov	r0, r5
 8002f78:	47b8      	blx	r7
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d1c0      	bne.n	8002f00 <_printf_float+0x2f4>
 8002f7e:	e6a0      	b.n	8002cc2 <_printf_float+0xb6>
 8002f80:	2301      	movs	r3, #1
 8002f82:	4631      	mov	r1, r6
 8002f84:	4628      	mov	r0, r5
 8002f86:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f88:	47b8      	blx	r7
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	f43f ae99 	beq.w	8002cc2 <_printf_float+0xb6>
 8002f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f92:	f10b 0b01 	add.w	fp, fp, #1
 8002f96:	e7b9      	b.n	8002f0c <_printf_float+0x300>
 8002f98:	4631      	mov	r1, r6
 8002f9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	47b8      	blx	r7
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d1bf      	bne.n	8002f26 <_printf_float+0x31a>
 8002fa6:	e68c      	b.n	8002cc2 <_printf_float+0xb6>
 8002fa8:	464b      	mov	r3, r9
 8002faa:	4631      	mov	r1, r6
 8002fac:	4628      	mov	r0, r5
 8002fae:	eb08 020a 	add.w	r2, r8, sl
 8002fb2:	47b8      	blx	r7
 8002fb4:	3001      	adds	r0, #1
 8002fb6:	d1c2      	bne.n	8002f3e <_printf_float+0x332>
 8002fb8:	e683      	b.n	8002cc2 <_printf_float+0xb6>
 8002fba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	dc01      	bgt.n	8002fc4 <_printf_float+0x3b8>
 8002fc0:	07db      	lsls	r3, r3, #31
 8002fc2:	d537      	bpl.n	8003034 <_printf_float+0x428>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	4631      	mov	r1, r6
 8002fca:	4628      	mov	r0, r5
 8002fcc:	47b8      	blx	r7
 8002fce:	3001      	adds	r0, #1
 8002fd0:	f43f ae77 	beq.w	8002cc2 <_printf_float+0xb6>
 8002fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fd8:	4631      	mov	r1, r6
 8002fda:	4628      	mov	r0, r5
 8002fdc:	47b8      	blx	r7
 8002fde:	3001      	adds	r0, #1
 8002fe0:	f43f ae6f 	beq.w	8002cc2 <_printf_float+0xb6>
 8002fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2300      	movs	r3, #0
 8002fec:	f7fd fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8002ff0:	b9d8      	cbnz	r0, 800302a <_printf_float+0x41e>
 8002ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ff4:	f108 0201 	add.w	r2, r8, #1
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	47b8      	blx	r7
 8003000:	3001      	adds	r0, #1
 8003002:	d10e      	bne.n	8003022 <_printf_float+0x416>
 8003004:	e65d      	b.n	8002cc2 <_printf_float+0xb6>
 8003006:	2301      	movs	r3, #1
 8003008:	464a      	mov	r2, r9
 800300a:	4631      	mov	r1, r6
 800300c:	4628      	mov	r0, r5
 800300e:	47b8      	blx	r7
 8003010:	3001      	adds	r0, #1
 8003012:	f43f ae56 	beq.w	8002cc2 <_printf_float+0xb6>
 8003016:	f108 0801 	add.w	r8, r8, #1
 800301a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800301c:	3b01      	subs	r3, #1
 800301e:	4543      	cmp	r3, r8
 8003020:	dcf1      	bgt.n	8003006 <_printf_float+0x3fa>
 8003022:	4653      	mov	r3, sl
 8003024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003028:	e6e0      	b.n	8002dec <_printf_float+0x1e0>
 800302a:	f04f 0800 	mov.w	r8, #0
 800302e:	f104 091a 	add.w	r9, r4, #26
 8003032:	e7f2      	b.n	800301a <_printf_float+0x40e>
 8003034:	2301      	movs	r3, #1
 8003036:	4642      	mov	r2, r8
 8003038:	e7df      	b.n	8002ffa <_printf_float+0x3ee>
 800303a:	2301      	movs	r3, #1
 800303c:	464a      	mov	r2, r9
 800303e:	4631      	mov	r1, r6
 8003040:	4628      	mov	r0, r5
 8003042:	47b8      	blx	r7
 8003044:	3001      	adds	r0, #1
 8003046:	f43f ae3c 	beq.w	8002cc2 <_printf_float+0xb6>
 800304a:	f108 0801 	add.w	r8, r8, #1
 800304e:	68e3      	ldr	r3, [r4, #12]
 8003050:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003052:	1a5b      	subs	r3, r3, r1
 8003054:	4543      	cmp	r3, r8
 8003056:	dcf0      	bgt.n	800303a <_printf_float+0x42e>
 8003058:	e6fd      	b.n	8002e56 <_printf_float+0x24a>
 800305a:	f04f 0800 	mov.w	r8, #0
 800305e:	f104 0919 	add.w	r9, r4, #25
 8003062:	e7f4      	b.n	800304e <_printf_float+0x442>

08003064 <_printf_common>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	4616      	mov	r6, r2
 800306a:	4699      	mov	r9, r3
 800306c:	688a      	ldr	r2, [r1, #8]
 800306e:	690b      	ldr	r3, [r1, #16]
 8003070:	4607      	mov	r7, r0
 8003072:	4293      	cmp	r3, r2
 8003074:	bfb8      	it	lt
 8003076:	4613      	movlt	r3, r2
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800307e:	460c      	mov	r4, r1
 8003080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003084:	b10a      	cbz	r2, 800308a <_printf_common+0x26>
 8003086:	3301      	adds	r3, #1
 8003088:	6033      	str	r3, [r6, #0]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	0699      	lsls	r1, r3, #26
 800308e:	bf42      	ittt	mi
 8003090:	6833      	ldrmi	r3, [r6, #0]
 8003092:	3302      	addmi	r3, #2
 8003094:	6033      	strmi	r3, [r6, #0]
 8003096:	6825      	ldr	r5, [r4, #0]
 8003098:	f015 0506 	ands.w	r5, r5, #6
 800309c:	d106      	bne.n	80030ac <_printf_common+0x48>
 800309e:	f104 0a19 	add.w	sl, r4, #25
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	6832      	ldr	r2, [r6, #0]
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	dc28      	bgt.n	80030fe <_printf_common+0x9a>
 80030ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030b0:	1e13      	subs	r3, r2, #0
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	bf18      	it	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	0692      	lsls	r2, r2, #26
 80030ba:	d42d      	bmi.n	8003118 <_printf_common+0xb4>
 80030bc:	4649      	mov	r1, r9
 80030be:	4638      	mov	r0, r7
 80030c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c4:	47c0      	blx	r8
 80030c6:	3001      	adds	r0, #1
 80030c8:	d020      	beq.n	800310c <_printf_common+0xa8>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	68e5      	ldr	r5, [r4, #12]
 80030ce:	f003 0306 	and.w	r3, r3, #6
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf18      	it	ne
 80030d6:	2500      	movne	r5, #0
 80030d8:	6832      	ldr	r2, [r6, #0]
 80030da:	f04f 0600 	mov.w	r6, #0
 80030de:	68a3      	ldr	r3, [r4, #8]
 80030e0:	bf08      	it	eq
 80030e2:	1aad      	subeq	r5, r5, r2
 80030e4:	6922      	ldr	r2, [r4, #16]
 80030e6:	bf08      	it	eq
 80030e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bfc4      	itt	gt
 80030f0:	1a9b      	subgt	r3, r3, r2
 80030f2:	18ed      	addgt	r5, r5, r3
 80030f4:	341a      	adds	r4, #26
 80030f6:	42b5      	cmp	r5, r6
 80030f8:	d11a      	bne.n	8003130 <_printf_common+0xcc>
 80030fa:	2000      	movs	r0, #0
 80030fc:	e008      	b.n	8003110 <_printf_common+0xac>
 80030fe:	2301      	movs	r3, #1
 8003100:	4652      	mov	r2, sl
 8003102:	4649      	mov	r1, r9
 8003104:	4638      	mov	r0, r7
 8003106:	47c0      	blx	r8
 8003108:	3001      	adds	r0, #1
 800310a:	d103      	bne.n	8003114 <_printf_common+0xb0>
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003114:	3501      	adds	r5, #1
 8003116:	e7c4      	b.n	80030a2 <_printf_common+0x3e>
 8003118:	2030      	movs	r0, #48	; 0x30
 800311a:	18e1      	adds	r1, r4, r3
 800311c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003126:	4422      	add	r2, r4
 8003128:	3302      	adds	r3, #2
 800312a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800312e:	e7c5      	b.n	80030bc <_printf_common+0x58>
 8003130:	2301      	movs	r3, #1
 8003132:	4622      	mov	r2, r4
 8003134:	4649      	mov	r1, r9
 8003136:	4638      	mov	r0, r7
 8003138:	47c0      	blx	r8
 800313a:	3001      	adds	r0, #1
 800313c:	d0e6      	beq.n	800310c <_printf_common+0xa8>
 800313e:	3601      	adds	r6, #1
 8003140:	e7d9      	b.n	80030f6 <_printf_common+0x92>
	...

08003144 <_printf_i>:
 8003144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003148:	7e0f      	ldrb	r7, [r1, #24]
 800314a:	4691      	mov	r9, r2
 800314c:	2f78      	cmp	r7, #120	; 0x78
 800314e:	4680      	mov	r8, r0
 8003150:	460c      	mov	r4, r1
 8003152:	469a      	mov	sl, r3
 8003154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800315a:	d807      	bhi.n	800316c <_printf_i+0x28>
 800315c:	2f62      	cmp	r7, #98	; 0x62
 800315e:	d80a      	bhi.n	8003176 <_printf_i+0x32>
 8003160:	2f00      	cmp	r7, #0
 8003162:	f000 80d9 	beq.w	8003318 <_printf_i+0x1d4>
 8003166:	2f58      	cmp	r7, #88	; 0x58
 8003168:	f000 80a4 	beq.w	80032b4 <_printf_i+0x170>
 800316c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003174:	e03a      	b.n	80031ec <_printf_i+0xa8>
 8003176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800317a:	2b15      	cmp	r3, #21
 800317c:	d8f6      	bhi.n	800316c <_printf_i+0x28>
 800317e:	a101      	add	r1, pc, #4	; (adr r1, 8003184 <_printf_i+0x40>)
 8003180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003184:	080031dd 	.word	0x080031dd
 8003188:	080031f1 	.word	0x080031f1
 800318c:	0800316d 	.word	0x0800316d
 8003190:	0800316d 	.word	0x0800316d
 8003194:	0800316d 	.word	0x0800316d
 8003198:	0800316d 	.word	0x0800316d
 800319c:	080031f1 	.word	0x080031f1
 80031a0:	0800316d 	.word	0x0800316d
 80031a4:	0800316d 	.word	0x0800316d
 80031a8:	0800316d 	.word	0x0800316d
 80031ac:	0800316d 	.word	0x0800316d
 80031b0:	080032ff 	.word	0x080032ff
 80031b4:	08003221 	.word	0x08003221
 80031b8:	080032e1 	.word	0x080032e1
 80031bc:	0800316d 	.word	0x0800316d
 80031c0:	0800316d 	.word	0x0800316d
 80031c4:	08003321 	.word	0x08003321
 80031c8:	0800316d 	.word	0x0800316d
 80031cc:	08003221 	.word	0x08003221
 80031d0:	0800316d 	.word	0x0800316d
 80031d4:	0800316d 	.word	0x0800316d
 80031d8:	080032e9 	.word	0x080032e9
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	1d1a      	adds	r2, r3, #4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	602a      	str	r2, [r5, #0]
 80031e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0a4      	b.n	800333a <_printf_i+0x1f6>
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	6829      	ldr	r1, [r5, #0]
 80031f4:	0606      	lsls	r6, r0, #24
 80031f6:	f101 0304 	add.w	r3, r1, #4
 80031fa:	d50a      	bpl.n	8003212 <_printf_i+0xce>
 80031fc:	680e      	ldr	r6, [r1, #0]
 80031fe:	602b      	str	r3, [r5, #0]
 8003200:	2e00      	cmp	r6, #0
 8003202:	da03      	bge.n	800320c <_printf_i+0xc8>
 8003204:	232d      	movs	r3, #45	; 0x2d
 8003206:	4276      	negs	r6, r6
 8003208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800320c:	230a      	movs	r3, #10
 800320e:	485e      	ldr	r0, [pc, #376]	; (8003388 <_printf_i+0x244>)
 8003210:	e019      	b.n	8003246 <_printf_i+0x102>
 8003212:	680e      	ldr	r6, [r1, #0]
 8003214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	bf18      	it	ne
 800321c:	b236      	sxthne	r6, r6
 800321e:	e7ef      	b.n	8003200 <_printf_i+0xbc>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1d19      	adds	r1, r3, #4
 8003226:	6029      	str	r1, [r5, #0]
 8003228:	0601      	lsls	r1, r0, #24
 800322a:	d501      	bpl.n	8003230 <_printf_i+0xec>
 800322c:	681e      	ldr	r6, [r3, #0]
 800322e:	e002      	b.n	8003236 <_printf_i+0xf2>
 8003230:	0646      	lsls	r6, r0, #25
 8003232:	d5fb      	bpl.n	800322c <_printf_i+0xe8>
 8003234:	881e      	ldrh	r6, [r3, #0]
 8003236:	2f6f      	cmp	r7, #111	; 0x6f
 8003238:	bf0c      	ite	eq
 800323a:	2308      	moveq	r3, #8
 800323c:	230a      	movne	r3, #10
 800323e:	4852      	ldr	r0, [pc, #328]	; (8003388 <_printf_i+0x244>)
 8003240:	2100      	movs	r1, #0
 8003242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003246:	6865      	ldr	r5, [r4, #4]
 8003248:	2d00      	cmp	r5, #0
 800324a:	bfa8      	it	ge
 800324c:	6821      	ldrge	r1, [r4, #0]
 800324e:	60a5      	str	r5, [r4, #8]
 8003250:	bfa4      	itt	ge
 8003252:	f021 0104 	bicge.w	r1, r1, #4
 8003256:	6021      	strge	r1, [r4, #0]
 8003258:	b90e      	cbnz	r6, 800325e <_printf_i+0x11a>
 800325a:	2d00      	cmp	r5, #0
 800325c:	d04d      	beq.n	80032fa <_printf_i+0x1b6>
 800325e:	4615      	mov	r5, r2
 8003260:	fbb6 f1f3 	udiv	r1, r6, r3
 8003264:	fb03 6711 	mls	r7, r3, r1, r6
 8003268:	5dc7      	ldrb	r7, [r0, r7]
 800326a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800326e:	4637      	mov	r7, r6
 8003270:	42bb      	cmp	r3, r7
 8003272:	460e      	mov	r6, r1
 8003274:	d9f4      	bls.n	8003260 <_printf_i+0x11c>
 8003276:	2b08      	cmp	r3, #8
 8003278:	d10b      	bne.n	8003292 <_printf_i+0x14e>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	07de      	lsls	r6, r3, #31
 800327e:	d508      	bpl.n	8003292 <_printf_i+0x14e>
 8003280:	6923      	ldr	r3, [r4, #16]
 8003282:	6861      	ldr	r1, [r4, #4]
 8003284:	4299      	cmp	r1, r3
 8003286:	bfde      	ittt	le
 8003288:	2330      	movle	r3, #48	; 0x30
 800328a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800328e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003292:	1b52      	subs	r2, r2, r5
 8003294:	6122      	str	r2, [r4, #16]
 8003296:	464b      	mov	r3, r9
 8003298:	4621      	mov	r1, r4
 800329a:	4640      	mov	r0, r8
 800329c:	f8cd a000 	str.w	sl, [sp]
 80032a0:	aa03      	add	r2, sp, #12
 80032a2:	f7ff fedf 	bl	8003064 <_printf_common>
 80032a6:	3001      	adds	r0, #1
 80032a8:	d14c      	bne.n	8003344 <_printf_i+0x200>
 80032aa:	f04f 30ff 	mov.w	r0, #4294967295
 80032ae:	b004      	add	sp, #16
 80032b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b4:	4834      	ldr	r0, [pc, #208]	; (8003388 <_printf_i+0x244>)
 80032b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032ba:	6829      	ldr	r1, [r5, #0]
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	f851 6b04 	ldr.w	r6, [r1], #4
 80032c2:	6029      	str	r1, [r5, #0]
 80032c4:	061d      	lsls	r5, r3, #24
 80032c6:	d514      	bpl.n	80032f2 <_printf_i+0x1ae>
 80032c8:	07df      	lsls	r7, r3, #31
 80032ca:	bf44      	itt	mi
 80032cc:	f043 0320 	orrmi.w	r3, r3, #32
 80032d0:	6023      	strmi	r3, [r4, #0]
 80032d2:	b91e      	cbnz	r6, 80032dc <_printf_i+0x198>
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	f023 0320 	bic.w	r3, r3, #32
 80032da:	6023      	str	r3, [r4, #0]
 80032dc:	2310      	movs	r3, #16
 80032de:	e7af      	b.n	8003240 <_printf_i+0xfc>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	f043 0320 	orr.w	r3, r3, #32
 80032e6:	6023      	str	r3, [r4, #0]
 80032e8:	2378      	movs	r3, #120	; 0x78
 80032ea:	4828      	ldr	r0, [pc, #160]	; (800338c <_printf_i+0x248>)
 80032ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032f0:	e7e3      	b.n	80032ba <_printf_i+0x176>
 80032f2:	0659      	lsls	r1, r3, #25
 80032f4:	bf48      	it	mi
 80032f6:	b2b6      	uxthmi	r6, r6
 80032f8:	e7e6      	b.n	80032c8 <_printf_i+0x184>
 80032fa:	4615      	mov	r5, r2
 80032fc:	e7bb      	b.n	8003276 <_printf_i+0x132>
 80032fe:	682b      	ldr	r3, [r5, #0]
 8003300:	6826      	ldr	r6, [r4, #0]
 8003302:	1d18      	adds	r0, r3, #4
 8003304:	6961      	ldr	r1, [r4, #20]
 8003306:	6028      	str	r0, [r5, #0]
 8003308:	0635      	lsls	r5, r6, #24
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	d501      	bpl.n	8003312 <_printf_i+0x1ce>
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	e002      	b.n	8003318 <_printf_i+0x1d4>
 8003312:	0670      	lsls	r0, r6, #25
 8003314:	d5fb      	bpl.n	800330e <_printf_i+0x1ca>
 8003316:	8019      	strh	r1, [r3, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	4615      	mov	r5, r2
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	e7ba      	b.n	8003296 <_printf_i+0x152>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	602a      	str	r2, [r5, #0]
 8003328:	681d      	ldr	r5, [r3, #0]
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	4628      	mov	r0, r5
 800332e:	f001 f9b1 	bl	8004694 <memchr>
 8003332:	b108      	cbz	r0, 8003338 <_printf_i+0x1f4>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003342:	e7a8      	b.n	8003296 <_printf_i+0x152>
 8003344:	462a      	mov	r2, r5
 8003346:	4649      	mov	r1, r9
 8003348:	4640      	mov	r0, r8
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	47d0      	blx	sl
 800334e:	3001      	adds	r0, #1
 8003350:	d0ab      	beq.n	80032aa <_printf_i+0x166>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	079b      	lsls	r3, r3, #30
 8003356:	d413      	bmi.n	8003380 <_printf_i+0x23c>
 8003358:	68e0      	ldr	r0, [r4, #12]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	4298      	cmp	r0, r3
 800335e:	bfb8      	it	lt
 8003360:	4618      	movlt	r0, r3
 8003362:	e7a4      	b.n	80032ae <_printf_i+0x16a>
 8003364:	2301      	movs	r3, #1
 8003366:	4632      	mov	r2, r6
 8003368:	4649      	mov	r1, r9
 800336a:	4640      	mov	r0, r8
 800336c:	47d0      	blx	sl
 800336e:	3001      	adds	r0, #1
 8003370:	d09b      	beq.n	80032aa <_printf_i+0x166>
 8003372:	3501      	adds	r5, #1
 8003374:	68e3      	ldr	r3, [r4, #12]
 8003376:	9903      	ldr	r1, [sp, #12]
 8003378:	1a5b      	subs	r3, r3, r1
 800337a:	42ab      	cmp	r3, r5
 800337c:	dcf2      	bgt.n	8003364 <_printf_i+0x220>
 800337e:	e7eb      	b.n	8003358 <_printf_i+0x214>
 8003380:	2500      	movs	r5, #0
 8003382:	f104 0619 	add.w	r6, r4, #25
 8003386:	e7f5      	b.n	8003374 <_printf_i+0x230>
 8003388:	080057d6 	.word	0x080057d6
 800338c:	080057e7 	.word	0x080057e7

08003390 <iprintf>:
 8003390:	b40f      	push	{r0, r1, r2, r3}
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <iprintf+0x2c>)
 8003394:	b513      	push	{r0, r1, r4, lr}
 8003396:	681c      	ldr	r4, [r3, #0]
 8003398:	b124      	cbz	r4, 80033a4 <iprintf+0x14>
 800339a:	69a3      	ldr	r3, [r4, #24]
 800339c:	b913      	cbnz	r3, 80033a4 <iprintf+0x14>
 800339e:	4620      	mov	r0, r4
 80033a0:	f001 f866 	bl	8004470 <__sinit>
 80033a4:	ab05      	add	r3, sp, #20
 80033a6:	4620      	mov	r0, r4
 80033a8:	9a04      	ldr	r2, [sp, #16]
 80033aa:	68a1      	ldr	r1, [r4, #8]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	f001 fe27 	bl	8005000 <_vfiprintf_r>
 80033b2:	b002      	add	sp, #8
 80033b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b8:	b004      	add	sp, #16
 80033ba:	4770      	bx	lr
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <setvbuf>:
 80033c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80033c4:	461d      	mov	r5, r3
 80033c6:	4b5d      	ldr	r3, [pc, #372]	; (800353c <setvbuf+0x17c>)
 80033c8:	4604      	mov	r4, r0
 80033ca:	681f      	ldr	r7, [r3, #0]
 80033cc:	460e      	mov	r6, r1
 80033ce:	4690      	mov	r8, r2
 80033d0:	b127      	cbz	r7, 80033dc <setvbuf+0x1c>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	b913      	cbnz	r3, 80033dc <setvbuf+0x1c>
 80033d6:	4638      	mov	r0, r7
 80033d8:	f001 f84a 	bl	8004470 <__sinit>
 80033dc:	4b58      	ldr	r3, [pc, #352]	; (8003540 <setvbuf+0x180>)
 80033de:	429c      	cmp	r4, r3
 80033e0:	d167      	bne.n	80034b2 <setvbuf+0xf2>
 80033e2:	687c      	ldr	r4, [r7, #4]
 80033e4:	f1b8 0f02 	cmp.w	r8, #2
 80033e8:	d006      	beq.n	80033f8 <setvbuf+0x38>
 80033ea:	f1b8 0f01 	cmp.w	r8, #1
 80033ee:	f200 809f 	bhi.w	8003530 <setvbuf+0x170>
 80033f2:	2d00      	cmp	r5, #0
 80033f4:	f2c0 809c 	blt.w	8003530 <setvbuf+0x170>
 80033f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033fa:	07db      	lsls	r3, r3, #31
 80033fc:	d405      	bmi.n	800340a <setvbuf+0x4a>
 80033fe:	89a3      	ldrh	r3, [r4, #12]
 8003400:	0598      	lsls	r0, r3, #22
 8003402:	d402      	bmi.n	800340a <setvbuf+0x4a>
 8003404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003406:	f001 f8d6 	bl	80045b6 <__retarget_lock_acquire_recursive>
 800340a:	4621      	mov	r1, r4
 800340c:	4638      	mov	r0, r7
 800340e:	f000 ff9b 	bl	8004348 <_fflush_r>
 8003412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003414:	b141      	cbz	r1, 8003428 <setvbuf+0x68>
 8003416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800341a:	4299      	cmp	r1, r3
 800341c:	d002      	beq.n	8003424 <setvbuf+0x64>
 800341e:	4638      	mov	r0, r7
 8003420:	f001 fcea 	bl	8004df8 <_free_r>
 8003424:	2300      	movs	r3, #0
 8003426:	6363      	str	r3, [r4, #52]	; 0x34
 8003428:	2300      	movs	r3, #0
 800342a:	61a3      	str	r3, [r4, #24]
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	0619      	lsls	r1, r3, #24
 8003432:	d503      	bpl.n	800343c <setvbuf+0x7c>
 8003434:	4638      	mov	r0, r7
 8003436:	6921      	ldr	r1, [r4, #16]
 8003438:	f001 fcde 	bl	8004df8 <_free_r>
 800343c:	89a3      	ldrh	r3, [r4, #12]
 800343e:	f1b8 0f02 	cmp.w	r8, #2
 8003442:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	d06c      	beq.n	8003528 <setvbuf+0x168>
 800344e:	ab01      	add	r3, sp, #4
 8003450:	466a      	mov	r2, sp
 8003452:	4621      	mov	r1, r4
 8003454:	4638      	mov	r0, r7
 8003456:	f001 f8b0 	bl	80045ba <__swhatbuf_r>
 800345a:	89a3      	ldrh	r3, [r4, #12]
 800345c:	4318      	orrs	r0, r3
 800345e:	81a0      	strh	r0, [r4, #12]
 8003460:	2d00      	cmp	r5, #0
 8003462:	d130      	bne.n	80034c6 <setvbuf+0x106>
 8003464:	9d00      	ldr	r5, [sp, #0]
 8003466:	4628      	mov	r0, r5
 8003468:	f001 f90c 	bl	8004684 <malloc>
 800346c:	4606      	mov	r6, r0
 800346e:	2800      	cmp	r0, #0
 8003470:	d155      	bne.n	800351e <setvbuf+0x15e>
 8003472:	f8dd 9000 	ldr.w	r9, [sp]
 8003476:	45a9      	cmp	r9, r5
 8003478:	d14a      	bne.n	8003510 <setvbuf+0x150>
 800347a:	f04f 35ff 	mov.w	r5, #4294967295
 800347e:	2200      	movs	r2, #0
 8003480:	60a2      	str	r2, [r4, #8]
 8003482:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003486:	6022      	str	r2, [r4, #0]
 8003488:	6122      	str	r2, [r4, #16]
 800348a:	2201      	movs	r2, #1
 800348c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003490:	6162      	str	r2, [r4, #20]
 8003492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003494:	f043 0302 	orr.w	r3, r3, #2
 8003498:	07d2      	lsls	r2, r2, #31
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	d405      	bmi.n	80034aa <setvbuf+0xea>
 800349e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80034a2:	d102      	bne.n	80034aa <setvbuf+0xea>
 80034a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034a6:	f001 f887 	bl	80045b8 <__retarget_lock_release_recursive>
 80034aa:	4628      	mov	r0, r5
 80034ac:	b003      	add	sp, #12
 80034ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <setvbuf+0x184>)
 80034b4:	429c      	cmp	r4, r3
 80034b6:	d101      	bne.n	80034bc <setvbuf+0xfc>
 80034b8:	68bc      	ldr	r4, [r7, #8]
 80034ba:	e793      	b.n	80033e4 <setvbuf+0x24>
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <setvbuf+0x188>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	bf08      	it	eq
 80034c2:	68fc      	ldreq	r4, [r7, #12]
 80034c4:	e78e      	b.n	80033e4 <setvbuf+0x24>
 80034c6:	2e00      	cmp	r6, #0
 80034c8:	d0cd      	beq.n	8003466 <setvbuf+0xa6>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	b913      	cbnz	r3, 80034d4 <setvbuf+0x114>
 80034ce:	4638      	mov	r0, r7
 80034d0:	f000 ffce 	bl	8004470 <__sinit>
 80034d4:	f1b8 0f01 	cmp.w	r8, #1
 80034d8:	bf08      	it	eq
 80034da:	89a3      	ldrheq	r3, [r4, #12]
 80034dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80034e0:	bf04      	itt	eq
 80034e2:	f043 0301 	orreq.w	r3, r3, #1
 80034e6:	81a3      	strheq	r3, [r4, #12]
 80034e8:	89a2      	ldrh	r2, [r4, #12]
 80034ea:	6026      	str	r6, [r4, #0]
 80034ec:	f012 0308 	ands.w	r3, r2, #8
 80034f0:	d01c      	beq.n	800352c <setvbuf+0x16c>
 80034f2:	07d3      	lsls	r3, r2, #31
 80034f4:	bf41      	itttt	mi
 80034f6:	2300      	movmi	r3, #0
 80034f8:	426d      	negmi	r5, r5
 80034fa:	60a3      	strmi	r3, [r4, #8]
 80034fc:	61a5      	strmi	r5, [r4, #24]
 80034fe:	bf58      	it	pl
 8003500:	60a5      	strpl	r5, [r4, #8]
 8003502:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003504:	f015 0501 	ands.w	r5, r5, #1
 8003508:	d115      	bne.n	8003536 <setvbuf+0x176>
 800350a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800350e:	e7c8      	b.n	80034a2 <setvbuf+0xe2>
 8003510:	4648      	mov	r0, r9
 8003512:	f001 f8b7 	bl	8004684 <malloc>
 8003516:	4606      	mov	r6, r0
 8003518:	2800      	cmp	r0, #0
 800351a:	d0ae      	beq.n	800347a <setvbuf+0xba>
 800351c:	464d      	mov	r5, r9
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7d0      	b.n	80034ca <setvbuf+0x10a>
 8003528:	2500      	movs	r5, #0
 800352a:	e7a8      	b.n	800347e <setvbuf+0xbe>
 800352c:	60a3      	str	r3, [r4, #8]
 800352e:	e7e8      	b.n	8003502 <setvbuf+0x142>
 8003530:	f04f 35ff 	mov.w	r5, #4294967295
 8003534:	e7b9      	b.n	80034aa <setvbuf+0xea>
 8003536:	2500      	movs	r5, #0
 8003538:	e7b7      	b.n	80034aa <setvbuf+0xea>
 800353a:	bf00      	nop
 800353c:	2000000c 	.word	0x2000000c
 8003540:	080058a8 	.word	0x080058a8
 8003544:	080058c8 	.word	0x080058c8
 8003548:	08005888 	.word	0x08005888

0800354c <quorem>:
 800354c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003550:	6903      	ldr	r3, [r0, #16]
 8003552:	690c      	ldr	r4, [r1, #16]
 8003554:	4607      	mov	r7, r0
 8003556:	42a3      	cmp	r3, r4
 8003558:	f2c0 8082 	blt.w	8003660 <quorem+0x114>
 800355c:	3c01      	subs	r4, #1
 800355e:	f100 0514 	add.w	r5, r0, #20
 8003562:	f101 0814 	add.w	r8, r1, #20
 8003566:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003570:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003574:	3301      	adds	r3, #1
 8003576:	429a      	cmp	r2, r3
 8003578:	fbb2 f6f3 	udiv	r6, r2, r3
 800357c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003580:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003584:	d331      	bcc.n	80035ea <quorem+0x9e>
 8003586:	f04f 0e00 	mov.w	lr, #0
 800358a:	4640      	mov	r0, r8
 800358c:	46ac      	mov	ip, r5
 800358e:	46f2      	mov	sl, lr
 8003590:	f850 2b04 	ldr.w	r2, [r0], #4
 8003594:	b293      	uxth	r3, r2
 8003596:	fb06 e303 	mla	r3, r6, r3, lr
 800359a:	0c12      	lsrs	r2, r2, #16
 800359c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	fb06 e202 	mla	r2, r6, r2, lr
 80035a6:	ebaa 0303 	sub.w	r3, sl, r3
 80035aa:	f8dc a000 	ldr.w	sl, [ip]
 80035ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80035b2:	fa1f fa8a 	uxth.w	sl, sl
 80035b6:	4453      	add	r3, sl
 80035b8:	f8dc a000 	ldr.w	sl, [ip]
 80035bc:	b292      	uxth	r2, r2
 80035be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80035c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035cc:	4581      	cmp	r9, r0
 80035ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80035d2:	f84c 3b04 	str.w	r3, [ip], #4
 80035d6:	d2db      	bcs.n	8003590 <quorem+0x44>
 80035d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80035dc:	b92b      	cbnz	r3, 80035ea <quorem+0x9e>
 80035de:	9b01      	ldr	r3, [sp, #4]
 80035e0:	3b04      	subs	r3, #4
 80035e2:	429d      	cmp	r5, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	d32f      	bcc.n	8003648 <quorem+0xfc>
 80035e8:	613c      	str	r4, [r7, #16]
 80035ea:	4638      	mov	r0, r7
 80035ec:	f001 faec 	bl	8004bc8 <__mcmp>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	db25      	blt.n	8003640 <quorem+0xf4>
 80035f4:	4628      	mov	r0, r5
 80035f6:	f04f 0c00 	mov.w	ip, #0
 80035fa:	3601      	adds	r6, #1
 80035fc:	f858 1b04 	ldr.w	r1, [r8], #4
 8003600:	f8d0 e000 	ldr.w	lr, [r0]
 8003604:	b28b      	uxth	r3, r1
 8003606:	ebac 0303 	sub.w	r3, ip, r3
 800360a:	fa1f f28e 	uxth.w	r2, lr
 800360e:	4413      	add	r3, r2
 8003610:	0c0a      	lsrs	r2, r1, #16
 8003612:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003616:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800361a:	b29b      	uxth	r3, r3
 800361c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003620:	45c1      	cmp	r9, r8
 8003622:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003626:	f840 3b04 	str.w	r3, [r0], #4
 800362a:	d2e7      	bcs.n	80035fc <quorem+0xb0>
 800362c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003630:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003634:	b922      	cbnz	r2, 8003640 <quorem+0xf4>
 8003636:	3b04      	subs	r3, #4
 8003638:	429d      	cmp	r5, r3
 800363a:	461a      	mov	r2, r3
 800363c:	d30a      	bcc.n	8003654 <quorem+0x108>
 800363e:	613c      	str	r4, [r7, #16]
 8003640:	4630      	mov	r0, r6
 8003642:	b003      	add	sp, #12
 8003644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	3b04      	subs	r3, #4
 800364c:	2a00      	cmp	r2, #0
 800364e:	d1cb      	bne.n	80035e8 <quorem+0x9c>
 8003650:	3c01      	subs	r4, #1
 8003652:	e7c6      	b.n	80035e2 <quorem+0x96>
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	3b04      	subs	r3, #4
 8003658:	2a00      	cmp	r2, #0
 800365a:	d1f0      	bne.n	800363e <quorem+0xf2>
 800365c:	3c01      	subs	r4, #1
 800365e:	e7eb      	b.n	8003638 <quorem+0xec>
 8003660:	2000      	movs	r0, #0
 8003662:	e7ee      	b.n	8003642 <quorem+0xf6>
 8003664:	0000      	movs	r0, r0
	...

08003668 <_dtoa_r>:
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	4616      	mov	r6, r2
 800366e:	461f      	mov	r7, r3
 8003670:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003672:	b099      	sub	sp, #100	; 0x64
 8003674:	4605      	mov	r5, r0
 8003676:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800367a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800367e:	b974      	cbnz	r4, 800369e <_dtoa_r+0x36>
 8003680:	2010      	movs	r0, #16
 8003682:	f000 ffff 	bl	8004684 <malloc>
 8003686:	4602      	mov	r2, r0
 8003688:	6268      	str	r0, [r5, #36]	; 0x24
 800368a:	b920      	cbnz	r0, 8003696 <_dtoa_r+0x2e>
 800368c:	21ea      	movs	r1, #234	; 0xea
 800368e:	4ba8      	ldr	r3, [pc, #672]	; (8003930 <_dtoa_r+0x2c8>)
 8003690:	48a8      	ldr	r0, [pc, #672]	; (8003934 <_dtoa_r+0x2cc>)
 8003692:	f001 ff0b 	bl	80054ac <__assert_func>
 8003696:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800369a:	6004      	str	r4, [r0, #0]
 800369c:	60c4      	str	r4, [r0, #12]
 800369e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	b151      	cbz	r1, 80036ba <_dtoa_r+0x52>
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	2301      	movs	r3, #1
 80036a8:	4093      	lsls	r3, r2
 80036aa:	604a      	str	r2, [r1, #4]
 80036ac:	608b      	str	r3, [r1, #8]
 80036ae:	4628      	mov	r0, r5
 80036b0:	f001 f84c 	bl	800474c <_Bfree>
 80036b4:	2200      	movs	r2, #0
 80036b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	1e3b      	subs	r3, r7, #0
 80036bc:	bfaf      	iteee	ge
 80036be:	2300      	movge	r3, #0
 80036c0:	2201      	movlt	r2, #1
 80036c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80036c6:	9305      	strlt	r3, [sp, #20]
 80036c8:	bfa8      	it	ge
 80036ca:	f8c8 3000 	strge.w	r3, [r8]
 80036ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80036d2:	4b99      	ldr	r3, [pc, #612]	; (8003938 <_dtoa_r+0x2d0>)
 80036d4:	bfb8      	it	lt
 80036d6:	f8c8 2000 	strlt.w	r2, [r8]
 80036da:	ea33 0309 	bics.w	r3, r3, r9
 80036de:	d119      	bne.n	8003714 <_dtoa_r+0xac>
 80036e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80036e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80036ec:	4333      	orrs	r3, r6
 80036ee:	f000 857f 	beq.w	80041f0 <_dtoa_r+0xb88>
 80036f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036f4:	b953      	cbnz	r3, 800370c <_dtoa_r+0xa4>
 80036f6:	4b91      	ldr	r3, [pc, #580]	; (800393c <_dtoa_r+0x2d4>)
 80036f8:	e022      	b.n	8003740 <_dtoa_r+0xd8>
 80036fa:	4b91      	ldr	r3, [pc, #580]	; (8003940 <_dtoa_r+0x2d8>)
 80036fc:	9303      	str	r3, [sp, #12]
 80036fe:	3308      	adds	r3, #8
 8003700:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	9803      	ldr	r0, [sp, #12]
 8003706:	b019      	add	sp, #100	; 0x64
 8003708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370c:	4b8b      	ldr	r3, [pc, #556]	; (800393c <_dtoa_r+0x2d4>)
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	3303      	adds	r3, #3
 8003712:	e7f5      	b.n	8003700 <_dtoa_r+0x98>
 8003714:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003718:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800371c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	2300      	movs	r3, #0
 8003724:	f7fd f940 	bl	80009a8 <__aeabi_dcmpeq>
 8003728:	4680      	mov	r8, r0
 800372a:	b158      	cbz	r0, 8003744 <_dtoa_r+0xdc>
 800372c:	2301      	movs	r3, #1
 800372e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8558 	beq.w	80041ea <_dtoa_r+0xb82>
 800373a:	4882      	ldr	r0, [pc, #520]	; (8003944 <_dtoa_r+0x2dc>)
 800373c:	6018      	str	r0, [r3, #0]
 800373e:	1e43      	subs	r3, r0, #1
 8003740:	9303      	str	r3, [sp, #12]
 8003742:	e7df      	b.n	8003704 <_dtoa_r+0x9c>
 8003744:	ab16      	add	r3, sp, #88	; 0x58
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	ab17      	add	r3, sp, #92	; 0x5c
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	4628      	mov	r0, r5
 800374e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003752:	f001 fae1 	bl	8004d18 <__d2b>
 8003756:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800375a:	4683      	mov	fp, r0
 800375c:	2c00      	cmp	r4, #0
 800375e:	d07f      	beq.n	8003860 <_dtoa_r+0x1f8>
 8003760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003764:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003766:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800376a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800376e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003772:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003776:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800377a:	2200      	movs	r2, #0
 800377c:	4b72      	ldr	r3, [pc, #456]	; (8003948 <_dtoa_r+0x2e0>)
 800377e:	f7fc fcf3 	bl	8000168 <__aeabi_dsub>
 8003782:	a365      	add	r3, pc, #404	; (adr r3, 8003918 <_dtoa_r+0x2b0>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc fea6 	bl	80004d8 <__aeabi_dmul>
 800378c:	a364      	add	r3, pc, #400	; (adr r3, 8003920 <_dtoa_r+0x2b8>)
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f7fc fceb 	bl	800016c <__adddf3>
 8003796:	4606      	mov	r6, r0
 8003798:	4620      	mov	r0, r4
 800379a:	460f      	mov	r7, r1
 800379c:	f7fc fe32 	bl	8000404 <__aeabi_i2d>
 80037a0:	a361      	add	r3, pc, #388	; (adr r3, 8003928 <_dtoa_r+0x2c0>)
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f7fc fe97 	bl	80004d8 <__aeabi_dmul>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4630      	mov	r0, r6
 80037b0:	4639      	mov	r1, r7
 80037b2:	f7fc fcdb 	bl	800016c <__adddf3>
 80037b6:	4606      	mov	r6, r0
 80037b8:	460f      	mov	r7, r1
 80037ba:	f7fd f93d 	bl	8000a38 <__aeabi_d2iz>
 80037be:	2200      	movs	r2, #0
 80037c0:	4682      	mov	sl, r0
 80037c2:	2300      	movs	r3, #0
 80037c4:	4630      	mov	r0, r6
 80037c6:	4639      	mov	r1, r7
 80037c8:	f7fd f8f8 	bl	80009bc <__aeabi_dcmplt>
 80037cc:	b148      	cbz	r0, 80037e2 <_dtoa_r+0x17a>
 80037ce:	4650      	mov	r0, sl
 80037d0:	f7fc fe18 	bl	8000404 <__aeabi_i2d>
 80037d4:	4632      	mov	r2, r6
 80037d6:	463b      	mov	r3, r7
 80037d8:	f7fd f8e6 	bl	80009a8 <__aeabi_dcmpeq>
 80037dc:	b908      	cbnz	r0, 80037e2 <_dtoa_r+0x17a>
 80037de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037e2:	f1ba 0f16 	cmp.w	sl, #22
 80037e6:	d858      	bhi.n	800389a <_dtoa_r+0x232>
 80037e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037ec:	4b57      	ldr	r3, [pc, #348]	; (800394c <_dtoa_r+0x2e4>)
 80037ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	f7fd f8e1 	bl	80009bc <__aeabi_dcmplt>
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d04f      	beq.n	800389e <_dtoa_r+0x236>
 80037fe:	2300      	movs	r3, #0
 8003800:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003804:	930f      	str	r3, [sp, #60]	; 0x3c
 8003806:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003808:	1b1c      	subs	r4, r3, r4
 800380a:	1e63      	subs	r3, r4, #1
 800380c:	9309      	str	r3, [sp, #36]	; 0x24
 800380e:	bf49      	itett	mi
 8003810:	f1c4 0301 	rsbmi	r3, r4, #1
 8003814:	2300      	movpl	r3, #0
 8003816:	9306      	strmi	r3, [sp, #24]
 8003818:	2300      	movmi	r3, #0
 800381a:	bf54      	ite	pl
 800381c:	9306      	strpl	r3, [sp, #24]
 800381e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003820:	f1ba 0f00 	cmp.w	sl, #0
 8003824:	db3d      	blt.n	80038a2 <_dtoa_r+0x23a>
 8003826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003828:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800382c:	4453      	add	r3, sl
 800382e:	9309      	str	r3, [sp, #36]	; 0x24
 8003830:	2300      	movs	r3, #0
 8003832:	930a      	str	r3, [sp, #40]	; 0x28
 8003834:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003836:	2b09      	cmp	r3, #9
 8003838:	f200 808c 	bhi.w	8003954 <_dtoa_r+0x2ec>
 800383c:	2b05      	cmp	r3, #5
 800383e:	bfc4      	itt	gt
 8003840:	3b04      	subgt	r3, #4
 8003842:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003846:	bfc8      	it	gt
 8003848:	2400      	movgt	r4, #0
 800384a:	f1a3 0302 	sub.w	r3, r3, #2
 800384e:	bfd8      	it	le
 8003850:	2401      	movle	r4, #1
 8003852:	2b03      	cmp	r3, #3
 8003854:	f200 808a 	bhi.w	800396c <_dtoa_r+0x304>
 8003858:	e8df f003 	tbb	[pc, r3]
 800385c:	5b4d4f2d 	.word	0x5b4d4f2d
 8003860:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003864:	441c      	add	r4, r3
 8003866:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800386a:	2b20      	cmp	r3, #32
 800386c:	bfc3      	ittte	gt
 800386e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003872:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003876:	fa09 f303 	lslgt.w	r3, r9, r3
 800387a:	f1c3 0320 	rsble	r3, r3, #32
 800387e:	bfc6      	itte	gt
 8003880:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003884:	4318      	orrgt	r0, r3
 8003886:	fa06 f003 	lslle.w	r0, r6, r3
 800388a:	f7fc fdab 	bl	80003e4 <__aeabi_ui2d>
 800388e:	2301      	movs	r3, #1
 8003890:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003894:	3c01      	subs	r4, #1
 8003896:	9313      	str	r3, [sp, #76]	; 0x4c
 8003898:	e76f      	b.n	800377a <_dtoa_r+0x112>
 800389a:	2301      	movs	r3, #1
 800389c:	e7b2      	b.n	8003804 <_dtoa_r+0x19c>
 800389e:	900f      	str	r0, [sp, #60]	; 0x3c
 80038a0:	e7b1      	b.n	8003806 <_dtoa_r+0x19e>
 80038a2:	9b06      	ldr	r3, [sp, #24]
 80038a4:	eba3 030a 	sub.w	r3, r3, sl
 80038a8:	9306      	str	r3, [sp, #24]
 80038aa:	f1ca 0300 	rsb	r3, sl, #0
 80038ae:	930a      	str	r3, [sp, #40]	; 0x28
 80038b0:	2300      	movs	r3, #0
 80038b2:	930e      	str	r3, [sp, #56]	; 0x38
 80038b4:	e7be      	b.n	8003834 <_dtoa_r+0x1cc>
 80038b6:	2300      	movs	r3, #0
 80038b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dc58      	bgt.n	8003972 <_dtoa_r+0x30a>
 80038c0:	f04f 0901 	mov.w	r9, #1
 80038c4:	464b      	mov	r3, r9
 80038c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80038ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80038ce:	2200      	movs	r2, #0
 80038d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80038d2:	6042      	str	r2, [r0, #4]
 80038d4:	2204      	movs	r2, #4
 80038d6:	f102 0614 	add.w	r6, r2, #20
 80038da:	429e      	cmp	r6, r3
 80038dc:	6841      	ldr	r1, [r0, #4]
 80038de:	d94e      	bls.n	800397e <_dtoa_r+0x316>
 80038e0:	4628      	mov	r0, r5
 80038e2:	f000 fef3 	bl	80046cc <_Balloc>
 80038e6:	9003      	str	r0, [sp, #12]
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d14c      	bne.n	8003986 <_dtoa_r+0x31e>
 80038ec:	4602      	mov	r2, r0
 80038ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <_dtoa_r+0x2e8>)
 80038f4:	e6cc      	b.n	8003690 <_dtoa_r+0x28>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e7de      	b.n	80038b8 <_dtoa_r+0x250>
 80038fa:	2300      	movs	r3, #0
 80038fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80038fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003900:	eb0a 0903 	add.w	r9, sl, r3
 8003904:	f109 0301 	add.w	r3, r9, #1
 8003908:	2b01      	cmp	r3, #1
 800390a:	9308      	str	r3, [sp, #32]
 800390c:	bfb8      	it	lt
 800390e:	2301      	movlt	r3, #1
 8003910:	e7dd      	b.n	80038ce <_dtoa_r+0x266>
 8003912:	2301      	movs	r3, #1
 8003914:	e7f2      	b.n	80038fc <_dtoa_r+0x294>
 8003916:	bf00      	nop
 8003918:	636f4361 	.word	0x636f4361
 800391c:	3fd287a7 	.word	0x3fd287a7
 8003920:	8b60c8b3 	.word	0x8b60c8b3
 8003924:	3fc68a28 	.word	0x3fc68a28
 8003928:	509f79fb 	.word	0x509f79fb
 800392c:	3fd34413 	.word	0x3fd34413
 8003930:	08005805 	.word	0x08005805
 8003934:	0800581c 	.word	0x0800581c
 8003938:	7ff00000 	.word	0x7ff00000
 800393c:	08005801 	.word	0x08005801
 8003940:	080057f8 	.word	0x080057f8
 8003944:	080057d5 	.word	0x080057d5
 8003948:	3ff80000 	.word	0x3ff80000
 800394c:	08005970 	.word	0x08005970
 8003950:	08005877 	.word	0x08005877
 8003954:	2401      	movs	r4, #1
 8003956:	2300      	movs	r3, #0
 8003958:	940b      	str	r4, [sp, #44]	; 0x2c
 800395a:	9322      	str	r3, [sp, #136]	; 0x88
 800395c:	f04f 39ff 	mov.w	r9, #4294967295
 8003960:	2200      	movs	r2, #0
 8003962:	2312      	movs	r3, #18
 8003964:	f8cd 9020 	str.w	r9, [sp, #32]
 8003968:	9223      	str	r2, [sp, #140]	; 0x8c
 800396a:	e7b0      	b.n	80038ce <_dtoa_r+0x266>
 800396c:	2301      	movs	r3, #1
 800396e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003970:	e7f4      	b.n	800395c <_dtoa_r+0x2f4>
 8003972:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003976:	464b      	mov	r3, r9
 8003978:	f8cd 9020 	str.w	r9, [sp, #32]
 800397c:	e7a7      	b.n	80038ce <_dtoa_r+0x266>
 800397e:	3101      	adds	r1, #1
 8003980:	6041      	str	r1, [r0, #4]
 8003982:	0052      	lsls	r2, r2, #1
 8003984:	e7a7      	b.n	80038d6 <_dtoa_r+0x26e>
 8003986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003988:	9a03      	ldr	r2, [sp, #12]
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	9b08      	ldr	r3, [sp, #32]
 800398e:	2b0e      	cmp	r3, #14
 8003990:	f200 80a8 	bhi.w	8003ae4 <_dtoa_r+0x47c>
 8003994:	2c00      	cmp	r4, #0
 8003996:	f000 80a5 	beq.w	8003ae4 <_dtoa_r+0x47c>
 800399a:	f1ba 0f00 	cmp.w	sl, #0
 800399e:	dd34      	ble.n	8003a0a <_dtoa_r+0x3a2>
 80039a0:	4a9a      	ldr	r2, [pc, #616]	; (8003c0c <_dtoa_r+0x5a4>)
 80039a2:	f00a 030f 	and.w	r3, sl, #15
 80039a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80039aa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80039ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80039b6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80039ba:	d016      	beq.n	80039ea <_dtoa_r+0x382>
 80039bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039c0:	4b93      	ldr	r3, [pc, #588]	; (8003c10 <_dtoa_r+0x5a8>)
 80039c2:	2703      	movs	r7, #3
 80039c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80039c8:	f7fc feb0 	bl	800072c <__aeabi_ddiv>
 80039cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039d0:	f004 040f 	and.w	r4, r4, #15
 80039d4:	4e8e      	ldr	r6, [pc, #568]	; (8003c10 <_dtoa_r+0x5a8>)
 80039d6:	b954      	cbnz	r4, 80039ee <_dtoa_r+0x386>
 80039d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80039e0:	f7fc fea4 	bl	800072c <__aeabi_ddiv>
 80039e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039e8:	e029      	b.n	8003a3e <_dtoa_r+0x3d6>
 80039ea:	2702      	movs	r7, #2
 80039ec:	e7f2      	b.n	80039d4 <_dtoa_r+0x36c>
 80039ee:	07e1      	lsls	r1, r4, #31
 80039f0:	d508      	bpl.n	8003a04 <_dtoa_r+0x39c>
 80039f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039fa:	f7fc fd6d 	bl	80004d8 <__aeabi_dmul>
 80039fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a02:	3701      	adds	r7, #1
 8003a04:	1064      	asrs	r4, r4, #1
 8003a06:	3608      	adds	r6, #8
 8003a08:	e7e5      	b.n	80039d6 <_dtoa_r+0x36e>
 8003a0a:	f000 80a5 	beq.w	8003b58 <_dtoa_r+0x4f0>
 8003a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a12:	f1ca 0400 	rsb	r4, sl, #0
 8003a16:	4b7d      	ldr	r3, [pc, #500]	; (8003c0c <_dtoa_r+0x5a4>)
 8003a18:	f004 020f 	and.w	r2, r4, #15
 8003a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f7fc fd58 	bl	80004d8 <__aeabi_dmul>
 8003a28:	2702      	movs	r7, #2
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a30:	4e77      	ldr	r6, [pc, #476]	; (8003c10 <_dtoa_r+0x5a8>)
 8003a32:	1124      	asrs	r4, r4, #4
 8003a34:	2c00      	cmp	r4, #0
 8003a36:	f040 8084 	bne.w	8003b42 <_dtoa_r+0x4da>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1d2      	bne.n	80039e4 <_dtoa_r+0x37c>
 8003a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 808b 	beq.w	8003b5c <_dtoa_r+0x4f4>
 8003a46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003a4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003a4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a52:	2200      	movs	r2, #0
 8003a54:	4b6f      	ldr	r3, [pc, #444]	; (8003c14 <_dtoa_r+0x5ac>)
 8003a56:	f7fc ffb1 	bl	80009bc <__aeabi_dcmplt>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d07e      	beq.n	8003b5c <_dtoa_r+0x4f4>
 8003a5e:	9b08      	ldr	r3, [sp, #32]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d07b      	beq.n	8003b5c <_dtoa_r+0x4f4>
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	dd38      	ble.n	8003adc <_dtoa_r+0x474>
 8003a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <_dtoa_r+0x5b0>)
 8003a72:	f7fc fd31 	bl	80004d8 <__aeabi_dmul>
 8003a76:	464c      	mov	r4, r9
 8003a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003a80:	3701      	adds	r7, #1
 8003a82:	4638      	mov	r0, r7
 8003a84:	f7fc fcbe 	bl	8000404 <__aeabi_i2d>
 8003a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a8c:	f7fc fd24 	bl	80004d8 <__aeabi_dmul>
 8003a90:	2200      	movs	r2, #0
 8003a92:	4b62      	ldr	r3, [pc, #392]	; (8003c1c <_dtoa_r+0x5b4>)
 8003a94:	f7fc fb6a 	bl	800016c <__adddf3>
 8003a98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003aa0:	9611      	str	r6, [sp, #68]	; 0x44
 8003aa2:	2c00      	cmp	r4, #0
 8003aa4:	d15d      	bne.n	8003b62 <_dtoa_r+0x4fa>
 8003aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <_dtoa_r+0x5b8>)
 8003aae:	f7fc fb5b 	bl	8000168 <__aeabi_dsub>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003aba:	4633      	mov	r3, r6
 8003abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003abe:	f7fc ff9b 	bl	80009f8 <__aeabi_dcmpgt>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	f040 829c 	bne.w	8004000 <_dtoa_r+0x998>
 8003ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003ace:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003ad2:	f7fc ff73 	bl	80009bc <__aeabi_dcmplt>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	f040 8290 	bne.w	8003ffc <_dtoa_r+0x994>
 8003adc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003ae0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f2c0 8152 	blt.w	8003d90 <_dtoa_r+0x728>
 8003aec:	f1ba 0f0e 	cmp.w	sl, #14
 8003af0:	f300 814e 	bgt.w	8003d90 <_dtoa_r+0x728>
 8003af4:	4b45      	ldr	r3, [pc, #276]	; (8003c0c <_dtoa_r+0x5a4>)
 8003af6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003afa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003afe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003b02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f280 80db 	bge.w	8003cc0 <_dtoa_r+0x658>
 8003b0a:	9b08      	ldr	r3, [sp, #32]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f300 80d7 	bgt.w	8003cc0 <_dtoa_r+0x658>
 8003b12:	f040 8272 	bne.w	8003ffa <_dtoa_r+0x992>
 8003b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <_dtoa_r+0x5b8>)
 8003b1e:	f7fc fcdb 	bl	80004d8 <__aeabi_dmul>
 8003b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b26:	f7fc ff5d 	bl	80009e4 <__aeabi_dcmpge>
 8003b2a:	9c08      	ldr	r4, [sp, #32]
 8003b2c:	4626      	mov	r6, r4
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	f040 8248 	bne.w	8003fc4 <_dtoa_r+0x95c>
 8003b34:	2331      	movs	r3, #49	; 0x31
 8003b36:	9f03      	ldr	r7, [sp, #12]
 8003b38:	f10a 0a01 	add.w	sl, sl, #1
 8003b3c:	f807 3b01 	strb.w	r3, [r7], #1
 8003b40:	e244      	b.n	8003fcc <_dtoa_r+0x964>
 8003b42:	07e2      	lsls	r2, r4, #31
 8003b44:	d505      	bpl.n	8003b52 <_dtoa_r+0x4ea>
 8003b46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003b4a:	f7fc fcc5 	bl	80004d8 <__aeabi_dmul>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	3701      	adds	r7, #1
 8003b52:	1064      	asrs	r4, r4, #1
 8003b54:	3608      	adds	r6, #8
 8003b56:	e76d      	b.n	8003a34 <_dtoa_r+0x3cc>
 8003b58:	2702      	movs	r7, #2
 8003b5a:	e770      	b.n	8003a3e <_dtoa_r+0x3d6>
 8003b5c:	46d0      	mov	r8, sl
 8003b5e:	9c08      	ldr	r4, [sp, #32]
 8003b60:	e78f      	b.n	8003a82 <_dtoa_r+0x41a>
 8003b62:	9903      	ldr	r1, [sp, #12]
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <_dtoa_r+0x5a4>)
 8003b66:	4421      	add	r1, r4
 8003b68:	9112      	str	r1, [sp, #72]	; 0x48
 8003b6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003b70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003b74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d055      	beq.n	8003c28 <_dtoa_r+0x5c0>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	4929      	ldr	r1, [pc, #164]	; (8003c24 <_dtoa_r+0x5bc>)
 8003b80:	f7fc fdd4 	bl	800072c <__aeabi_ddiv>
 8003b84:	463b      	mov	r3, r7
 8003b86:	4632      	mov	r2, r6
 8003b88:	f7fc faee 	bl	8000168 <__aeabi_dsub>
 8003b8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b90:	9f03      	ldr	r7, [sp, #12]
 8003b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b96:	f7fc ff4f 	bl	8000a38 <__aeabi_d2iz>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	f7fc fc32 	bl	8000404 <__aeabi_i2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba8:	f7fc fade 	bl	8000168 <__aeabi_dsub>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	3430      	adds	r4, #48	; 0x30
 8003bb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003bb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bba:	f807 4b01 	strb.w	r4, [r7], #1
 8003bbe:	f7fc fefd 	bl	80009bc <__aeabi_dcmplt>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d174      	bne.n	8003cb0 <_dtoa_r+0x648>
 8003bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bca:	2000      	movs	r0, #0
 8003bcc:	4911      	ldr	r1, [pc, #68]	; (8003c14 <_dtoa_r+0x5ac>)
 8003bce:	f7fc facb 	bl	8000168 <__aeabi_dsub>
 8003bd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bd6:	f7fc fef1 	bl	80009bc <__aeabi_dcmplt>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	f040 80b7 	bne.w	8003d4e <_dtoa_r+0x6e6>
 8003be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003be2:	429f      	cmp	r7, r3
 8003be4:	f43f af7a 	beq.w	8003adc <_dtoa_r+0x474>
 8003be8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003bec:	2200      	movs	r2, #0
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <_dtoa_r+0x5b0>)
 8003bf0:	f7fc fc72 	bl	80004d8 <__aeabi_dmul>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <_dtoa_r+0x5b0>)
 8003c00:	f7fc fc6a 	bl	80004d8 <__aeabi_dmul>
 8003c04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c08:	e7c3      	b.n	8003b92 <_dtoa_r+0x52a>
 8003c0a:	bf00      	nop
 8003c0c:	08005970 	.word	0x08005970
 8003c10:	08005948 	.word	0x08005948
 8003c14:	3ff00000 	.word	0x3ff00000
 8003c18:	40240000 	.word	0x40240000
 8003c1c:	401c0000 	.word	0x401c0000
 8003c20:	40140000 	.word	0x40140000
 8003c24:	3fe00000 	.word	0x3fe00000
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f7fc fc54 	bl	80004d8 <__aeabi_dmul>
 8003c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c36:	9c03      	ldr	r4, [sp, #12]
 8003c38:	9314      	str	r3, [sp, #80]	; 0x50
 8003c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c3e:	f7fc fefb 	bl	8000a38 <__aeabi_d2iz>
 8003c42:	9015      	str	r0, [sp, #84]	; 0x54
 8003c44:	f7fc fbde 	bl	8000404 <__aeabi_i2d>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c50:	f7fc fa8a 	bl	8000168 <__aeabi_dsub>
 8003c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c56:	4606      	mov	r6, r0
 8003c58:	3330      	adds	r3, #48	; 0x30
 8003c5a:	f804 3b01 	strb.w	r3, [r4], #1
 8003c5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c60:	460f      	mov	r7, r1
 8003c62:	429c      	cmp	r4, r3
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	d124      	bne.n	8003cb4 <_dtoa_r+0x64c>
 8003c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c6e:	4bb0      	ldr	r3, [pc, #704]	; (8003f30 <_dtoa_r+0x8c8>)
 8003c70:	f7fc fa7c 	bl	800016c <__adddf3>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	f7fc febc 	bl	80009f8 <__aeabi_dcmpgt>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d163      	bne.n	8003d4c <_dtoa_r+0x6e4>
 8003c84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c88:	2000      	movs	r0, #0
 8003c8a:	49a9      	ldr	r1, [pc, #676]	; (8003f30 <_dtoa_r+0x8c8>)
 8003c8c:	f7fc fa6c 	bl	8000168 <__aeabi_dsub>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4630      	mov	r0, r6
 8003c96:	4639      	mov	r1, r7
 8003c98:	f7fc fe90 	bl	80009bc <__aeabi_dcmplt>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	f43f af1d 	beq.w	8003adc <_dtoa_r+0x474>
 8003ca2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ca4:	1e7b      	subs	r3, r7, #1
 8003ca6:	9314      	str	r3, [sp, #80]	; 0x50
 8003ca8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003cac:	2b30      	cmp	r3, #48	; 0x30
 8003cae:	d0f8      	beq.n	8003ca2 <_dtoa_r+0x63a>
 8003cb0:	46c2      	mov	sl, r8
 8003cb2:	e03b      	b.n	8003d2c <_dtoa_r+0x6c4>
 8003cb4:	4b9f      	ldr	r3, [pc, #636]	; (8003f34 <_dtoa_r+0x8cc>)
 8003cb6:	f7fc fc0f 	bl	80004d8 <__aeabi_dmul>
 8003cba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003cbe:	e7bc      	b.n	8003c3a <_dtoa_r+0x5d2>
 8003cc0:	9f03      	ldr	r7, [sp, #12]
 8003cc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003cc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fd2d 	bl	800072c <__aeabi_ddiv>
 8003cd2:	f7fc feb1 	bl	8000a38 <__aeabi_d2iz>
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f7fc fb94 	bl	8000404 <__aeabi_i2d>
 8003cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003ce0:	f7fc fbfa 	bl	80004d8 <__aeabi_dmul>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4640      	mov	r0, r8
 8003cea:	4649      	mov	r1, r9
 8003cec:	f7fc fa3c 	bl	8000168 <__aeabi_dsub>
 8003cf0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003cf4:	f807 6b01 	strb.w	r6, [r7], #1
 8003cf8:	9e03      	ldr	r6, [sp, #12]
 8003cfa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8003cfe:	1bbe      	subs	r6, r7, r6
 8003d00:	45b4      	cmp	ip, r6
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	d136      	bne.n	8003d76 <_dtoa_r+0x70e>
 8003d08:	f7fc fa30 	bl	800016c <__adddf3>
 8003d0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d10:	4680      	mov	r8, r0
 8003d12:	4689      	mov	r9, r1
 8003d14:	f7fc fe70 	bl	80009f8 <__aeabi_dcmpgt>
 8003d18:	bb58      	cbnz	r0, 8003d72 <_dtoa_r+0x70a>
 8003d1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	f7fc fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8003d26:	b108      	cbz	r0, 8003d2c <_dtoa_r+0x6c4>
 8003d28:	07e1      	lsls	r1, r4, #31
 8003d2a:	d422      	bmi.n	8003d72 <_dtoa_r+0x70a>
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	4659      	mov	r1, fp
 8003d30:	f000 fd0c 	bl	800474c <_Bfree>
 8003d34:	2300      	movs	r3, #0
 8003d36:	703b      	strb	r3, [r7, #0]
 8003d38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003d3a:	f10a 0001 	add.w	r0, sl, #1
 8003d3e:	6018      	str	r0, [r3, #0]
 8003d40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f43f acde 	beq.w	8003704 <_dtoa_r+0x9c>
 8003d48:	601f      	str	r7, [r3, #0]
 8003d4a:	e4db      	b.n	8003704 <_dtoa_r+0x9c>
 8003d4c:	4627      	mov	r7, r4
 8003d4e:	463b      	mov	r3, r7
 8003d50:	461f      	mov	r7, r3
 8003d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003d56:	2a39      	cmp	r2, #57	; 0x39
 8003d58:	d107      	bne.n	8003d6a <_dtoa_r+0x702>
 8003d5a:	9a03      	ldr	r2, [sp, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d1f7      	bne.n	8003d50 <_dtoa_r+0x6e8>
 8003d60:	2230      	movs	r2, #48	; 0x30
 8003d62:	9903      	ldr	r1, [sp, #12]
 8003d64:	f108 0801 	add.w	r8, r8, #1
 8003d68:	700a      	strb	r2, [r1, #0]
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	3201      	adds	r2, #1
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e79e      	b.n	8003cb0 <_dtoa_r+0x648>
 8003d72:	46d0      	mov	r8, sl
 8003d74:	e7eb      	b.n	8003d4e <_dtoa_r+0x6e6>
 8003d76:	2200      	movs	r2, #0
 8003d78:	4b6e      	ldr	r3, [pc, #440]	; (8003f34 <_dtoa_r+0x8cc>)
 8003d7a:	f7fc fbad 	bl	80004d8 <__aeabi_dmul>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2300      	movs	r3, #0
 8003d82:	4680      	mov	r8, r0
 8003d84:	4689      	mov	r9, r1
 8003d86:	f7fc fe0f 	bl	80009a8 <__aeabi_dcmpeq>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d09b      	beq.n	8003cc6 <_dtoa_r+0x65e>
 8003d8e:	e7cd      	b.n	8003d2c <_dtoa_r+0x6c4>
 8003d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d92:	2a00      	cmp	r2, #0
 8003d94:	f000 80d0 	beq.w	8003f38 <_dtoa_r+0x8d0>
 8003d98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003d9a:	2a01      	cmp	r2, #1
 8003d9c:	f300 80ae 	bgt.w	8003efc <_dtoa_r+0x894>
 8003da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	f000 80a6 	beq.w	8003ef4 <_dtoa_r+0x88c>
 8003da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003dac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003dae:	9f06      	ldr	r7, [sp, #24]
 8003db0:	9a06      	ldr	r2, [sp, #24]
 8003db2:	2101      	movs	r1, #1
 8003db4:	441a      	add	r2, r3
 8003db6:	9206      	str	r2, [sp, #24]
 8003db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dba:	4628      	mov	r0, r5
 8003dbc:	441a      	add	r2, r3
 8003dbe:	9209      	str	r2, [sp, #36]	; 0x24
 8003dc0:	f000 fd7a 	bl	80048b8 <__i2b>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	2f00      	cmp	r7, #0
 8003dc8:	dd0c      	ble.n	8003de4 <_dtoa_r+0x77c>
 8003dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	dd09      	ble.n	8003de4 <_dtoa_r+0x77c>
 8003dd0:	42bb      	cmp	r3, r7
 8003dd2:	bfa8      	it	ge
 8003dd4:	463b      	movge	r3, r7
 8003dd6:	9a06      	ldr	r2, [sp, #24]
 8003dd8:	1aff      	subs	r7, r7, r3
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	9206      	str	r2, [sp, #24]
 8003dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	9309      	str	r3, [sp, #36]	; 0x24
 8003de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de6:	b1f3      	cbz	r3, 8003e26 <_dtoa_r+0x7be>
 8003de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 80a8 	beq.w	8003f40 <_dtoa_r+0x8d8>
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	dd10      	ble.n	8003e16 <_dtoa_r+0x7ae>
 8003df4:	4631      	mov	r1, r6
 8003df6:	4622      	mov	r2, r4
 8003df8:	4628      	mov	r0, r5
 8003dfa:	f000 fe1b 	bl	8004a34 <__pow5mult>
 8003dfe:	465a      	mov	r2, fp
 8003e00:	4601      	mov	r1, r0
 8003e02:	4606      	mov	r6, r0
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 fd6d 	bl	80048e4 <__multiply>
 8003e0a:	4680      	mov	r8, r0
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	4628      	mov	r0, r5
 8003e10:	f000 fc9c 	bl	800474c <_Bfree>
 8003e14:	46c3      	mov	fp, r8
 8003e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e18:	1b1a      	subs	r2, r3, r4
 8003e1a:	d004      	beq.n	8003e26 <_dtoa_r+0x7be>
 8003e1c:	4659      	mov	r1, fp
 8003e1e:	4628      	mov	r0, r5
 8003e20:	f000 fe08 	bl	8004a34 <__pow5mult>
 8003e24:	4683      	mov	fp, r0
 8003e26:	2101      	movs	r1, #1
 8003e28:	4628      	mov	r0, r5
 8003e2a:	f000 fd45 	bl	80048b8 <__i2b>
 8003e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e30:	4604      	mov	r4, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f340 8086 	ble.w	8003f44 <_dtoa_r+0x8dc>
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4601      	mov	r1, r0
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f000 fdf9 	bl	8004a34 <__pow5mult>
 8003e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e44:	4604      	mov	r4, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	dd7f      	ble.n	8003f4a <_dtoa_r+0x8e2>
 8003e4a:	f04f 0800 	mov.w	r8, #0
 8003e4e:	6923      	ldr	r3, [r4, #16]
 8003e50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e54:	6918      	ldr	r0, [r3, #16]
 8003e56:	f000 fce1 	bl	800481c <__hi0bits>
 8003e5a:	f1c0 0020 	rsb	r0, r0, #32
 8003e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e60:	4418      	add	r0, r3
 8003e62:	f010 001f 	ands.w	r0, r0, #31
 8003e66:	f000 8092 	beq.w	8003f8e <_dtoa_r+0x926>
 8003e6a:	f1c0 0320 	rsb	r3, r0, #32
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	f340 808a 	ble.w	8003f88 <_dtoa_r+0x920>
 8003e74:	f1c0 001c 	rsb	r0, r0, #28
 8003e78:	9b06      	ldr	r3, [sp, #24]
 8003e7a:	4407      	add	r7, r0
 8003e7c:	4403      	add	r3, r0
 8003e7e:	9306      	str	r3, [sp, #24]
 8003e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e82:	4403      	add	r3, r0
 8003e84:	9309      	str	r3, [sp, #36]	; 0x24
 8003e86:	9b06      	ldr	r3, [sp, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	dd05      	ble.n	8003e98 <_dtoa_r+0x830>
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 fe29 	bl	8004ae8 <__lshift>
 8003e96:	4683      	mov	fp, r0
 8003e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	dd05      	ble.n	8003eaa <_dtoa_r+0x842>
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f000 fe20 	bl	8004ae8 <__lshift>
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d070      	beq.n	8003f92 <_dtoa_r+0x92a>
 8003eb0:	4621      	mov	r1, r4
 8003eb2:	4658      	mov	r0, fp
 8003eb4:	f000 fe88 	bl	8004bc8 <__mcmp>
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	da6a      	bge.n	8003f92 <_dtoa_r+0x92a>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	220a      	movs	r2, #10
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	f000 fc64 	bl	8004790 <__multadd>
 8003ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eca:	4683      	mov	fp, r0
 8003ecc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8194 	beq.w	80041fe <_dtoa_r+0xb96>
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	2300      	movs	r3, #0
 8003eda:	220a      	movs	r2, #10
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 fc57 	bl	8004790 <__multadd>
 8003ee2:	f1b9 0f00 	cmp.w	r9, #0
 8003ee6:	4606      	mov	r6, r0
 8003ee8:	f300 8093 	bgt.w	8004012 <_dtoa_r+0x9aa>
 8003eec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	dc57      	bgt.n	8003fa2 <_dtoa_r+0x93a>
 8003ef2:	e08e      	b.n	8004012 <_dtoa_r+0x9aa>
 8003ef4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003efa:	e757      	b.n	8003dac <_dtoa_r+0x744>
 8003efc:	9b08      	ldr	r3, [sp, #32]
 8003efe:	1e5c      	subs	r4, r3, #1
 8003f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	bfb7      	itett	lt
 8003f06:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003f08:	1b1c      	subge	r4, r3, r4
 8003f0a:	1ae2      	sublt	r2, r4, r3
 8003f0c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003f0e:	bfbe      	ittt	lt
 8003f10:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003f12:	189b      	addlt	r3, r3, r2
 8003f14:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003f16:	9b08      	ldr	r3, [sp, #32]
 8003f18:	bfb8      	it	lt
 8003f1a:	2400      	movlt	r4, #0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bfbb      	ittet	lt
 8003f20:	9b06      	ldrlt	r3, [sp, #24]
 8003f22:	9a08      	ldrlt	r2, [sp, #32]
 8003f24:	9f06      	ldrge	r7, [sp, #24]
 8003f26:	1a9f      	sublt	r7, r3, r2
 8003f28:	bfac      	ite	ge
 8003f2a:	9b08      	ldrge	r3, [sp, #32]
 8003f2c:	2300      	movlt	r3, #0
 8003f2e:	e73f      	b.n	8003db0 <_dtoa_r+0x748>
 8003f30:	3fe00000 	.word	0x3fe00000
 8003f34:	40240000 	.word	0x40240000
 8003f38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f3a:	9f06      	ldr	r7, [sp, #24]
 8003f3c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003f3e:	e742      	b.n	8003dc6 <_dtoa_r+0x75e>
 8003f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f42:	e76b      	b.n	8003e1c <_dtoa_r+0x7b4>
 8003f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	dc19      	bgt.n	8003f7e <_dtoa_r+0x916>
 8003f4a:	9b04      	ldr	r3, [sp, #16]
 8003f4c:	b9bb      	cbnz	r3, 8003f7e <_dtoa_r+0x916>
 8003f4e:	9b05      	ldr	r3, [sp, #20]
 8003f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f54:	b99b      	cbnz	r3, 8003f7e <_dtoa_r+0x916>
 8003f56:	9b05      	ldr	r3, [sp, #20]
 8003f58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f5c:	0d1b      	lsrs	r3, r3, #20
 8003f5e:	051b      	lsls	r3, r3, #20
 8003f60:	b183      	cbz	r3, 8003f84 <_dtoa_r+0x91c>
 8003f62:	f04f 0801 	mov.w	r8, #1
 8003f66:	9b06      	ldr	r3, [sp, #24]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	9306      	str	r3, [sp, #24]
 8003f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f af6a 	bne.w	8003e4e <_dtoa_r+0x7e6>
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	e76f      	b.n	8003e5e <_dtoa_r+0x7f6>
 8003f7e:	f04f 0800 	mov.w	r8, #0
 8003f82:	e7f6      	b.n	8003f72 <_dtoa_r+0x90a>
 8003f84:	4698      	mov	r8, r3
 8003f86:	e7f4      	b.n	8003f72 <_dtoa_r+0x90a>
 8003f88:	f43f af7d 	beq.w	8003e86 <_dtoa_r+0x81e>
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	301c      	adds	r0, #28
 8003f90:	e772      	b.n	8003e78 <_dtoa_r+0x810>
 8003f92:	9b08      	ldr	r3, [sp, #32]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	dc36      	bgt.n	8004006 <_dtoa_r+0x99e>
 8003f98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	dd33      	ble.n	8004006 <_dtoa_r+0x99e>
 8003f9e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fa2:	f1b9 0f00 	cmp.w	r9, #0
 8003fa6:	d10d      	bne.n	8003fc4 <_dtoa_r+0x95c>
 8003fa8:	4621      	mov	r1, r4
 8003faa:	464b      	mov	r3, r9
 8003fac:	2205      	movs	r2, #5
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f000 fbee 	bl	8004790 <__multadd>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	4658      	mov	r0, fp
 8003fba:	f000 fe05 	bl	8004bc8 <__mcmp>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	f73f adb8 	bgt.w	8003b34 <_dtoa_r+0x4cc>
 8003fc4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fc6:	9f03      	ldr	r7, [sp, #12]
 8003fc8:	ea6f 0a03 	mvn.w	sl, r3
 8003fcc:	f04f 0800 	mov.w	r8, #0
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f000 fbba 	bl	800474c <_Bfree>
 8003fd8:	2e00      	cmp	r6, #0
 8003fda:	f43f aea7 	beq.w	8003d2c <_dtoa_r+0x6c4>
 8003fde:	f1b8 0f00 	cmp.w	r8, #0
 8003fe2:	d005      	beq.n	8003ff0 <_dtoa_r+0x988>
 8003fe4:	45b0      	cmp	r8, r6
 8003fe6:	d003      	beq.n	8003ff0 <_dtoa_r+0x988>
 8003fe8:	4641      	mov	r1, r8
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 fbae 	bl	800474c <_Bfree>
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	f000 fbaa 	bl	800474c <_Bfree>
 8003ff8:	e698      	b.n	8003d2c <_dtoa_r+0x6c4>
 8003ffa:	2400      	movs	r4, #0
 8003ffc:	4626      	mov	r6, r4
 8003ffe:	e7e1      	b.n	8003fc4 <_dtoa_r+0x95c>
 8004000:	46c2      	mov	sl, r8
 8004002:	4626      	mov	r6, r4
 8004004:	e596      	b.n	8003b34 <_dtoa_r+0x4cc>
 8004006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004008:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80fd 	beq.w	800420c <_dtoa_r+0xba4>
 8004012:	2f00      	cmp	r7, #0
 8004014:	dd05      	ble.n	8004022 <_dtoa_r+0x9ba>
 8004016:	4631      	mov	r1, r6
 8004018:	463a      	mov	r2, r7
 800401a:	4628      	mov	r0, r5
 800401c:	f000 fd64 	bl	8004ae8 <__lshift>
 8004020:	4606      	mov	r6, r0
 8004022:	f1b8 0f00 	cmp.w	r8, #0
 8004026:	d05c      	beq.n	80040e2 <_dtoa_r+0xa7a>
 8004028:	4628      	mov	r0, r5
 800402a:	6871      	ldr	r1, [r6, #4]
 800402c:	f000 fb4e 	bl	80046cc <_Balloc>
 8004030:	4607      	mov	r7, r0
 8004032:	b928      	cbnz	r0, 8004040 <_dtoa_r+0x9d8>
 8004034:	4602      	mov	r2, r0
 8004036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800403a:	4b7f      	ldr	r3, [pc, #508]	; (8004238 <_dtoa_r+0xbd0>)
 800403c:	f7ff bb28 	b.w	8003690 <_dtoa_r+0x28>
 8004040:	6932      	ldr	r2, [r6, #16]
 8004042:	f106 010c 	add.w	r1, r6, #12
 8004046:	3202      	adds	r2, #2
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	300c      	adds	r0, #12
 800404c:	f000 fb30 	bl	80046b0 <memcpy>
 8004050:	2201      	movs	r2, #1
 8004052:	4639      	mov	r1, r7
 8004054:	4628      	mov	r0, r5
 8004056:	f000 fd47 	bl	8004ae8 <__lshift>
 800405a:	46b0      	mov	r8, r6
 800405c:	4606      	mov	r6, r0
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	9308      	str	r3, [sp, #32]
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	444b      	add	r3, r9
 8004068:	930a      	str	r3, [sp, #40]	; 0x28
 800406a:	9b04      	ldr	r3, [sp, #16]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	9309      	str	r3, [sp, #36]	; 0x24
 8004072:	9b08      	ldr	r3, [sp, #32]
 8004074:	4621      	mov	r1, r4
 8004076:	3b01      	subs	r3, #1
 8004078:	4658      	mov	r0, fp
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	f7ff fa66 	bl	800354c <quorem>
 8004080:	4603      	mov	r3, r0
 8004082:	4641      	mov	r1, r8
 8004084:	3330      	adds	r3, #48	; 0x30
 8004086:	9006      	str	r0, [sp, #24]
 8004088:	4658      	mov	r0, fp
 800408a:	930b      	str	r3, [sp, #44]	; 0x2c
 800408c:	f000 fd9c 	bl	8004bc8 <__mcmp>
 8004090:	4632      	mov	r2, r6
 8004092:	4681      	mov	r9, r0
 8004094:	4621      	mov	r1, r4
 8004096:	4628      	mov	r0, r5
 8004098:	f000 fdb2 	bl	8004c00 <__mdiff>
 800409c:	68c2      	ldr	r2, [r0, #12]
 800409e:	4607      	mov	r7, r0
 80040a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a2:	bb02      	cbnz	r2, 80040e6 <_dtoa_r+0xa7e>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4658      	mov	r0, fp
 80040a8:	f000 fd8e 	bl	8004bc8 <__mcmp>
 80040ac:	4602      	mov	r2, r0
 80040ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040b0:	4639      	mov	r1, r7
 80040b2:	4628      	mov	r0, r5
 80040b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80040b8:	f000 fb48 	bl	800474c <_Bfree>
 80040bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040c0:	9f08      	ldr	r7, [sp, #32]
 80040c2:	ea43 0102 	orr.w	r1, r3, r2
 80040c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040c8:	430b      	orrs	r3, r1
 80040ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040cc:	d10d      	bne.n	80040ea <_dtoa_r+0xa82>
 80040ce:	2b39      	cmp	r3, #57	; 0x39
 80040d0:	d029      	beq.n	8004126 <_dtoa_r+0xabe>
 80040d2:	f1b9 0f00 	cmp.w	r9, #0
 80040d6:	dd01      	ble.n	80040dc <_dtoa_r+0xa74>
 80040d8:	9b06      	ldr	r3, [sp, #24]
 80040da:	3331      	adds	r3, #49	; 0x31
 80040dc:	9a04      	ldr	r2, [sp, #16]
 80040de:	7013      	strb	r3, [r2, #0]
 80040e0:	e776      	b.n	8003fd0 <_dtoa_r+0x968>
 80040e2:	4630      	mov	r0, r6
 80040e4:	e7b9      	b.n	800405a <_dtoa_r+0x9f2>
 80040e6:	2201      	movs	r2, #1
 80040e8:	e7e2      	b.n	80040b0 <_dtoa_r+0xa48>
 80040ea:	f1b9 0f00 	cmp.w	r9, #0
 80040ee:	db06      	blt.n	80040fe <_dtoa_r+0xa96>
 80040f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80040f2:	ea41 0909 	orr.w	r9, r1, r9
 80040f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040f8:	ea59 0101 	orrs.w	r1, r9, r1
 80040fc:	d120      	bne.n	8004140 <_dtoa_r+0xad8>
 80040fe:	2a00      	cmp	r2, #0
 8004100:	ddec      	ble.n	80040dc <_dtoa_r+0xa74>
 8004102:	4659      	mov	r1, fp
 8004104:	2201      	movs	r2, #1
 8004106:	4628      	mov	r0, r5
 8004108:	9308      	str	r3, [sp, #32]
 800410a:	f000 fced 	bl	8004ae8 <__lshift>
 800410e:	4621      	mov	r1, r4
 8004110:	4683      	mov	fp, r0
 8004112:	f000 fd59 	bl	8004bc8 <__mcmp>
 8004116:	2800      	cmp	r0, #0
 8004118:	9b08      	ldr	r3, [sp, #32]
 800411a:	dc02      	bgt.n	8004122 <_dtoa_r+0xaba>
 800411c:	d1de      	bne.n	80040dc <_dtoa_r+0xa74>
 800411e:	07da      	lsls	r2, r3, #31
 8004120:	d5dc      	bpl.n	80040dc <_dtoa_r+0xa74>
 8004122:	2b39      	cmp	r3, #57	; 0x39
 8004124:	d1d8      	bne.n	80040d8 <_dtoa_r+0xa70>
 8004126:	2339      	movs	r3, #57	; 0x39
 8004128:	9a04      	ldr	r2, [sp, #16]
 800412a:	7013      	strb	r3, [r2, #0]
 800412c:	463b      	mov	r3, r7
 800412e:	461f      	mov	r7, r3
 8004130:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004134:	3b01      	subs	r3, #1
 8004136:	2a39      	cmp	r2, #57	; 0x39
 8004138:	d050      	beq.n	80041dc <_dtoa_r+0xb74>
 800413a:	3201      	adds	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e747      	b.n	8003fd0 <_dtoa_r+0x968>
 8004140:	2a00      	cmp	r2, #0
 8004142:	dd03      	ble.n	800414c <_dtoa_r+0xae4>
 8004144:	2b39      	cmp	r3, #57	; 0x39
 8004146:	d0ee      	beq.n	8004126 <_dtoa_r+0xabe>
 8004148:	3301      	adds	r3, #1
 800414a:	e7c7      	b.n	80040dc <_dtoa_r+0xa74>
 800414c:	9a08      	ldr	r2, [sp, #32]
 800414e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004150:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004154:	428a      	cmp	r2, r1
 8004156:	d02a      	beq.n	80041ae <_dtoa_r+0xb46>
 8004158:	4659      	mov	r1, fp
 800415a:	2300      	movs	r3, #0
 800415c:	220a      	movs	r2, #10
 800415e:	4628      	mov	r0, r5
 8004160:	f000 fb16 	bl	8004790 <__multadd>
 8004164:	45b0      	cmp	r8, r6
 8004166:	4683      	mov	fp, r0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	f04f 020a 	mov.w	r2, #10
 8004170:	4641      	mov	r1, r8
 8004172:	4628      	mov	r0, r5
 8004174:	d107      	bne.n	8004186 <_dtoa_r+0xb1e>
 8004176:	f000 fb0b 	bl	8004790 <__multadd>
 800417a:	4680      	mov	r8, r0
 800417c:	4606      	mov	r6, r0
 800417e:	9b08      	ldr	r3, [sp, #32]
 8004180:	3301      	adds	r3, #1
 8004182:	9308      	str	r3, [sp, #32]
 8004184:	e775      	b.n	8004072 <_dtoa_r+0xa0a>
 8004186:	f000 fb03 	bl	8004790 <__multadd>
 800418a:	4631      	mov	r1, r6
 800418c:	4680      	mov	r8, r0
 800418e:	2300      	movs	r3, #0
 8004190:	220a      	movs	r2, #10
 8004192:	4628      	mov	r0, r5
 8004194:	f000 fafc 	bl	8004790 <__multadd>
 8004198:	4606      	mov	r6, r0
 800419a:	e7f0      	b.n	800417e <_dtoa_r+0xb16>
 800419c:	f1b9 0f00 	cmp.w	r9, #0
 80041a0:	bfcc      	ite	gt
 80041a2:	464f      	movgt	r7, r9
 80041a4:	2701      	movle	r7, #1
 80041a6:	f04f 0800 	mov.w	r8, #0
 80041aa:	9a03      	ldr	r2, [sp, #12]
 80041ac:	4417      	add	r7, r2
 80041ae:	4659      	mov	r1, fp
 80041b0:	2201      	movs	r2, #1
 80041b2:	4628      	mov	r0, r5
 80041b4:	9308      	str	r3, [sp, #32]
 80041b6:	f000 fc97 	bl	8004ae8 <__lshift>
 80041ba:	4621      	mov	r1, r4
 80041bc:	4683      	mov	fp, r0
 80041be:	f000 fd03 	bl	8004bc8 <__mcmp>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	dcb2      	bgt.n	800412c <_dtoa_r+0xac4>
 80041c6:	d102      	bne.n	80041ce <_dtoa_r+0xb66>
 80041c8:	9b08      	ldr	r3, [sp, #32]
 80041ca:	07db      	lsls	r3, r3, #31
 80041cc:	d4ae      	bmi.n	800412c <_dtoa_r+0xac4>
 80041ce:	463b      	mov	r3, r7
 80041d0:	461f      	mov	r7, r3
 80041d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041d6:	2a30      	cmp	r2, #48	; 0x30
 80041d8:	d0fa      	beq.n	80041d0 <_dtoa_r+0xb68>
 80041da:	e6f9      	b.n	8003fd0 <_dtoa_r+0x968>
 80041dc:	9a03      	ldr	r2, [sp, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d1a5      	bne.n	800412e <_dtoa_r+0xac6>
 80041e2:	2331      	movs	r3, #49	; 0x31
 80041e4:	f10a 0a01 	add.w	sl, sl, #1
 80041e8:	e779      	b.n	80040de <_dtoa_r+0xa76>
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <_dtoa_r+0xbd4>)
 80041ec:	f7ff baa8 	b.w	8003740 <_dtoa_r+0xd8>
 80041f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f aa81 	bne.w	80036fa <_dtoa_r+0x92>
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <_dtoa_r+0xbd8>)
 80041fa:	f7ff baa1 	b.w	8003740 <_dtoa_r+0xd8>
 80041fe:	f1b9 0f00 	cmp.w	r9, #0
 8004202:	dc03      	bgt.n	800420c <_dtoa_r+0xba4>
 8004204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004206:	2b02      	cmp	r3, #2
 8004208:	f73f aecb 	bgt.w	8003fa2 <_dtoa_r+0x93a>
 800420c:	9f03      	ldr	r7, [sp, #12]
 800420e:	4621      	mov	r1, r4
 8004210:	4658      	mov	r0, fp
 8004212:	f7ff f99b 	bl	800354c <quorem>
 8004216:	9a03      	ldr	r2, [sp, #12]
 8004218:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800421c:	f807 3b01 	strb.w	r3, [r7], #1
 8004220:	1aba      	subs	r2, r7, r2
 8004222:	4591      	cmp	r9, r2
 8004224:	ddba      	ble.n	800419c <_dtoa_r+0xb34>
 8004226:	4659      	mov	r1, fp
 8004228:	2300      	movs	r3, #0
 800422a:	220a      	movs	r2, #10
 800422c:	4628      	mov	r0, r5
 800422e:	f000 faaf 	bl	8004790 <__multadd>
 8004232:	4683      	mov	fp, r0
 8004234:	e7eb      	b.n	800420e <_dtoa_r+0xba6>
 8004236:	bf00      	nop
 8004238:	08005877 	.word	0x08005877
 800423c:	080057d4 	.word	0x080057d4
 8004240:	080057f8 	.word	0x080057f8

08004244 <__sflush_r>:
 8004244:	898a      	ldrh	r2, [r1, #12]
 8004246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004248:	4605      	mov	r5, r0
 800424a:	0710      	lsls	r0, r2, #28
 800424c:	460c      	mov	r4, r1
 800424e:	d457      	bmi.n	8004300 <__sflush_r+0xbc>
 8004250:	684b      	ldr	r3, [r1, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	dc04      	bgt.n	8004260 <__sflush_r+0x1c>
 8004256:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	dc01      	bgt.n	8004260 <__sflush_r+0x1c>
 800425c:	2000      	movs	r0, #0
 800425e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004262:	2e00      	cmp	r6, #0
 8004264:	d0fa      	beq.n	800425c <__sflush_r+0x18>
 8004266:	2300      	movs	r3, #0
 8004268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800426c:	682f      	ldr	r7, [r5, #0]
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	d032      	beq.n	80042d8 <__sflush_r+0x94>
 8004272:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	075a      	lsls	r2, r3, #29
 8004278:	d505      	bpl.n	8004286 <__sflush_r+0x42>
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	1ac0      	subs	r0, r0, r3
 800427e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004280:	b10b      	cbz	r3, 8004286 <__sflush_r+0x42>
 8004282:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004284:	1ac0      	subs	r0, r0, r3
 8004286:	2300      	movs	r3, #0
 8004288:	4602      	mov	r2, r0
 800428a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800428c:	4628      	mov	r0, r5
 800428e:	6a21      	ldr	r1, [r4, #32]
 8004290:	47b0      	blx	r6
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	d106      	bne.n	80042a6 <__sflush_r+0x62>
 8004298:	6829      	ldr	r1, [r5, #0]
 800429a:	291d      	cmp	r1, #29
 800429c:	d82c      	bhi.n	80042f8 <__sflush_r+0xb4>
 800429e:	4a29      	ldr	r2, [pc, #164]	; (8004344 <__sflush_r+0x100>)
 80042a0:	40ca      	lsrs	r2, r1
 80042a2:	07d6      	lsls	r6, r2, #31
 80042a4:	d528      	bpl.n	80042f8 <__sflush_r+0xb4>
 80042a6:	2200      	movs	r2, #0
 80042a8:	6062      	str	r2, [r4, #4]
 80042aa:	6922      	ldr	r2, [r4, #16]
 80042ac:	04d9      	lsls	r1, r3, #19
 80042ae:	6022      	str	r2, [r4, #0]
 80042b0:	d504      	bpl.n	80042bc <__sflush_r+0x78>
 80042b2:	1c42      	adds	r2, r0, #1
 80042b4:	d101      	bne.n	80042ba <__sflush_r+0x76>
 80042b6:	682b      	ldr	r3, [r5, #0]
 80042b8:	b903      	cbnz	r3, 80042bc <__sflush_r+0x78>
 80042ba:	6560      	str	r0, [r4, #84]	; 0x54
 80042bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042be:	602f      	str	r7, [r5, #0]
 80042c0:	2900      	cmp	r1, #0
 80042c2:	d0cb      	beq.n	800425c <__sflush_r+0x18>
 80042c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d002      	beq.n	80042d2 <__sflush_r+0x8e>
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 fd93 	bl	8004df8 <_free_r>
 80042d2:	2000      	movs	r0, #0
 80042d4:	6360      	str	r0, [r4, #52]	; 0x34
 80042d6:	e7c2      	b.n	800425e <__sflush_r+0x1a>
 80042d8:	6a21      	ldr	r1, [r4, #32]
 80042da:	2301      	movs	r3, #1
 80042dc:	4628      	mov	r0, r5
 80042de:	47b0      	blx	r6
 80042e0:	1c41      	adds	r1, r0, #1
 80042e2:	d1c7      	bne.n	8004274 <__sflush_r+0x30>
 80042e4:	682b      	ldr	r3, [r5, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0c4      	beq.n	8004274 <__sflush_r+0x30>
 80042ea:	2b1d      	cmp	r3, #29
 80042ec:	d001      	beq.n	80042f2 <__sflush_r+0xae>
 80042ee:	2b16      	cmp	r3, #22
 80042f0:	d101      	bne.n	80042f6 <__sflush_r+0xb2>
 80042f2:	602f      	str	r7, [r5, #0]
 80042f4:	e7b2      	b.n	800425c <__sflush_r+0x18>
 80042f6:	89a3      	ldrh	r3, [r4, #12]
 80042f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042fc:	81a3      	strh	r3, [r4, #12]
 80042fe:	e7ae      	b.n	800425e <__sflush_r+0x1a>
 8004300:	690f      	ldr	r7, [r1, #16]
 8004302:	2f00      	cmp	r7, #0
 8004304:	d0aa      	beq.n	800425c <__sflush_r+0x18>
 8004306:	0793      	lsls	r3, r2, #30
 8004308:	bf18      	it	ne
 800430a:	2300      	movne	r3, #0
 800430c:	680e      	ldr	r6, [r1, #0]
 800430e:	bf08      	it	eq
 8004310:	694b      	ldreq	r3, [r1, #20]
 8004312:	1bf6      	subs	r6, r6, r7
 8004314:	600f      	str	r7, [r1, #0]
 8004316:	608b      	str	r3, [r1, #8]
 8004318:	2e00      	cmp	r6, #0
 800431a:	dd9f      	ble.n	800425c <__sflush_r+0x18>
 800431c:	4633      	mov	r3, r6
 800431e:	463a      	mov	r2, r7
 8004320:	4628      	mov	r0, r5
 8004322:	6a21      	ldr	r1, [r4, #32]
 8004324:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004328:	47e0      	blx	ip
 800432a:	2800      	cmp	r0, #0
 800432c:	dc06      	bgt.n	800433c <__sflush_r+0xf8>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004338:	81a3      	strh	r3, [r4, #12]
 800433a:	e790      	b.n	800425e <__sflush_r+0x1a>
 800433c:	4407      	add	r7, r0
 800433e:	1a36      	subs	r6, r6, r0
 8004340:	e7ea      	b.n	8004318 <__sflush_r+0xd4>
 8004342:	bf00      	nop
 8004344:	20400001 	.word	0x20400001

08004348 <_fflush_r>:
 8004348:	b538      	push	{r3, r4, r5, lr}
 800434a:	690b      	ldr	r3, [r1, #16]
 800434c:	4605      	mov	r5, r0
 800434e:	460c      	mov	r4, r1
 8004350:	b913      	cbnz	r3, 8004358 <_fflush_r+0x10>
 8004352:	2500      	movs	r5, #0
 8004354:	4628      	mov	r0, r5
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	b118      	cbz	r0, 8004362 <_fflush_r+0x1a>
 800435a:	6983      	ldr	r3, [r0, #24]
 800435c:	b90b      	cbnz	r3, 8004362 <_fflush_r+0x1a>
 800435e:	f000 f887 	bl	8004470 <__sinit>
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <_fflush_r+0x6c>)
 8004364:	429c      	cmp	r4, r3
 8004366:	d11b      	bne.n	80043a0 <_fflush_r+0x58>
 8004368:	686c      	ldr	r4, [r5, #4]
 800436a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0ef      	beq.n	8004352 <_fflush_r+0xa>
 8004372:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004374:	07d0      	lsls	r0, r2, #31
 8004376:	d404      	bmi.n	8004382 <_fflush_r+0x3a>
 8004378:	0599      	lsls	r1, r3, #22
 800437a:	d402      	bmi.n	8004382 <_fflush_r+0x3a>
 800437c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800437e:	f000 f91a 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8004382:	4628      	mov	r0, r5
 8004384:	4621      	mov	r1, r4
 8004386:	f7ff ff5d 	bl	8004244 <__sflush_r>
 800438a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800438c:	4605      	mov	r5, r0
 800438e:	07da      	lsls	r2, r3, #31
 8004390:	d4e0      	bmi.n	8004354 <_fflush_r+0xc>
 8004392:	89a3      	ldrh	r3, [r4, #12]
 8004394:	059b      	lsls	r3, r3, #22
 8004396:	d4dd      	bmi.n	8004354 <_fflush_r+0xc>
 8004398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800439a:	f000 f90d 	bl	80045b8 <__retarget_lock_release_recursive>
 800439e:	e7d9      	b.n	8004354 <_fflush_r+0xc>
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <_fflush_r+0x70>)
 80043a2:	429c      	cmp	r4, r3
 80043a4:	d101      	bne.n	80043aa <_fflush_r+0x62>
 80043a6:	68ac      	ldr	r4, [r5, #8]
 80043a8:	e7df      	b.n	800436a <_fflush_r+0x22>
 80043aa:	4b04      	ldr	r3, [pc, #16]	; (80043bc <_fflush_r+0x74>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	bf08      	it	eq
 80043b0:	68ec      	ldreq	r4, [r5, #12]
 80043b2:	e7da      	b.n	800436a <_fflush_r+0x22>
 80043b4:	080058a8 	.word	0x080058a8
 80043b8:	080058c8 	.word	0x080058c8
 80043bc:	08005888 	.word	0x08005888

080043c0 <std>:
 80043c0:	2300      	movs	r3, #0
 80043c2:	b510      	push	{r4, lr}
 80043c4:	4604      	mov	r4, r0
 80043c6:	e9c0 3300 	strd	r3, r3, [r0]
 80043ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043ce:	6083      	str	r3, [r0, #8]
 80043d0:	8181      	strh	r1, [r0, #12]
 80043d2:	6643      	str	r3, [r0, #100]	; 0x64
 80043d4:	81c2      	strh	r2, [r0, #14]
 80043d6:	6183      	str	r3, [r0, #24]
 80043d8:	4619      	mov	r1, r3
 80043da:	2208      	movs	r2, #8
 80043dc:	305c      	adds	r0, #92	; 0x5c
 80043de:	f7fe fb6f 	bl	8002ac0 <memset>
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <std+0x38>)
 80043e4:	6224      	str	r4, [r4, #32]
 80043e6:	6263      	str	r3, [r4, #36]	; 0x24
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <std+0x3c>)
 80043ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <std+0x40>)
 80043ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <std+0x44>)
 80043f2:	6323      	str	r3, [r4, #48]	; 0x30
 80043f4:	bd10      	pop	{r4, pc}
 80043f6:	bf00      	nop
 80043f8:	08005281 	.word	0x08005281
 80043fc:	080052a3 	.word	0x080052a3
 8004400:	080052db 	.word	0x080052db
 8004404:	080052ff 	.word	0x080052ff

08004408 <_cleanup_r>:
 8004408:	4901      	ldr	r1, [pc, #4]	; (8004410 <_cleanup_r+0x8>)
 800440a:	f000 b8af 	b.w	800456c <_fwalk_reent>
 800440e:	bf00      	nop
 8004410:	08004349 	.word	0x08004349

08004414 <__sfmoreglue>:
 8004414:	2268      	movs	r2, #104	; 0x68
 8004416:	b570      	push	{r4, r5, r6, lr}
 8004418:	1e4d      	subs	r5, r1, #1
 800441a:	4355      	muls	r5, r2
 800441c:	460e      	mov	r6, r1
 800441e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004422:	f000 fd51 	bl	8004ec8 <_malloc_r>
 8004426:	4604      	mov	r4, r0
 8004428:	b140      	cbz	r0, 800443c <__sfmoreglue+0x28>
 800442a:	2100      	movs	r1, #0
 800442c:	e9c0 1600 	strd	r1, r6, [r0]
 8004430:	300c      	adds	r0, #12
 8004432:	60a0      	str	r0, [r4, #8]
 8004434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004438:	f7fe fb42 	bl	8002ac0 <memset>
 800443c:	4620      	mov	r0, r4
 800443e:	bd70      	pop	{r4, r5, r6, pc}

08004440 <__sfp_lock_acquire>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__sfp_lock_acquire+0x8>)
 8004442:	f000 b8b8 	b.w	80045b6 <__retarget_lock_acquire_recursive>
 8004446:	bf00      	nop
 8004448:	20000249 	.word	0x20000249

0800444c <__sfp_lock_release>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__sfp_lock_release+0x8>)
 800444e:	f000 b8b3 	b.w	80045b8 <__retarget_lock_release_recursive>
 8004452:	bf00      	nop
 8004454:	20000249 	.word	0x20000249

08004458 <__sinit_lock_acquire>:
 8004458:	4801      	ldr	r0, [pc, #4]	; (8004460 <__sinit_lock_acquire+0x8>)
 800445a:	f000 b8ac 	b.w	80045b6 <__retarget_lock_acquire_recursive>
 800445e:	bf00      	nop
 8004460:	2000024a 	.word	0x2000024a

08004464 <__sinit_lock_release>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__sinit_lock_release+0x8>)
 8004466:	f000 b8a7 	b.w	80045b8 <__retarget_lock_release_recursive>
 800446a:	bf00      	nop
 800446c:	2000024a 	.word	0x2000024a

08004470 <__sinit>:
 8004470:	b510      	push	{r4, lr}
 8004472:	4604      	mov	r4, r0
 8004474:	f7ff fff0 	bl	8004458 <__sinit_lock_acquire>
 8004478:	69a3      	ldr	r3, [r4, #24]
 800447a:	b11b      	cbz	r3, 8004484 <__sinit+0x14>
 800447c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004480:	f7ff bff0 	b.w	8004464 <__sinit_lock_release>
 8004484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004488:	6523      	str	r3, [r4, #80]	; 0x50
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <__sinit+0x68>)
 800448c:	4a13      	ldr	r2, [pc, #76]	; (80044dc <__sinit+0x6c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	62a2      	str	r2, [r4, #40]	; 0x28
 8004492:	42a3      	cmp	r3, r4
 8004494:	bf08      	it	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	4620      	mov	r0, r4
 800449a:	bf08      	it	eq
 800449c:	61a3      	streq	r3, [r4, #24]
 800449e:	f000 f81f 	bl	80044e0 <__sfp>
 80044a2:	6060      	str	r0, [r4, #4]
 80044a4:	4620      	mov	r0, r4
 80044a6:	f000 f81b 	bl	80044e0 <__sfp>
 80044aa:	60a0      	str	r0, [r4, #8]
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 f817 	bl	80044e0 <__sfp>
 80044b2:	2200      	movs	r2, #0
 80044b4:	2104      	movs	r1, #4
 80044b6:	60e0      	str	r0, [r4, #12]
 80044b8:	6860      	ldr	r0, [r4, #4]
 80044ba:	f7ff ff81 	bl	80043c0 <std>
 80044be:	2201      	movs	r2, #1
 80044c0:	2109      	movs	r1, #9
 80044c2:	68a0      	ldr	r0, [r4, #8]
 80044c4:	f7ff ff7c 	bl	80043c0 <std>
 80044c8:	2202      	movs	r2, #2
 80044ca:	2112      	movs	r1, #18
 80044cc:	68e0      	ldr	r0, [r4, #12]
 80044ce:	f7ff ff77 	bl	80043c0 <std>
 80044d2:	2301      	movs	r3, #1
 80044d4:	61a3      	str	r3, [r4, #24]
 80044d6:	e7d1      	b.n	800447c <__sinit+0xc>
 80044d8:	080057c0 	.word	0x080057c0
 80044dc:	08004409 	.word	0x08004409

080044e0 <__sfp>:
 80044e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e2:	4607      	mov	r7, r0
 80044e4:	f7ff ffac 	bl	8004440 <__sfp_lock_acquire>
 80044e8:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <__sfp+0x84>)
 80044ea:	681e      	ldr	r6, [r3, #0]
 80044ec:	69b3      	ldr	r3, [r6, #24]
 80044ee:	b913      	cbnz	r3, 80044f6 <__sfp+0x16>
 80044f0:	4630      	mov	r0, r6
 80044f2:	f7ff ffbd 	bl	8004470 <__sinit>
 80044f6:	3648      	adds	r6, #72	; 0x48
 80044f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044fc:	3b01      	subs	r3, #1
 80044fe:	d503      	bpl.n	8004508 <__sfp+0x28>
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	b30b      	cbz	r3, 8004548 <__sfp+0x68>
 8004504:	6836      	ldr	r6, [r6, #0]
 8004506:	e7f7      	b.n	80044f8 <__sfp+0x18>
 8004508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800450c:	b9d5      	cbnz	r5, 8004544 <__sfp+0x64>
 800450e:	4b16      	ldr	r3, [pc, #88]	; (8004568 <__sfp+0x88>)
 8004510:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004514:	60e3      	str	r3, [r4, #12]
 8004516:	6665      	str	r5, [r4, #100]	; 0x64
 8004518:	f000 f84c 	bl	80045b4 <__retarget_lock_init_recursive>
 800451c:	f7ff ff96 	bl	800444c <__sfp_lock_release>
 8004520:	2208      	movs	r2, #8
 8004522:	4629      	mov	r1, r5
 8004524:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004528:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	61a5      	str	r5, [r4, #24]
 8004530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004534:	f7fe fac4 	bl	8002ac0 <memset>
 8004538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800453c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004540:	4620      	mov	r0, r4
 8004542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004544:	3468      	adds	r4, #104	; 0x68
 8004546:	e7d9      	b.n	80044fc <__sfp+0x1c>
 8004548:	2104      	movs	r1, #4
 800454a:	4638      	mov	r0, r7
 800454c:	f7ff ff62 	bl	8004414 <__sfmoreglue>
 8004550:	4604      	mov	r4, r0
 8004552:	6030      	str	r0, [r6, #0]
 8004554:	2800      	cmp	r0, #0
 8004556:	d1d5      	bne.n	8004504 <__sfp+0x24>
 8004558:	f7ff ff78 	bl	800444c <__sfp_lock_release>
 800455c:	230c      	movs	r3, #12
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	e7ee      	b.n	8004540 <__sfp+0x60>
 8004562:	bf00      	nop
 8004564:	080057c0 	.word	0x080057c0
 8004568:	ffff0001 	.word	0xffff0001

0800456c <_fwalk_reent>:
 800456c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004570:	4606      	mov	r6, r0
 8004572:	4688      	mov	r8, r1
 8004574:	2700      	movs	r7, #0
 8004576:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800457a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800457e:	f1b9 0901 	subs.w	r9, r9, #1
 8004582:	d505      	bpl.n	8004590 <_fwalk_reent+0x24>
 8004584:	6824      	ldr	r4, [r4, #0]
 8004586:	2c00      	cmp	r4, #0
 8004588:	d1f7      	bne.n	800457a <_fwalk_reent+0xe>
 800458a:	4638      	mov	r0, r7
 800458c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004590:	89ab      	ldrh	r3, [r5, #12]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d907      	bls.n	80045a6 <_fwalk_reent+0x3a>
 8004596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800459a:	3301      	adds	r3, #1
 800459c:	d003      	beq.n	80045a6 <_fwalk_reent+0x3a>
 800459e:	4629      	mov	r1, r5
 80045a0:	4630      	mov	r0, r6
 80045a2:	47c0      	blx	r8
 80045a4:	4307      	orrs	r7, r0
 80045a6:	3568      	adds	r5, #104	; 0x68
 80045a8:	e7e9      	b.n	800457e <_fwalk_reent+0x12>
	...

080045ac <_localeconv_r>:
 80045ac:	4800      	ldr	r0, [pc, #0]	; (80045b0 <_localeconv_r+0x4>)
 80045ae:	4770      	bx	lr
 80045b0:	20000160 	.word	0x20000160

080045b4 <__retarget_lock_init_recursive>:
 80045b4:	4770      	bx	lr

080045b6 <__retarget_lock_acquire_recursive>:
 80045b6:	4770      	bx	lr

080045b8 <__retarget_lock_release_recursive>:
 80045b8:	4770      	bx	lr

080045ba <__swhatbuf_r>:
 80045ba:	b570      	push	{r4, r5, r6, lr}
 80045bc:	460e      	mov	r6, r1
 80045be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c2:	4614      	mov	r4, r2
 80045c4:	2900      	cmp	r1, #0
 80045c6:	461d      	mov	r5, r3
 80045c8:	b096      	sub	sp, #88	; 0x58
 80045ca:	da08      	bge.n	80045de <__swhatbuf_r+0x24>
 80045cc:	2200      	movs	r2, #0
 80045ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80045d2:	602a      	str	r2, [r5, #0]
 80045d4:	061a      	lsls	r2, r3, #24
 80045d6:	d410      	bmi.n	80045fa <__swhatbuf_r+0x40>
 80045d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045dc:	e00e      	b.n	80045fc <__swhatbuf_r+0x42>
 80045de:	466a      	mov	r2, sp
 80045e0:	f000 ffa4 	bl	800552c <_fstat_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	dbf1      	blt.n	80045cc <__swhatbuf_r+0x12>
 80045e8:	9a01      	ldr	r2, [sp, #4]
 80045ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045f2:	425a      	negs	r2, r3
 80045f4:	415a      	adcs	r2, r3
 80045f6:	602a      	str	r2, [r5, #0]
 80045f8:	e7ee      	b.n	80045d8 <__swhatbuf_r+0x1e>
 80045fa:	2340      	movs	r3, #64	; 0x40
 80045fc:	2000      	movs	r0, #0
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	b016      	add	sp, #88	; 0x58
 8004602:	bd70      	pop	{r4, r5, r6, pc}

08004604 <__smakebuf_r>:
 8004604:	898b      	ldrh	r3, [r1, #12]
 8004606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004608:	079d      	lsls	r5, r3, #30
 800460a:	4606      	mov	r6, r0
 800460c:	460c      	mov	r4, r1
 800460e:	d507      	bpl.n	8004620 <__smakebuf_r+0x1c>
 8004610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	2301      	movs	r3, #1
 800461a:	6163      	str	r3, [r4, #20]
 800461c:	b002      	add	sp, #8
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	466a      	mov	r2, sp
 8004622:	ab01      	add	r3, sp, #4
 8004624:	f7ff ffc9 	bl	80045ba <__swhatbuf_r>
 8004628:	9900      	ldr	r1, [sp, #0]
 800462a:	4605      	mov	r5, r0
 800462c:	4630      	mov	r0, r6
 800462e:	f000 fc4b 	bl	8004ec8 <_malloc_r>
 8004632:	b948      	cbnz	r0, 8004648 <__smakebuf_r+0x44>
 8004634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004638:	059a      	lsls	r2, r3, #22
 800463a:	d4ef      	bmi.n	800461c <__smakebuf_r+0x18>
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	f043 0302 	orr.w	r3, r3, #2
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	e7e3      	b.n	8004610 <__smakebuf_r+0xc>
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <__smakebuf_r+0x7c>)
 800464a:	62b3      	str	r3, [r6, #40]	; 0x28
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	6020      	str	r0, [r4, #0]
 8004650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004654:	81a3      	strh	r3, [r4, #12]
 8004656:	9b00      	ldr	r3, [sp, #0]
 8004658:	6120      	str	r0, [r4, #16]
 800465a:	6163      	str	r3, [r4, #20]
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	b15b      	cbz	r3, 8004678 <__smakebuf_r+0x74>
 8004660:	4630      	mov	r0, r6
 8004662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004666:	f000 ff73 	bl	8005550 <_isatty_r>
 800466a:	b128      	cbz	r0, 8004678 <__smakebuf_r+0x74>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	89a0      	ldrh	r0, [r4, #12]
 800467a:	4305      	orrs	r5, r0
 800467c:	81a5      	strh	r5, [r4, #12]
 800467e:	e7cd      	b.n	800461c <__smakebuf_r+0x18>
 8004680:	08004409 	.word	0x08004409

08004684 <malloc>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <malloc+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f000 bc1d 	b.w	8004ec8 <_malloc_r>
 800468e:	bf00      	nop
 8004690:	2000000c 	.word	0x2000000c

08004694 <memchr>:
 8004694:	4603      	mov	r3, r0
 8004696:	b510      	push	{r4, lr}
 8004698:	b2c9      	uxtb	r1, r1
 800469a:	4402      	add	r2, r0
 800469c:	4293      	cmp	r3, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	d101      	bne.n	80046a6 <memchr+0x12>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e003      	b.n	80046ae <memchr+0x1a>
 80046a6:	7804      	ldrb	r4, [r0, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	428c      	cmp	r4, r1
 80046ac:	d1f6      	bne.n	800469c <memchr+0x8>
 80046ae:	bd10      	pop	{r4, pc}

080046b0 <memcpy>:
 80046b0:	440a      	add	r2, r1
 80046b2:	4291      	cmp	r1, r2
 80046b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b8:	d100      	bne.n	80046bc <memcpy+0xc>
 80046ba:	4770      	bx	lr
 80046bc:	b510      	push	{r4, lr}
 80046be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046c2:	4291      	cmp	r1, r2
 80046c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c8:	d1f9      	bne.n	80046be <memcpy+0xe>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <_Balloc>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	b976      	cbnz	r6, 80046f4 <_Balloc+0x28>
 80046d6:	2010      	movs	r0, #16
 80046d8:	f7ff ffd4 	bl	8004684 <malloc>
 80046dc:	4602      	mov	r2, r0
 80046de:	6260      	str	r0, [r4, #36]	; 0x24
 80046e0:	b920      	cbnz	r0, 80046ec <_Balloc+0x20>
 80046e2:	2166      	movs	r1, #102	; 0x66
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <_Balloc+0x78>)
 80046e6:	4818      	ldr	r0, [pc, #96]	; (8004748 <_Balloc+0x7c>)
 80046e8:	f000 fee0 	bl	80054ac <__assert_func>
 80046ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046f0:	6006      	str	r6, [r0, #0]
 80046f2:	60c6      	str	r6, [r0, #12]
 80046f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80046f6:	68f3      	ldr	r3, [r6, #12]
 80046f8:	b183      	cbz	r3, 800471c <_Balloc+0x50>
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004702:	b9b8      	cbnz	r0, 8004734 <_Balloc+0x68>
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f605 	lsl.w	r6, r1, r5
 800470a:	1d72      	adds	r2, r6, #5
 800470c:	4620      	mov	r0, r4
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	f000 fb5e 	bl	8004dd0 <_calloc_r>
 8004714:	b160      	cbz	r0, 8004730 <_Balloc+0x64>
 8004716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800471a:	e00e      	b.n	800473a <_Balloc+0x6e>
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	2104      	movs	r1, #4
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fb55 	bl	8004dd0 <_calloc_r>
 8004726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004728:	60f0      	str	r0, [r6, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e4      	bne.n	80046fa <_Balloc+0x2e>
 8004730:	2000      	movs	r0, #0
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	6802      	ldr	r2, [r0, #0]
 8004736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800473a:	2300      	movs	r3, #0
 800473c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004740:	e7f7      	b.n	8004732 <_Balloc+0x66>
 8004742:	bf00      	nop
 8004744:	08005805 	.word	0x08005805
 8004748:	080058e8 	.word	0x080058e8

0800474c <_Bfree>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004750:	4605      	mov	r5, r0
 8004752:	460c      	mov	r4, r1
 8004754:	b976      	cbnz	r6, 8004774 <_Bfree+0x28>
 8004756:	2010      	movs	r0, #16
 8004758:	f7ff ff94 	bl	8004684 <malloc>
 800475c:	4602      	mov	r2, r0
 800475e:	6268      	str	r0, [r5, #36]	; 0x24
 8004760:	b920      	cbnz	r0, 800476c <_Bfree+0x20>
 8004762:	218a      	movs	r1, #138	; 0x8a
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <_Bfree+0x3c>)
 8004766:	4809      	ldr	r0, [pc, #36]	; (800478c <_Bfree+0x40>)
 8004768:	f000 fea0 	bl	80054ac <__assert_func>
 800476c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004770:	6006      	str	r6, [r0, #0]
 8004772:	60c6      	str	r6, [r0, #12]
 8004774:	b13c      	cbz	r4, 8004786 <_Bfree+0x3a>
 8004776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004780:	6021      	str	r1, [r4, #0]
 8004782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	08005805 	.word	0x08005805
 800478c:	080058e8 	.word	0x080058e8

08004790 <__multadd>:
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	4607      	mov	r7, r0
 8004796:	460c      	mov	r4, r1
 8004798:	461e      	mov	r6, r3
 800479a:	2000      	movs	r0, #0
 800479c:	690d      	ldr	r5, [r1, #16]
 800479e:	f101 0c14 	add.w	ip, r1, #20
 80047a2:	f8dc 3000 	ldr.w	r3, [ip]
 80047a6:	3001      	adds	r0, #1
 80047a8:	b299      	uxth	r1, r3
 80047aa:	fb02 6101 	mla	r1, r2, r1, r6
 80047ae:	0c1e      	lsrs	r6, r3, #16
 80047b0:	0c0b      	lsrs	r3, r1, #16
 80047b2:	fb02 3306 	mla	r3, r2, r6, r3
 80047b6:	b289      	uxth	r1, r1
 80047b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047bc:	4285      	cmp	r5, r0
 80047be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047c2:	f84c 1b04 	str.w	r1, [ip], #4
 80047c6:	dcec      	bgt.n	80047a2 <__multadd+0x12>
 80047c8:	b30e      	cbz	r6, 800480e <__multadd+0x7e>
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc19      	bgt.n	8004804 <__multadd+0x74>
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4638      	mov	r0, r7
 80047d4:	3101      	adds	r1, #1
 80047d6:	f7ff ff79 	bl	80046cc <_Balloc>
 80047da:	4680      	mov	r8, r0
 80047dc:	b928      	cbnz	r0, 80047ea <__multadd+0x5a>
 80047de:	4602      	mov	r2, r0
 80047e0:	21b5      	movs	r1, #181	; 0xb5
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <__multadd+0x84>)
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <__multadd+0x88>)
 80047e6:	f000 fe61 	bl	80054ac <__assert_func>
 80047ea:	6922      	ldr	r2, [r4, #16]
 80047ec:	f104 010c 	add.w	r1, r4, #12
 80047f0:	3202      	adds	r2, #2
 80047f2:	0092      	lsls	r2, r2, #2
 80047f4:	300c      	adds	r0, #12
 80047f6:	f7ff ff5b 	bl	80046b0 <memcpy>
 80047fa:	4621      	mov	r1, r4
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff ffa5 	bl	800474c <_Bfree>
 8004802:	4644      	mov	r4, r8
 8004804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004808:	3501      	adds	r5, #1
 800480a:	615e      	str	r6, [r3, #20]
 800480c:	6125      	str	r5, [r4, #16]
 800480e:	4620      	mov	r0, r4
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	08005877 	.word	0x08005877
 8004818:	080058e8 	.word	0x080058e8

0800481c <__hi0bits>:
 800481c:	0c02      	lsrs	r2, r0, #16
 800481e:	0412      	lsls	r2, r2, #16
 8004820:	4603      	mov	r3, r0
 8004822:	b9ca      	cbnz	r2, 8004858 <__hi0bits+0x3c>
 8004824:	0403      	lsls	r3, r0, #16
 8004826:	2010      	movs	r0, #16
 8004828:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800482c:	bf04      	itt	eq
 800482e:	021b      	lsleq	r3, r3, #8
 8004830:	3008      	addeq	r0, #8
 8004832:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004836:	bf04      	itt	eq
 8004838:	011b      	lsleq	r3, r3, #4
 800483a:	3004      	addeq	r0, #4
 800483c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004840:	bf04      	itt	eq
 8004842:	009b      	lsleq	r3, r3, #2
 8004844:	3002      	addeq	r0, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	db05      	blt.n	8004856 <__hi0bits+0x3a>
 800484a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800484e:	f100 0001 	add.w	r0, r0, #1
 8004852:	bf08      	it	eq
 8004854:	2020      	moveq	r0, #32
 8004856:	4770      	bx	lr
 8004858:	2000      	movs	r0, #0
 800485a:	e7e5      	b.n	8004828 <__hi0bits+0xc>

0800485c <__lo0bits>:
 800485c:	6803      	ldr	r3, [r0, #0]
 800485e:	4602      	mov	r2, r0
 8004860:	f013 0007 	ands.w	r0, r3, #7
 8004864:	d00b      	beq.n	800487e <__lo0bits+0x22>
 8004866:	07d9      	lsls	r1, r3, #31
 8004868:	d421      	bmi.n	80048ae <__lo0bits+0x52>
 800486a:	0798      	lsls	r0, r3, #30
 800486c:	bf49      	itett	mi
 800486e:	085b      	lsrmi	r3, r3, #1
 8004870:	089b      	lsrpl	r3, r3, #2
 8004872:	2001      	movmi	r0, #1
 8004874:	6013      	strmi	r3, [r2, #0]
 8004876:	bf5c      	itt	pl
 8004878:	2002      	movpl	r0, #2
 800487a:	6013      	strpl	r3, [r2, #0]
 800487c:	4770      	bx	lr
 800487e:	b299      	uxth	r1, r3
 8004880:	b909      	cbnz	r1, 8004886 <__lo0bits+0x2a>
 8004882:	2010      	movs	r0, #16
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	b2d9      	uxtb	r1, r3
 8004888:	b909      	cbnz	r1, 800488e <__lo0bits+0x32>
 800488a:	3008      	adds	r0, #8
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	0719      	lsls	r1, r3, #28
 8004890:	bf04      	itt	eq
 8004892:	091b      	lsreq	r3, r3, #4
 8004894:	3004      	addeq	r0, #4
 8004896:	0799      	lsls	r1, r3, #30
 8004898:	bf04      	itt	eq
 800489a:	089b      	lsreq	r3, r3, #2
 800489c:	3002      	addeq	r0, #2
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	d403      	bmi.n	80048aa <__lo0bits+0x4e>
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	f100 0001 	add.w	r0, r0, #1
 80048a8:	d003      	beq.n	80048b2 <__lo0bits+0x56>
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	4770      	bx	lr
 80048ae:	2000      	movs	r0, #0
 80048b0:	4770      	bx	lr
 80048b2:	2020      	movs	r0, #32
 80048b4:	4770      	bx	lr
	...

080048b8 <__i2b>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	2101      	movs	r1, #1
 80048be:	f7ff ff05 	bl	80046cc <_Balloc>
 80048c2:	4602      	mov	r2, r0
 80048c4:	b928      	cbnz	r0, 80048d2 <__i2b+0x1a>
 80048c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80048ca:	4b04      	ldr	r3, [pc, #16]	; (80048dc <__i2b+0x24>)
 80048cc:	4804      	ldr	r0, [pc, #16]	; (80048e0 <__i2b+0x28>)
 80048ce:	f000 fded 	bl	80054ac <__assert_func>
 80048d2:	2301      	movs	r3, #1
 80048d4:	6144      	str	r4, [r0, #20]
 80048d6:	6103      	str	r3, [r0, #16]
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	08005877 	.word	0x08005877
 80048e0:	080058e8 	.word	0x080058e8

080048e4 <__multiply>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	4691      	mov	r9, r2
 80048ea:	690a      	ldr	r2, [r1, #16]
 80048ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048f0:	460c      	mov	r4, r1
 80048f2:	429a      	cmp	r2, r3
 80048f4:	bfbe      	ittt	lt
 80048f6:	460b      	movlt	r3, r1
 80048f8:	464c      	movlt	r4, r9
 80048fa:	4699      	movlt	r9, r3
 80048fc:	6927      	ldr	r7, [r4, #16]
 80048fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	6861      	ldr	r1, [r4, #4]
 8004906:	eb07 060a 	add.w	r6, r7, sl
 800490a:	42b3      	cmp	r3, r6
 800490c:	b085      	sub	sp, #20
 800490e:	bfb8      	it	lt
 8004910:	3101      	addlt	r1, #1
 8004912:	f7ff fedb 	bl	80046cc <_Balloc>
 8004916:	b930      	cbnz	r0, 8004926 <__multiply+0x42>
 8004918:	4602      	mov	r2, r0
 800491a:	f240 115d 	movw	r1, #349	; 0x15d
 800491e:	4b43      	ldr	r3, [pc, #268]	; (8004a2c <__multiply+0x148>)
 8004920:	4843      	ldr	r0, [pc, #268]	; (8004a30 <__multiply+0x14c>)
 8004922:	f000 fdc3 	bl	80054ac <__assert_func>
 8004926:	f100 0514 	add.w	r5, r0, #20
 800492a:	462b      	mov	r3, r5
 800492c:	2200      	movs	r2, #0
 800492e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004932:	4543      	cmp	r3, r8
 8004934:	d321      	bcc.n	800497a <__multiply+0x96>
 8004936:	f104 0314 	add.w	r3, r4, #20
 800493a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800493e:	f109 0314 	add.w	r3, r9, #20
 8004942:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004946:	9202      	str	r2, [sp, #8]
 8004948:	1b3a      	subs	r2, r7, r4
 800494a:	3a15      	subs	r2, #21
 800494c:	f022 0203 	bic.w	r2, r2, #3
 8004950:	3204      	adds	r2, #4
 8004952:	f104 0115 	add.w	r1, r4, #21
 8004956:	428f      	cmp	r7, r1
 8004958:	bf38      	it	cc
 800495a:	2204      	movcc	r2, #4
 800495c:	9201      	str	r2, [sp, #4]
 800495e:	9a02      	ldr	r2, [sp, #8]
 8004960:	9303      	str	r3, [sp, #12]
 8004962:	429a      	cmp	r2, r3
 8004964:	d80c      	bhi.n	8004980 <__multiply+0x9c>
 8004966:	2e00      	cmp	r6, #0
 8004968:	dd03      	ble.n	8004972 <__multiply+0x8e>
 800496a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800496e:	2b00      	cmp	r3, #0
 8004970:	d059      	beq.n	8004a26 <__multiply+0x142>
 8004972:	6106      	str	r6, [r0, #16]
 8004974:	b005      	add	sp, #20
 8004976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497a:	f843 2b04 	str.w	r2, [r3], #4
 800497e:	e7d8      	b.n	8004932 <__multiply+0x4e>
 8004980:	f8b3 a000 	ldrh.w	sl, [r3]
 8004984:	f1ba 0f00 	cmp.w	sl, #0
 8004988:	d023      	beq.n	80049d2 <__multiply+0xee>
 800498a:	46a9      	mov	r9, r5
 800498c:	f04f 0c00 	mov.w	ip, #0
 8004990:	f104 0e14 	add.w	lr, r4, #20
 8004994:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004998:	f8d9 1000 	ldr.w	r1, [r9]
 800499c:	fa1f fb82 	uxth.w	fp, r2
 80049a0:	b289      	uxth	r1, r1
 80049a2:	fb0a 110b 	mla	r1, sl, fp, r1
 80049a6:	4461      	add	r1, ip
 80049a8:	f8d9 c000 	ldr.w	ip, [r9]
 80049ac:	0c12      	lsrs	r2, r2, #16
 80049ae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80049b2:	fb0a c202 	mla	r2, sl, r2, ip
 80049b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049ba:	b289      	uxth	r1, r1
 80049bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049c0:	4577      	cmp	r7, lr
 80049c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049c6:	f849 1b04 	str.w	r1, [r9], #4
 80049ca:	d8e3      	bhi.n	8004994 <__multiply+0xb0>
 80049cc:	9a01      	ldr	r2, [sp, #4]
 80049ce:	f845 c002 	str.w	ip, [r5, r2]
 80049d2:	9a03      	ldr	r2, [sp, #12]
 80049d4:	3304      	adds	r3, #4
 80049d6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049da:	f1b9 0f00 	cmp.w	r9, #0
 80049de:	d020      	beq.n	8004a22 <__multiply+0x13e>
 80049e0:	46ae      	mov	lr, r5
 80049e2:	f04f 0a00 	mov.w	sl, #0
 80049e6:	6829      	ldr	r1, [r5, #0]
 80049e8:	f104 0c14 	add.w	ip, r4, #20
 80049ec:	f8bc b000 	ldrh.w	fp, [ip]
 80049f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049f4:	b289      	uxth	r1, r1
 80049f6:	fb09 220b 	mla	r2, r9, fp, r2
 80049fa:	4492      	add	sl, r2
 80049fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004a00:	f84e 1b04 	str.w	r1, [lr], #4
 8004a04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004a08:	f8be 1000 	ldrh.w	r1, [lr]
 8004a0c:	0c12      	lsrs	r2, r2, #16
 8004a0e:	fb09 1102 	mla	r1, r9, r2, r1
 8004a12:	4567      	cmp	r7, ip
 8004a14:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004a18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a1c:	d8e6      	bhi.n	80049ec <__multiply+0x108>
 8004a1e:	9a01      	ldr	r2, [sp, #4]
 8004a20:	50a9      	str	r1, [r5, r2]
 8004a22:	3504      	adds	r5, #4
 8004a24:	e79b      	b.n	800495e <__multiply+0x7a>
 8004a26:	3e01      	subs	r6, #1
 8004a28:	e79d      	b.n	8004966 <__multiply+0x82>
 8004a2a:	bf00      	nop
 8004a2c:	08005877 	.word	0x08005877
 8004a30:	080058e8 	.word	0x080058e8

08004a34 <__pow5mult>:
 8004a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a38:	4615      	mov	r5, r2
 8004a3a:	f012 0203 	ands.w	r2, r2, #3
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	d007      	beq.n	8004a54 <__pow5mult+0x20>
 8004a44:	4c25      	ldr	r4, [pc, #148]	; (8004adc <__pow5mult+0xa8>)
 8004a46:	3a01      	subs	r2, #1
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a4e:	f7ff fe9f 	bl	8004790 <__multadd>
 8004a52:	4607      	mov	r7, r0
 8004a54:	10ad      	asrs	r5, r5, #2
 8004a56:	d03d      	beq.n	8004ad4 <__pow5mult+0xa0>
 8004a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a5a:	b97c      	cbnz	r4, 8004a7c <__pow5mult+0x48>
 8004a5c:	2010      	movs	r0, #16
 8004a5e:	f7ff fe11 	bl	8004684 <malloc>
 8004a62:	4602      	mov	r2, r0
 8004a64:	6270      	str	r0, [r6, #36]	; 0x24
 8004a66:	b928      	cbnz	r0, 8004a74 <__pow5mult+0x40>
 8004a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004a6c:	4b1c      	ldr	r3, [pc, #112]	; (8004ae0 <__pow5mult+0xac>)
 8004a6e:	481d      	ldr	r0, [pc, #116]	; (8004ae4 <__pow5mult+0xb0>)
 8004a70:	f000 fd1c 	bl	80054ac <__assert_func>
 8004a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a78:	6004      	str	r4, [r0, #0]
 8004a7a:	60c4      	str	r4, [r0, #12]
 8004a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a84:	b94c      	cbnz	r4, 8004a9a <__pow5mult+0x66>
 8004a86:	f240 2171 	movw	r1, #625	; 0x271
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	f7ff ff14 	bl	80048b8 <__i2b>
 8004a90:	2300      	movs	r3, #0
 8004a92:	4604      	mov	r4, r0
 8004a94:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a98:	6003      	str	r3, [r0, #0]
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	07eb      	lsls	r3, r5, #31
 8004aa0:	d50a      	bpl.n	8004ab8 <__pow5mult+0x84>
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	4622      	mov	r2, r4
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff ff1c 	bl	80048e4 <__multiply>
 8004aac:	4680      	mov	r8, r0
 8004aae:	4639      	mov	r1, r7
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f7ff fe4b 	bl	800474c <_Bfree>
 8004ab6:	4647      	mov	r7, r8
 8004ab8:	106d      	asrs	r5, r5, #1
 8004aba:	d00b      	beq.n	8004ad4 <__pow5mult+0xa0>
 8004abc:	6820      	ldr	r0, [r4, #0]
 8004abe:	b938      	cbnz	r0, 8004ad0 <__pow5mult+0x9c>
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	4621      	mov	r1, r4
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff ff0d 	bl	80048e4 <__multiply>
 8004aca:	6020      	str	r0, [r4, #0]
 8004acc:	f8c0 9000 	str.w	r9, [r0]
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	e7e4      	b.n	8004a9e <__pow5mult+0x6a>
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ada:	bf00      	nop
 8004adc:	08005a38 	.word	0x08005a38
 8004ae0:	08005805 	.word	0x08005805
 8004ae4:	080058e8 	.word	0x080058e8

08004ae8 <__lshift>:
 8004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	460c      	mov	r4, r1
 8004aee:	4607      	mov	r7, r0
 8004af0:	4691      	mov	r9, r2
 8004af2:	6923      	ldr	r3, [r4, #16]
 8004af4:	6849      	ldr	r1, [r1, #4]
 8004af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b00:	f108 0601 	add.w	r6, r8, #1
 8004b04:	42b3      	cmp	r3, r6
 8004b06:	db0b      	blt.n	8004b20 <__lshift+0x38>
 8004b08:	4638      	mov	r0, r7
 8004b0a:	f7ff fddf 	bl	80046cc <_Balloc>
 8004b0e:	4605      	mov	r5, r0
 8004b10:	b948      	cbnz	r0, 8004b26 <__lshift+0x3e>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004b18:	4b29      	ldr	r3, [pc, #164]	; (8004bc0 <__lshift+0xd8>)
 8004b1a:	482a      	ldr	r0, [pc, #168]	; (8004bc4 <__lshift+0xdc>)
 8004b1c:	f000 fcc6 	bl	80054ac <__assert_func>
 8004b20:	3101      	adds	r1, #1
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	e7ee      	b.n	8004b04 <__lshift+0x1c>
 8004b26:	2300      	movs	r3, #0
 8004b28:	f100 0114 	add.w	r1, r0, #20
 8004b2c:	f100 0210 	add.w	r2, r0, #16
 8004b30:	4618      	mov	r0, r3
 8004b32:	4553      	cmp	r3, sl
 8004b34:	db37      	blt.n	8004ba6 <__lshift+0xbe>
 8004b36:	6920      	ldr	r0, [r4, #16]
 8004b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b3c:	f104 0314 	add.w	r3, r4, #20
 8004b40:	f019 091f 	ands.w	r9, r9, #31
 8004b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b4c:	d02f      	beq.n	8004bae <__lshift+0xc6>
 8004b4e:	468a      	mov	sl, r1
 8004b50:	f04f 0c00 	mov.w	ip, #0
 8004b54:	f1c9 0e20 	rsb	lr, r9, #32
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	fa02 f209 	lsl.w	r2, r2, r9
 8004b5e:	ea42 020c 	orr.w	r2, r2, ip
 8004b62:	f84a 2b04 	str.w	r2, [sl], #4
 8004b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004b70:	d8f2      	bhi.n	8004b58 <__lshift+0x70>
 8004b72:	1b03      	subs	r3, r0, r4
 8004b74:	3b15      	subs	r3, #21
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	f104 0215 	add.w	r2, r4, #21
 8004b80:	4290      	cmp	r0, r2
 8004b82:	bf38      	it	cc
 8004b84:	2304      	movcc	r3, #4
 8004b86:	f841 c003 	str.w	ip, [r1, r3]
 8004b8a:	f1bc 0f00 	cmp.w	ip, #0
 8004b8e:	d001      	beq.n	8004b94 <__lshift+0xac>
 8004b90:	f108 0602 	add.w	r6, r8, #2
 8004b94:	3e01      	subs	r6, #1
 8004b96:	4638      	mov	r0, r7
 8004b98:	4621      	mov	r1, r4
 8004b9a:	612e      	str	r6, [r5, #16]
 8004b9c:	f7ff fdd6 	bl	800474c <_Bfree>
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004baa:	3301      	adds	r3, #1
 8004bac:	e7c1      	b.n	8004b32 <__lshift+0x4a>
 8004bae:	3904      	subs	r1, #4
 8004bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bba:	d8f9      	bhi.n	8004bb0 <__lshift+0xc8>
 8004bbc:	e7ea      	b.n	8004b94 <__lshift+0xac>
 8004bbe:	bf00      	nop
 8004bc0:	08005877 	.word	0x08005877
 8004bc4:	080058e8 	.word	0x080058e8

08004bc8 <__mcmp>:
 8004bc8:	4603      	mov	r3, r0
 8004bca:	690a      	ldr	r2, [r1, #16]
 8004bcc:	6900      	ldr	r0, [r0, #16]
 8004bce:	b530      	push	{r4, r5, lr}
 8004bd0:	1a80      	subs	r0, r0, r2
 8004bd2:	d10d      	bne.n	8004bf0 <__mcmp+0x28>
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	3114      	adds	r1, #20
 8004bd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004bdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004be0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004be4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004be8:	4295      	cmp	r5, r2
 8004bea:	d002      	beq.n	8004bf2 <__mcmp+0x2a>
 8004bec:	d304      	bcc.n	8004bf8 <__mcmp+0x30>
 8004bee:	2001      	movs	r0, #1
 8004bf0:	bd30      	pop	{r4, r5, pc}
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	d3f4      	bcc.n	8004be0 <__mcmp+0x18>
 8004bf6:	e7fb      	b.n	8004bf0 <__mcmp+0x28>
 8004bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfc:	e7f8      	b.n	8004bf0 <__mcmp+0x28>
	...

08004c00 <__mdiff>:
 8004c00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	460d      	mov	r5, r1
 8004c06:	4607      	mov	r7, r0
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	f7ff ffdb 	bl	8004bc8 <__mcmp>
 8004c12:	1e06      	subs	r6, r0, #0
 8004c14:	d111      	bne.n	8004c3a <__mdiff+0x3a>
 8004c16:	4631      	mov	r1, r6
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f7ff fd57 	bl	80046cc <_Balloc>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	b928      	cbnz	r0, 8004c2e <__mdiff+0x2e>
 8004c22:	f240 2132 	movw	r1, #562	; 0x232
 8004c26:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <__mdiff+0x110>)
 8004c28:	483a      	ldr	r0, [pc, #232]	; (8004d14 <__mdiff+0x114>)
 8004c2a:	f000 fc3f 	bl	80054ac <__assert_func>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004c34:	4610      	mov	r0, r2
 8004c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	bfa4      	itt	ge
 8004c3c:	4623      	movge	r3, r4
 8004c3e:	462c      	movge	r4, r5
 8004c40:	4638      	mov	r0, r7
 8004c42:	6861      	ldr	r1, [r4, #4]
 8004c44:	bfa6      	itte	ge
 8004c46:	461d      	movge	r5, r3
 8004c48:	2600      	movge	r6, #0
 8004c4a:	2601      	movlt	r6, #1
 8004c4c:	f7ff fd3e 	bl	80046cc <_Balloc>
 8004c50:	4602      	mov	r2, r0
 8004c52:	b918      	cbnz	r0, 8004c5c <__mdiff+0x5c>
 8004c54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c58:	4b2d      	ldr	r3, [pc, #180]	; (8004d10 <__mdiff+0x110>)
 8004c5a:	e7e5      	b.n	8004c28 <__mdiff+0x28>
 8004c5c:	f102 0814 	add.w	r8, r2, #20
 8004c60:	46c2      	mov	sl, r8
 8004c62:	f04f 0c00 	mov.w	ip, #0
 8004c66:	6927      	ldr	r7, [r4, #16]
 8004c68:	60c6      	str	r6, [r0, #12]
 8004c6a:	692e      	ldr	r6, [r5, #16]
 8004c6c:	f104 0014 	add.w	r0, r4, #20
 8004c70:	f105 0914 	add.w	r9, r5, #20
 8004c74:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c7c:	3410      	adds	r4, #16
 8004c7e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004c82:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c86:	fa1f f18b 	uxth.w	r1, fp
 8004c8a:	448c      	add	ip, r1
 8004c8c:	b299      	uxth	r1, r3
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	ebac 0101 	sub.w	r1, ip, r1
 8004c94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c9c:	b289      	uxth	r1, r1
 8004c9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ca2:	454e      	cmp	r6, r9
 8004ca4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004ca8:	f84a 3b04 	str.w	r3, [sl], #4
 8004cac:	d8e7      	bhi.n	8004c7e <__mdiff+0x7e>
 8004cae:	1b73      	subs	r3, r6, r5
 8004cb0:	3b15      	subs	r3, #21
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	3515      	adds	r5, #21
 8004cb8:	3304      	adds	r3, #4
 8004cba:	42ae      	cmp	r6, r5
 8004cbc:	bf38      	it	cc
 8004cbe:	2304      	movcc	r3, #4
 8004cc0:	4418      	add	r0, r3
 8004cc2:	4443      	add	r3, r8
 8004cc4:	461e      	mov	r6, r3
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	4575      	cmp	r5, lr
 8004cca:	d30e      	bcc.n	8004cea <__mdiff+0xea>
 8004ccc:	f10e 0103 	add.w	r1, lr, #3
 8004cd0:	1a09      	subs	r1, r1, r0
 8004cd2:	f021 0103 	bic.w	r1, r1, #3
 8004cd6:	3803      	subs	r0, #3
 8004cd8:	4586      	cmp	lr, r0
 8004cda:	bf38      	it	cc
 8004cdc:	2100      	movcc	r1, #0
 8004cde:	4419      	add	r1, r3
 8004ce0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004ce4:	b18b      	cbz	r3, 8004d0a <__mdiff+0x10a>
 8004ce6:	6117      	str	r7, [r2, #16]
 8004ce8:	e7a4      	b.n	8004c34 <__mdiff+0x34>
 8004cea:	f855 8b04 	ldr.w	r8, [r5], #4
 8004cee:	fa1f f188 	uxth.w	r1, r8
 8004cf2:	4461      	add	r1, ip
 8004cf4:	140c      	asrs	r4, r1, #16
 8004cf6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cfa:	b289      	uxth	r1, r1
 8004cfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004d00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004d04:	f846 1b04 	str.w	r1, [r6], #4
 8004d08:	e7de      	b.n	8004cc8 <__mdiff+0xc8>
 8004d0a:	3f01      	subs	r7, #1
 8004d0c:	e7e8      	b.n	8004ce0 <__mdiff+0xe0>
 8004d0e:	bf00      	nop
 8004d10:	08005877 	.word	0x08005877
 8004d14:	080058e8 	.word	0x080058e8

08004d18 <__d2b>:
 8004d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004d22:	4690      	mov	r8, r2
 8004d24:	461d      	mov	r5, r3
 8004d26:	f7ff fcd1 	bl	80046cc <_Balloc>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	b930      	cbnz	r0, 8004d3c <__d2b+0x24>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	f240 310a 	movw	r1, #778	; 0x30a
 8004d34:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <__d2b+0xb0>)
 8004d36:	4825      	ldr	r0, [pc, #148]	; (8004dcc <__d2b+0xb4>)
 8004d38:	f000 fbb8 	bl	80054ac <__assert_func>
 8004d3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004d40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004d44:	bb2d      	cbnz	r5, 8004d92 <__d2b+0x7a>
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	f1b8 0300 	subs.w	r3, r8, #0
 8004d4c:	d026      	beq.n	8004d9c <__d2b+0x84>
 8004d4e:	4668      	mov	r0, sp
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	f7ff fd83 	bl	800485c <__lo0bits>
 8004d56:	9900      	ldr	r1, [sp, #0]
 8004d58:	b1f0      	cbz	r0, 8004d98 <__d2b+0x80>
 8004d5a:	9a01      	ldr	r2, [sp, #4]
 8004d5c:	f1c0 0320 	rsb	r3, r0, #32
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	430b      	orrs	r3, r1
 8004d66:	40c2      	lsrs	r2, r0
 8004d68:	6163      	str	r3, [r4, #20]
 8004d6a:	9201      	str	r2, [sp, #4]
 8004d6c:	9b01      	ldr	r3, [sp, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf14      	ite	ne
 8004d72:	2102      	movne	r1, #2
 8004d74:	2101      	moveq	r1, #1
 8004d76:	61a3      	str	r3, [r4, #24]
 8004d78:	6121      	str	r1, [r4, #16]
 8004d7a:	b1c5      	cbz	r5, 8004dae <__d2b+0x96>
 8004d7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d80:	4405      	add	r5, r0
 8004d82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d86:	603d      	str	r5, [r7, #0]
 8004d88:	6030      	str	r0, [r6, #0]
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	b002      	add	sp, #8
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d96:	e7d6      	b.n	8004d46 <__d2b+0x2e>
 8004d98:	6161      	str	r1, [r4, #20]
 8004d9a:	e7e7      	b.n	8004d6c <__d2b+0x54>
 8004d9c:	a801      	add	r0, sp, #4
 8004d9e:	f7ff fd5d 	bl	800485c <__lo0bits>
 8004da2:	2101      	movs	r1, #1
 8004da4:	9b01      	ldr	r3, [sp, #4]
 8004da6:	6121      	str	r1, [r4, #16]
 8004da8:	6163      	str	r3, [r4, #20]
 8004daa:	3020      	adds	r0, #32
 8004dac:	e7e5      	b.n	8004d7a <__d2b+0x62>
 8004dae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004db2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004db6:	6038      	str	r0, [r7, #0]
 8004db8:	6918      	ldr	r0, [r3, #16]
 8004dba:	f7ff fd2f 	bl	800481c <__hi0bits>
 8004dbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004dc2:	6031      	str	r1, [r6, #0]
 8004dc4:	e7e1      	b.n	8004d8a <__d2b+0x72>
 8004dc6:	bf00      	nop
 8004dc8:	08005877 	.word	0x08005877
 8004dcc:	080058e8 	.word	0x080058e8

08004dd0 <_calloc_r>:
 8004dd0:	b570      	push	{r4, r5, r6, lr}
 8004dd2:	fba1 5402 	umull	r5, r4, r1, r2
 8004dd6:	b934      	cbnz	r4, 8004de6 <_calloc_r+0x16>
 8004dd8:	4629      	mov	r1, r5
 8004dda:	f000 f875 	bl	8004ec8 <_malloc_r>
 8004dde:	4606      	mov	r6, r0
 8004de0:	b928      	cbnz	r0, 8004dee <_calloc_r+0x1e>
 8004de2:	4630      	mov	r0, r6
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	220c      	movs	r2, #12
 8004de8:	2600      	movs	r6, #0
 8004dea:	6002      	str	r2, [r0, #0]
 8004dec:	e7f9      	b.n	8004de2 <_calloc_r+0x12>
 8004dee:	462a      	mov	r2, r5
 8004df0:	4621      	mov	r1, r4
 8004df2:	f7fd fe65 	bl	8002ac0 <memset>
 8004df6:	e7f4      	b.n	8004de2 <_calloc_r+0x12>

08004df8 <_free_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d040      	beq.n	8004e82 <_free_r+0x8a>
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	18e4      	addlt	r4, r4, r3
 8004e0c:	f000 fbd4 	bl	80055b8 <__malloc_lock>
 8004e10:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <_free_r+0x8c>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	b933      	cbnz	r3, 8004e24 <_free_r+0x2c>
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e20:	f000 bbd0 	b.w	80055c4 <__malloc_unlock>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x42>
 8004e28:	6820      	ldr	r0, [r4, #0]
 8004e2a:	1821      	adds	r1, r4, r0
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf01      	itttt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	1809      	addeq	r1, r1, r0
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	e7ed      	b.n	8004e16 <_free_r+0x1e>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x4c>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x42>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1850      	adds	r0, r2, r1
 8004e48:	42a0      	cmp	r0, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x6c>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	4401      	add	r1, r0
 8004e50:	1850      	adds	r0, r2, r1
 8004e52:	4283      	cmp	r3, r0
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1e0      	bne.n	8004e1a <_free_r+0x22>
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4401      	add	r1, r0
 8004e5e:	6011      	str	r1, [r2, #0]
 8004e60:	6053      	str	r3, [r2, #4]
 8004e62:	e7da      	b.n	8004e1a <_free_r+0x22>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x74>
 8004e66:	230c      	movs	r3, #12
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	e7d6      	b.n	8004e1a <_free_r+0x22>
 8004e6c:	6820      	ldr	r0, [r4, #0]
 8004e6e:	1821      	adds	r1, r4, r0
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf01      	itttt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	1809      	addeq	r1, r1, r0
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	6063      	str	r3, [r4, #4]
 8004e7e:	6054      	str	r4, [r2, #4]
 8004e80:	e7cb      	b.n	8004e1a <_free_r+0x22>
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	2000024c 	.word	0x2000024c

08004e88 <sbrk_aligned>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4e0e      	ldr	r6, [pc, #56]	; (8004ec4 <sbrk_aligned+0x3c>)
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	6831      	ldr	r1, [r6, #0]
 8004e90:	4605      	mov	r5, r0
 8004e92:	b911      	cbnz	r1, 8004e9a <sbrk_aligned+0x12>
 8004e94:	f000 f9e4 	bl	8005260 <_sbrk_r>
 8004e98:	6030      	str	r0, [r6, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 f9df 	bl	8005260 <_sbrk_r>
 8004ea2:	1c43      	adds	r3, r0, #1
 8004ea4:	d00a      	beq.n	8004ebc <sbrk_aligned+0x34>
 8004ea6:	1cc4      	adds	r4, r0, #3
 8004ea8:	f024 0403 	bic.w	r4, r4, #3
 8004eac:	42a0      	cmp	r0, r4
 8004eae:	d007      	beq.n	8004ec0 <sbrk_aligned+0x38>
 8004eb0:	1a21      	subs	r1, r4, r0
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f9d4 	bl	8005260 <_sbrk_r>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d101      	bne.n	8004ec0 <sbrk_aligned+0x38>
 8004ebc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	20000250 	.word	0x20000250

08004ec8 <_malloc_r>:
 8004ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	1ccd      	adds	r5, r1, #3
 8004ece:	f025 0503 	bic.w	r5, r5, #3
 8004ed2:	3508      	adds	r5, #8
 8004ed4:	2d0c      	cmp	r5, #12
 8004ed6:	bf38      	it	cc
 8004ed8:	250c      	movcc	r5, #12
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	4607      	mov	r7, r0
 8004ede:	db01      	blt.n	8004ee4 <_malloc_r+0x1c>
 8004ee0:	42a9      	cmp	r1, r5
 8004ee2:	d905      	bls.n	8004ef0 <_malloc_r+0x28>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	2600      	movs	r6, #0
 8004ee8:	603b      	str	r3, [r7, #0]
 8004eea:	4630      	mov	r0, r6
 8004eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef0:	4e2e      	ldr	r6, [pc, #184]	; (8004fac <_malloc_r+0xe4>)
 8004ef2:	f000 fb61 	bl	80055b8 <__malloc_lock>
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	461c      	mov	r4, r3
 8004efa:	bb34      	cbnz	r4, 8004f4a <_malloc_r+0x82>
 8004efc:	4629      	mov	r1, r5
 8004efe:	4638      	mov	r0, r7
 8004f00:	f7ff ffc2 	bl	8004e88 <sbrk_aligned>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	4604      	mov	r4, r0
 8004f08:	d14d      	bne.n	8004fa6 <_malloc_r+0xde>
 8004f0a:	6834      	ldr	r4, [r6, #0]
 8004f0c:	4626      	mov	r6, r4
 8004f0e:	2e00      	cmp	r6, #0
 8004f10:	d140      	bne.n	8004f94 <_malloc_r+0xcc>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	4631      	mov	r1, r6
 8004f16:	4638      	mov	r0, r7
 8004f18:	eb04 0803 	add.w	r8, r4, r3
 8004f1c:	f000 f9a0 	bl	8005260 <_sbrk_r>
 8004f20:	4580      	cmp	r8, r0
 8004f22:	d13a      	bne.n	8004f9a <_malloc_r+0xd2>
 8004f24:	6821      	ldr	r1, [r4, #0]
 8004f26:	3503      	adds	r5, #3
 8004f28:	1a6d      	subs	r5, r5, r1
 8004f2a:	f025 0503 	bic.w	r5, r5, #3
 8004f2e:	3508      	adds	r5, #8
 8004f30:	2d0c      	cmp	r5, #12
 8004f32:	bf38      	it	cc
 8004f34:	250c      	movcc	r5, #12
 8004f36:	4638      	mov	r0, r7
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7ff ffa5 	bl	8004e88 <sbrk_aligned>
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d02b      	beq.n	8004f9a <_malloc_r+0xd2>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	442b      	add	r3, r5
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	e00e      	b.n	8004f68 <_malloc_r+0xa0>
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	d41e      	bmi.n	8004f8e <_malloc_r+0xc6>
 8004f50:	2a0b      	cmp	r2, #11
 8004f52:	d916      	bls.n	8004f82 <_malloc_r+0xba>
 8004f54:	1961      	adds	r1, r4, r5
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	6025      	str	r5, [r4, #0]
 8004f5a:	bf18      	it	ne
 8004f5c:	6059      	strne	r1, [r3, #4]
 8004f5e:	6863      	ldr	r3, [r4, #4]
 8004f60:	bf08      	it	eq
 8004f62:	6031      	streq	r1, [r6, #0]
 8004f64:	5162      	str	r2, [r4, r5]
 8004f66:	604b      	str	r3, [r1, #4]
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f104 060b 	add.w	r6, r4, #11
 8004f6e:	f000 fb29 	bl	80055c4 <__malloc_unlock>
 8004f72:	f026 0607 	bic.w	r6, r6, #7
 8004f76:	1d23      	adds	r3, r4, #4
 8004f78:	1af2      	subs	r2, r6, r3
 8004f7a:	d0b6      	beq.n	8004eea <_malloc_r+0x22>
 8004f7c:	1b9b      	subs	r3, r3, r6
 8004f7e:	50a3      	str	r3, [r4, r2]
 8004f80:	e7b3      	b.n	8004eea <_malloc_r+0x22>
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	bf0c      	ite	eq
 8004f88:	6032      	streq	r2, [r6, #0]
 8004f8a:	605a      	strne	r2, [r3, #4]
 8004f8c:	e7ec      	b.n	8004f68 <_malloc_r+0xa0>
 8004f8e:	4623      	mov	r3, r4
 8004f90:	6864      	ldr	r4, [r4, #4]
 8004f92:	e7b2      	b.n	8004efa <_malloc_r+0x32>
 8004f94:	4634      	mov	r4, r6
 8004f96:	6876      	ldr	r6, [r6, #4]
 8004f98:	e7b9      	b.n	8004f0e <_malloc_r+0x46>
 8004f9a:	230c      	movs	r3, #12
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	f000 fb10 	bl	80055c4 <__malloc_unlock>
 8004fa4:	e7a1      	b.n	8004eea <_malloc_r+0x22>
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	e7de      	b.n	8004f68 <_malloc_r+0xa0>
 8004faa:	bf00      	nop
 8004fac:	2000024c 	.word	0x2000024c

08004fb0 <__sfputc_r>:
 8004fb0:	6893      	ldr	r3, [r2, #8]
 8004fb2:	b410      	push	{r4}
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	6093      	str	r3, [r2, #8]
 8004fba:	da07      	bge.n	8004fcc <__sfputc_r+0x1c>
 8004fbc:	6994      	ldr	r4, [r2, #24]
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	db01      	blt.n	8004fc6 <__sfputc_r+0x16>
 8004fc2:	290a      	cmp	r1, #10
 8004fc4:	d102      	bne.n	8004fcc <__sfputc_r+0x1c>
 8004fc6:	bc10      	pop	{r4}
 8004fc8:	f000 b99e 	b.w	8005308 <__swbuf_r>
 8004fcc:	6813      	ldr	r3, [r2, #0]
 8004fce:	1c58      	adds	r0, r3, #1
 8004fd0:	6010      	str	r0, [r2, #0]
 8004fd2:	7019      	strb	r1, [r3, #0]
 8004fd4:	4608      	mov	r0, r1
 8004fd6:	bc10      	pop	{r4}
 8004fd8:	4770      	bx	lr

08004fda <__sfputs_r>:
 8004fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fdc:	4606      	mov	r6, r0
 8004fde:	460f      	mov	r7, r1
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	18d5      	adds	r5, r2, r3
 8004fe4:	42ac      	cmp	r4, r5
 8004fe6:	d101      	bne.n	8004fec <__sfputs_r+0x12>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e007      	b.n	8004ffc <__sfputs_r+0x22>
 8004fec:	463a      	mov	r2, r7
 8004fee:	4630      	mov	r0, r6
 8004ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ff4:	f7ff ffdc 	bl	8004fb0 <__sfputc_r>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d1f3      	bne.n	8004fe4 <__sfputs_r+0xa>
 8004ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005000 <_vfiprintf_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	460d      	mov	r5, r1
 8005006:	4614      	mov	r4, r2
 8005008:	4698      	mov	r8, r3
 800500a:	4606      	mov	r6, r0
 800500c:	b09d      	sub	sp, #116	; 0x74
 800500e:	b118      	cbz	r0, 8005018 <_vfiprintf_r+0x18>
 8005010:	6983      	ldr	r3, [r0, #24]
 8005012:	b90b      	cbnz	r3, 8005018 <_vfiprintf_r+0x18>
 8005014:	f7ff fa2c 	bl	8004470 <__sinit>
 8005018:	4b89      	ldr	r3, [pc, #548]	; (8005240 <_vfiprintf_r+0x240>)
 800501a:	429d      	cmp	r5, r3
 800501c:	d11b      	bne.n	8005056 <_vfiprintf_r+0x56>
 800501e:	6875      	ldr	r5, [r6, #4]
 8005020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005022:	07d9      	lsls	r1, r3, #31
 8005024:	d405      	bmi.n	8005032 <_vfiprintf_r+0x32>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d402      	bmi.n	8005032 <_vfiprintf_r+0x32>
 800502c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800502e:	f7ff fac2 	bl	80045b6 <__retarget_lock_acquire_recursive>
 8005032:	89ab      	ldrh	r3, [r5, #12]
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	d501      	bpl.n	800503c <_vfiprintf_r+0x3c>
 8005038:	692b      	ldr	r3, [r5, #16]
 800503a:	b9eb      	cbnz	r3, 8005078 <_vfiprintf_r+0x78>
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f9c6 	bl	80053d0 <__swsetup_r>
 8005044:	b1c0      	cbz	r0, 8005078 <_vfiprintf_r+0x78>
 8005046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005048:	07dc      	lsls	r4, r3, #31
 800504a:	d50e      	bpl.n	800506a <_vfiprintf_r+0x6a>
 800504c:	f04f 30ff 	mov.w	r0, #4294967295
 8005050:	b01d      	add	sp, #116	; 0x74
 8005052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005056:	4b7b      	ldr	r3, [pc, #492]	; (8005244 <_vfiprintf_r+0x244>)
 8005058:	429d      	cmp	r5, r3
 800505a:	d101      	bne.n	8005060 <_vfiprintf_r+0x60>
 800505c:	68b5      	ldr	r5, [r6, #8]
 800505e:	e7df      	b.n	8005020 <_vfiprintf_r+0x20>
 8005060:	4b79      	ldr	r3, [pc, #484]	; (8005248 <_vfiprintf_r+0x248>)
 8005062:	429d      	cmp	r5, r3
 8005064:	bf08      	it	eq
 8005066:	68f5      	ldreq	r5, [r6, #12]
 8005068:	e7da      	b.n	8005020 <_vfiprintf_r+0x20>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	0598      	lsls	r0, r3, #22
 800506e:	d4ed      	bmi.n	800504c <_vfiprintf_r+0x4c>
 8005070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005072:	f7ff faa1 	bl	80045b8 <__retarget_lock_release_recursive>
 8005076:	e7e9      	b.n	800504c <_vfiprintf_r+0x4c>
 8005078:	2300      	movs	r3, #0
 800507a:	9309      	str	r3, [sp, #36]	; 0x24
 800507c:	2320      	movs	r3, #32
 800507e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005082:	2330      	movs	r3, #48	; 0x30
 8005084:	f04f 0901 	mov.w	r9, #1
 8005088:	f8cd 800c 	str.w	r8, [sp, #12]
 800508c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800524c <_vfiprintf_r+0x24c>
 8005090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005094:	4623      	mov	r3, r4
 8005096:	469a      	mov	sl, r3
 8005098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800509c:	b10a      	cbz	r2, 80050a2 <_vfiprintf_r+0xa2>
 800509e:	2a25      	cmp	r2, #37	; 0x25
 80050a0:	d1f9      	bne.n	8005096 <_vfiprintf_r+0x96>
 80050a2:	ebba 0b04 	subs.w	fp, sl, r4
 80050a6:	d00b      	beq.n	80050c0 <_vfiprintf_r+0xc0>
 80050a8:	465b      	mov	r3, fp
 80050aa:	4622      	mov	r2, r4
 80050ac:	4629      	mov	r1, r5
 80050ae:	4630      	mov	r0, r6
 80050b0:	f7ff ff93 	bl	8004fda <__sfputs_r>
 80050b4:	3001      	adds	r0, #1
 80050b6:	f000 80aa 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050bc:	445a      	add	r2, fp
 80050be:	9209      	str	r2, [sp, #36]	; 0x24
 80050c0:	f89a 3000 	ldrb.w	r3, [sl]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 80a2 	beq.w	800520e <_vfiprintf_r+0x20e>
 80050ca:	2300      	movs	r3, #0
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050d4:	f10a 0a01 	add.w	sl, sl, #1
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	9307      	str	r3, [sp, #28]
 80050dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e0:	931a      	str	r3, [sp, #104]	; 0x68
 80050e2:	4654      	mov	r4, sl
 80050e4:	2205      	movs	r2, #5
 80050e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ea:	4858      	ldr	r0, [pc, #352]	; (800524c <_vfiprintf_r+0x24c>)
 80050ec:	f7ff fad2 	bl	8004694 <memchr>
 80050f0:	9a04      	ldr	r2, [sp, #16]
 80050f2:	b9d8      	cbnz	r0, 800512c <_vfiprintf_r+0x12c>
 80050f4:	06d1      	lsls	r1, r2, #27
 80050f6:	bf44      	itt	mi
 80050f8:	2320      	movmi	r3, #32
 80050fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050fe:	0713      	lsls	r3, r2, #28
 8005100:	bf44      	itt	mi
 8005102:	232b      	movmi	r3, #43	; 0x2b
 8005104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005108:	f89a 3000 	ldrb.w	r3, [sl]
 800510c:	2b2a      	cmp	r3, #42	; 0x2a
 800510e:	d015      	beq.n	800513c <_vfiprintf_r+0x13c>
 8005110:	4654      	mov	r4, sl
 8005112:	2000      	movs	r0, #0
 8005114:	f04f 0c0a 	mov.w	ip, #10
 8005118:	9a07      	ldr	r2, [sp, #28]
 800511a:	4621      	mov	r1, r4
 800511c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005120:	3b30      	subs	r3, #48	; 0x30
 8005122:	2b09      	cmp	r3, #9
 8005124:	d94e      	bls.n	80051c4 <_vfiprintf_r+0x1c4>
 8005126:	b1b0      	cbz	r0, 8005156 <_vfiprintf_r+0x156>
 8005128:	9207      	str	r2, [sp, #28]
 800512a:	e014      	b.n	8005156 <_vfiprintf_r+0x156>
 800512c:	eba0 0308 	sub.w	r3, r0, r8
 8005130:	fa09 f303 	lsl.w	r3, r9, r3
 8005134:	4313      	orrs	r3, r2
 8005136:	46a2      	mov	sl, r4
 8005138:	9304      	str	r3, [sp, #16]
 800513a:	e7d2      	b.n	80050e2 <_vfiprintf_r+0xe2>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	1d19      	adds	r1, r3, #4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	bfbb      	ittet	lt
 8005148:	425b      	neglt	r3, r3
 800514a:	f042 0202 	orrlt.w	r2, r2, #2
 800514e:	9307      	strge	r3, [sp, #28]
 8005150:	9307      	strlt	r3, [sp, #28]
 8005152:	bfb8      	it	lt
 8005154:	9204      	strlt	r2, [sp, #16]
 8005156:	7823      	ldrb	r3, [r4, #0]
 8005158:	2b2e      	cmp	r3, #46	; 0x2e
 800515a:	d10c      	bne.n	8005176 <_vfiprintf_r+0x176>
 800515c:	7863      	ldrb	r3, [r4, #1]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d135      	bne.n	80051ce <_vfiprintf_r+0x1ce>
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	3402      	adds	r4, #2
 8005166:	1d1a      	adds	r2, r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	9203      	str	r2, [sp, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	bfb8      	it	lt
 8005170:	f04f 33ff 	movlt.w	r3, #4294967295
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005250 <_vfiprintf_r+0x250>
 800517a:	2203      	movs	r2, #3
 800517c:	4650      	mov	r0, sl
 800517e:	7821      	ldrb	r1, [r4, #0]
 8005180:	f7ff fa88 	bl	8004694 <memchr>
 8005184:	b140      	cbz	r0, 8005198 <_vfiprintf_r+0x198>
 8005186:	2340      	movs	r3, #64	; 0x40
 8005188:	eba0 000a 	sub.w	r0, r0, sl
 800518c:	fa03 f000 	lsl.w	r0, r3, r0
 8005190:	9b04      	ldr	r3, [sp, #16]
 8005192:	3401      	adds	r4, #1
 8005194:	4303      	orrs	r3, r0
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800519c:	2206      	movs	r2, #6
 800519e:	482d      	ldr	r0, [pc, #180]	; (8005254 <_vfiprintf_r+0x254>)
 80051a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051a4:	f7ff fa76 	bl	8004694 <memchr>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d03f      	beq.n	800522c <_vfiprintf_r+0x22c>
 80051ac:	4b2a      	ldr	r3, [pc, #168]	; (8005258 <_vfiprintf_r+0x258>)
 80051ae:	bb1b      	cbnz	r3, 80051f8 <_vfiprintf_r+0x1f8>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	3307      	adds	r3, #7
 80051b4:	f023 0307 	bic.w	r3, r3, #7
 80051b8:	3308      	adds	r3, #8
 80051ba:	9303      	str	r3, [sp, #12]
 80051bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051be:	443b      	add	r3, r7
 80051c0:	9309      	str	r3, [sp, #36]	; 0x24
 80051c2:	e767      	b.n	8005094 <_vfiprintf_r+0x94>
 80051c4:	460c      	mov	r4, r1
 80051c6:	2001      	movs	r0, #1
 80051c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80051cc:	e7a5      	b.n	800511a <_vfiprintf_r+0x11a>
 80051ce:	2300      	movs	r3, #0
 80051d0:	f04f 0c0a 	mov.w	ip, #10
 80051d4:	4619      	mov	r1, r3
 80051d6:	3401      	adds	r4, #1
 80051d8:	9305      	str	r3, [sp, #20]
 80051da:	4620      	mov	r0, r4
 80051dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051e0:	3a30      	subs	r2, #48	; 0x30
 80051e2:	2a09      	cmp	r2, #9
 80051e4:	d903      	bls.n	80051ee <_vfiprintf_r+0x1ee>
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0c5      	beq.n	8005176 <_vfiprintf_r+0x176>
 80051ea:	9105      	str	r1, [sp, #20]
 80051ec:	e7c3      	b.n	8005176 <_vfiprintf_r+0x176>
 80051ee:	4604      	mov	r4, r0
 80051f0:	2301      	movs	r3, #1
 80051f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051f6:	e7f0      	b.n	80051da <_vfiprintf_r+0x1da>
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4630      	mov	r0, r6
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <_vfiprintf_r+0x25c>)
 8005202:	a904      	add	r1, sp, #16
 8005204:	f7fd fd02 	bl	8002c0c <_printf_float>
 8005208:	4607      	mov	r7, r0
 800520a:	1c78      	adds	r0, r7, #1
 800520c:	d1d6      	bne.n	80051bc <_vfiprintf_r+0x1bc>
 800520e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	d405      	bmi.n	8005220 <_vfiprintf_r+0x220>
 8005214:	89ab      	ldrh	r3, [r5, #12]
 8005216:	059a      	lsls	r2, r3, #22
 8005218:	d402      	bmi.n	8005220 <_vfiprintf_r+0x220>
 800521a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800521c:	f7ff f9cc 	bl	80045b8 <__retarget_lock_release_recursive>
 8005220:	89ab      	ldrh	r3, [r5, #12]
 8005222:	065b      	lsls	r3, r3, #25
 8005224:	f53f af12 	bmi.w	800504c <_vfiprintf_r+0x4c>
 8005228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800522a:	e711      	b.n	8005050 <_vfiprintf_r+0x50>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4630      	mov	r0, r6
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <_vfiprintf_r+0x25c>)
 8005236:	a904      	add	r1, sp, #16
 8005238:	f7fd ff84 	bl	8003144 <_printf_i>
 800523c:	e7e4      	b.n	8005208 <_vfiprintf_r+0x208>
 800523e:	bf00      	nop
 8005240:	080058a8 	.word	0x080058a8
 8005244:	080058c8 	.word	0x080058c8
 8005248:	08005888 	.word	0x08005888
 800524c:	08005a44 	.word	0x08005a44
 8005250:	08005a4a 	.word	0x08005a4a
 8005254:	08005a4e 	.word	0x08005a4e
 8005258:	08002c0d 	.word	0x08002c0d
 800525c:	08004fdb 	.word	0x08004fdb

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	2300      	movs	r3, #0
 8005264:	4d05      	ldr	r5, [pc, #20]	; (800527c <_sbrk_r+0x1c>)
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fb fe10 	bl	8000e90 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000254 	.word	0x20000254

08005280 <__sread>:
 8005280:	b510      	push	{r4, lr}
 8005282:	460c      	mov	r4, r1
 8005284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005288:	f000 f9a2 	bl	80055d0 <_read_r>
 800528c:	2800      	cmp	r0, #0
 800528e:	bfab      	itete	ge
 8005290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005292:	89a3      	ldrhlt	r3, [r4, #12]
 8005294:	181b      	addge	r3, r3, r0
 8005296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800529a:	bfac      	ite	ge
 800529c:	6563      	strge	r3, [r4, #84]	; 0x54
 800529e:	81a3      	strhlt	r3, [r4, #12]
 80052a0:	bd10      	pop	{r4, pc}

080052a2 <__swrite>:
 80052a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a6:	461f      	mov	r7, r3
 80052a8:	898b      	ldrh	r3, [r1, #12]
 80052aa:	4605      	mov	r5, r0
 80052ac:	05db      	lsls	r3, r3, #23
 80052ae:	460c      	mov	r4, r1
 80052b0:	4616      	mov	r6, r2
 80052b2:	d505      	bpl.n	80052c0 <__swrite+0x1e>
 80052b4:	2302      	movs	r3, #2
 80052b6:	2200      	movs	r2, #0
 80052b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052bc:	f000 f958 	bl	8005570 <_lseek_r>
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	4632      	mov	r2, r6
 80052c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	4628      	mov	r0, r5
 80052cc:	463b      	mov	r3, r7
 80052ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052d6:	f000 b869 	b.w	80053ac <_write_r>

080052da <__sseek>:
 80052da:	b510      	push	{r4, lr}
 80052dc:	460c      	mov	r4, r1
 80052de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e2:	f000 f945 	bl	8005570 <_lseek_r>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	bf15      	itete	ne
 80052ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80052ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052f6:	81a3      	strheq	r3, [r4, #12]
 80052f8:	bf18      	it	ne
 80052fa:	81a3      	strhne	r3, [r4, #12]
 80052fc:	bd10      	pop	{r4, pc}

080052fe <__sclose>:
 80052fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005302:	f000 b8f1 	b.w	80054e8 <_close_r>
	...

08005308 <__swbuf_r>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	460e      	mov	r6, r1
 800530c:	4614      	mov	r4, r2
 800530e:	4605      	mov	r5, r0
 8005310:	b118      	cbz	r0, 800531a <__swbuf_r+0x12>
 8005312:	6983      	ldr	r3, [r0, #24]
 8005314:	b90b      	cbnz	r3, 800531a <__swbuf_r+0x12>
 8005316:	f7ff f8ab 	bl	8004470 <__sinit>
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <__swbuf_r+0x98>)
 800531c:	429c      	cmp	r4, r3
 800531e:	d12b      	bne.n	8005378 <__swbuf_r+0x70>
 8005320:	686c      	ldr	r4, [r5, #4]
 8005322:	69a3      	ldr	r3, [r4, #24]
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	89a3      	ldrh	r3, [r4, #12]
 8005328:	071a      	lsls	r2, r3, #28
 800532a:	d52f      	bpl.n	800538c <__swbuf_r+0x84>
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	b36b      	cbz	r3, 800538c <__swbuf_r+0x84>
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	6820      	ldr	r0, [r4, #0]
 8005334:	b2f6      	uxtb	r6, r6
 8005336:	1ac0      	subs	r0, r0, r3
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	4637      	mov	r7, r6
 800533c:	4283      	cmp	r3, r0
 800533e:	dc04      	bgt.n	800534a <__swbuf_r+0x42>
 8005340:	4621      	mov	r1, r4
 8005342:	4628      	mov	r0, r5
 8005344:	f7ff f800 	bl	8004348 <_fflush_r>
 8005348:	bb30      	cbnz	r0, 8005398 <__swbuf_r+0x90>
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	3001      	adds	r0, #1
 800534e:	3b01      	subs	r3, #1
 8005350:	60a3      	str	r3, [r4, #8]
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	6022      	str	r2, [r4, #0]
 8005358:	701e      	strb	r6, [r3, #0]
 800535a:	6963      	ldr	r3, [r4, #20]
 800535c:	4283      	cmp	r3, r0
 800535e:	d004      	beq.n	800536a <__swbuf_r+0x62>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	07db      	lsls	r3, r3, #31
 8005364:	d506      	bpl.n	8005374 <__swbuf_r+0x6c>
 8005366:	2e0a      	cmp	r6, #10
 8005368:	d104      	bne.n	8005374 <__swbuf_r+0x6c>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f7fe ffeb 	bl	8004348 <_fflush_r>
 8005372:	b988      	cbnz	r0, 8005398 <__swbuf_r+0x90>
 8005374:	4638      	mov	r0, r7
 8005376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <__swbuf_r+0x9c>)
 800537a:	429c      	cmp	r4, r3
 800537c:	d101      	bne.n	8005382 <__swbuf_r+0x7a>
 800537e:	68ac      	ldr	r4, [r5, #8]
 8005380:	e7cf      	b.n	8005322 <__swbuf_r+0x1a>
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <__swbuf_r+0xa0>)
 8005384:	429c      	cmp	r4, r3
 8005386:	bf08      	it	eq
 8005388:	68ec      	ldreq	r4, [r5, #12]
 800538a:	e7ca      	b.n	8005322 <__swbuf_r+0x1a>
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	f000 f81e 	bl	80053d0 <__swsetup_r>
 8005394:	2800      	cmp	r0, #0
 8005396:	d0cb      	beq.n	8005330 <__swbuf_r+0x28>
 8005398:	f04f 37ff 	mov.w	r7, #4294967295
 800539c:	e7ea      	b.n	8005374 <__swbuf_r+0x6c>
 800539e:	bf00      	nop
 80053a0:	080058a8 	.word	0x080058a8
 80053a4:	080058c8 	.word	0x080058c8
 80053a8:	08005888 	.word	0x08005888

080053ac <_write_r>:
 80053ac:	b538      	push	{r3, r4, r5, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	2200      	movs	r2, #0
 80053b6:	4d05      	ldr	r5, [pc, #20]	; (80053cc <_write_r+0x20>)
 80053b8:	602a      	str	r2, [r5, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7fb fde2 	bl	8000f84 <_write>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_write_r+0x1e>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_write_r+0x1e>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	20000254 	.word	0x20000254

080053d0 <__swsetup_r>:
 80053d0:	4b32      	ldr	r3, [pc, #200]	; (800549c <__swsetup_r+0xcc>)
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	b125      	cbz	r5, 80053e6 <__swsetup_r+0x16>
 80053dc:	69ab      	ldr	r3, [r5, #24]
 80053de:	b913      	cbnz	r3, 80053e6 <__swsetup_r+0x16>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f7ff f845 	bl	8004470 <__sinit>
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <__swsetup_r+0xd0>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d10f      	bne.n	800540c <__swsetup_r+0x3c>
 80053ec:	686c      	ldr	r4, [r5, #4]
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f4:	0719      	lsls	r1, r3, #28
 80053f6:	d42c      	bmi.n	8005452 <__swsetup_r+0x82>
 80053f8:	06dd      	lsls	r5, r3, #27
 80053fa:	d411      	bmi.n	8005420 <__swsetup_r+0x50>
 80053fc:	2309      	movs	r3, #9
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005404:	f04f 30ff 	mov.w	r0, #4294967295
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	e03e      	b.n	800548a <__swsetup_r+0xba>
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <__swsetup_r+0xd4>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d101      	bne.n	8005416 <__swsetup_r+0x46>
 8005412:	68ac      	ldr	r4, [r5, #8]
 8005414:	e7eb      	b.n	80053ee <__swsetup_r+0x1e>
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <__swsetup_r+0xd8>)
 8005418:	429c      	cmp	r4, r3
 800541a:	bf08      	it	eq
 800541c:	68ec      	ldreq	r4, [r5, #12]
 800541e:	e7e6      	b.n	80053ee <__swsetup_r+0x1e>
 8005420:	0758      	lsls	r0, r3, #29
 8005422:	d512      	bpl.n	800544a <__swsetup_r+0x7a>
 8005424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005426:	b141      	cbz	r1, 800543a <__swsetup_r+0x6a>
 8005428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <__swsetup_r+0x66>
 8005430:	4630      	mov	r0, r6
 8005432:	f7ff fce1 	bl	8004df8 <_free_r>
 8005436:	2300      	movs	r3, #0
 8005438:	6363      	str	r3, [r4, #52]	; 0x34
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0308 	orr.w	r3, r3, #8
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	b94b      	cbnz	r3, 800546a <__swsetup_r+0x9a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d003      	beq.n	800546a <__swsetup_r+0x9a>
 8005462:	4621      	mov	r1, r4
 8005464:	4630      	mov	r0, r6
 8005466:	f7ff f8cd 	bl	8004604 <__smakebuf_r>
 800546a:	89a0      	ldrh	r0, [r4, #12]
 800546c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005470:	f010 0301 	ands.w	r3, r0, #1
 8005474:	d00a      	beq.n	800548c <__swsetup_r+0xbc>
 8005476:	2300      	movs	r3, #0
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6963      	ldr	r3, [r4, #20]
 800547c:	425b      	negs	r3, r3
 800547e:	61a3      	str	r3, [r4, #24]
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	b943      	cbnz	r3, 8005496 <__swsetup_r+0xc6>
 8005484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005488:	d1ba      	bne.n	8005400 <__swsetup_r+0x30>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	0781      	lsls	r1, r0, #30
 800548e:	bf58      	it	pl
 8005490:	6963      	ldrpl	r3, [r4, #20]
 8005492:	60a3      	str	r3, [r4, #8]
 8005494:	e7f4      	b.n	8005480 <__swsetup_r+0xb0>
 8005496:	2000      	movs	r0, #0
 8005498:	e7f7      	b.n	800548a <__swsetup_r+0xba>
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c
 80054a0:	080058a8 	.word	0x080058a8
 80054a4:	080058c8 	.word	0x080058c8
 80054a8:	08005888 	.word	0x08005888

080054ac <__assert_func>:
 80054ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054ae:	4614      	mov	r4, r2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <__assert_func+0x2c>)
 80054b4:	4605      	mov	r5, r0
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68d8      	ldr	r0, [r3, #12]
 80054ba:	b14c      	cbz	r4, 80054d0 <__assert_func+0x24>
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <__assert_func+0x30>)
 80054be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054c2:	9100      	str	r1, [sp, #0]
 80054c4:	462b      	mov	r3, r5
 80054c6:	4906      	ldr	r1, [pc, #24]	; (80054e0 <__assert_func+0x34>)
 80054c8:	f000 f81e 	bl	8005508 <fiprintf>
 80054cc:	f000 f89f 	bl	800560e <abort>
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <__assert_func+0x38>)
 80054d2:	461c      	mov	r4, r3
 80054d4:	e7f3      	b.n	80054be <__assert_func+0x12>
 80054d6:	bf00      	nop
 80054d8:	2000000c 	.word	0x2000000c
 80054dc:	08005a55 	.word	0x08005a55
 80054e0:	08005a62 	.word	0x08005a62
 80054e4:	08005a90 	.word	0x08005a90

080054e8 <_close_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	2300      	movs	r3, #0
 80054ec:	4d05      	ldr	r5, [pc, #20]	; (8005504 <_close_r+0x1c>)
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fb fc9b 	bl	8000e2e <_close>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_close_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_close_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	20000254 	.word	0x20000254

08005508 <fiprintf>:
 8005508:	b40e      	push	{r1, r2, r3}
 800550a:	b503      	push	{r0, r1, lr}
 800550c:	4601      	mov	r1, r0
 800550e:	ab03      	add	r3, sp, #12
 8005510:	4805      	ldr	r0, [pc, #20]	; (8005528 <fiprintf+0x20>)
 8005512:	f853 2b04 	ldr.w	r2, [r3], #4
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	f7ff fd71 	bl	8005000 <_vfiprintf_r>
 800551e:	b002      	add	sp, #8
 8005520:	f85d eb04 	ldr.w	lr, [sp], #4
 8005524:	b003      	add	sp, #12
 8005526:	4770      	bx	lr
 8005528:	2000000c 	.word	0x2000000c

0800552c <_fstat_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	2300      	movs	r3, #0
 8005530:	4d06      	ldr	r5, [pc, #24]	; (800554c <_fstat_r+0x20>)
 8005532:	4604      	mov	r4, r0
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	602b      	str	r3, [r5, #0]
 800553a:	f7fb fc83 	bl	8000e44 <_fstat>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	d102      	bne.n	8005548 <_fstat_r+0x1c>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	b103      	cbz	r3, 8005548 <_fstat_r+0x1c>
 8005546:	6023      	str	r3, [r4, #0]
 8005548:	bd38      	pop	{r3, r4, r5, pc}
 800554a:	bf00      	nop
 800554c:	20000254 	.word	0x20000254

08005550 <_isatty_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	; (800556c <_isatty_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fb fc81 	bl	8000e62 <_isatty>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_isatty_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_isatty_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	20000254 	.word	0x20000254

08005570 <_lseek_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	2200      	movs	r2, #0
 800557a:	4d05      	ldr	r5, [pc, #20]	; (8005590 <_lseek_r+0x20>)
 800557c:	602a      	str	r2, [r5, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	f7fb fc79 	bl	8000e76 <_lseek>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_lseek_r+0x1e>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_lseek_r+0x1e>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	20000254 	.word	0x20000254

08005594 <__ascii_mbtowc>:
 8005594:	b082      	sub	sp, #8
 8005596:	b901      	cbnz	r1, 800559a <__ascii_mbtowc+0x6>
 8005598:	a901      	add	r1, sp, #4
 800559a:	b142      	cbz	r2, 80055ae <__ascii_mbtowc+0x1a>
 800559c:	b14b      	cbz	r3, 80055b2 <__ascii_mbtowc+0x1e>
 800559e:	7813      	ldrb	r3, [r2, #0]
 80055a0:	600b      	str	r3, [r1, #0]
 80055a2:	7812      	ldrb	r2, [r2, #0]
 80055a4:	1e10      	subs	r0, r2, #0
 80055a6:	bf18      	it	ne
 80055a8:	2001      	movne	r0, #1
 80055aa:	b002      	add	sp, #8
 80055ac:	4770      	bx	lr
 80055ae:	4610      	mov	r0, r2
 80055b0:	e7fb      	b.n	80055aa <__ascii_mbtowc+0x16>
 80055b2:	f06f 0001 	mvn.w	r0, #1
 80055b6:	e7f8      	b.n	80055aa <__ascii_mbtowc+0x16>

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_lock+0x8>)
 80055ba:	f7fe bffc 	b.w	80045b6 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000248 	.word	0x20000248

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__malloc_unlock+0x8>)
 80055c6:	f7fe bff7 	b.w	80045b8 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000248 	.word	0x20000248

080055d0 <_read_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	2200      	movs	r2, #0
 80055da:	4d05      	ldr	r5, [pc, #20]	; (80055f0 <_read_r+0x20>)
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fb fcee 	bl	8000fc0 <_read>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_read_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_read_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20000254 	.word	0x20000254

080055f4 <__ascii_wctomb>:
 80055f4:	4603      	mov	r3, r0
 80055f6:	4608      	mov	r0, r1
 80055f8:	b141      	cbz	r1, 800560c <__ascii_wctomb+0x18>
 80055fa:	2aff      	cmp	r2, #255	; 0xff
 80055fc:	d904      	bls.n	8005608 <__ascii_wctomb+0x14>
 80055fe:	228a      	movs	r2, #138	; 0x8a
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	4770      	bx	lr
 8005608:	2001      	movs	r0, #1
 800560a:	700a      	strb	r2, [r1, #0]
 800560c:	4770      	bx	lr

0800560e <abort>:
 800560e:	2006      	movs	r0, #6
 8005610:	b508      	push	{r3, lr}
 8005612:	f000 f82b 	bl	800566c <raise>
 8005616:	2001      	movs	r0, #1
 8005618:	f7fb fbff 	bl	8000e1a <_exit>

0800561c <_raise_r>:
 800561c:	291f      	cmp	r1, #31
 800561e:	b538      	push	{r3, r4, r5, lr}
 8005620:	4604      	mov	r4, r0
 8005622:	460d      	mov	r5, r1
 8005624:	d904      	bls.n	8005630 <_raise_r+0x14>
 8005626:	2316      	movs	r3, #22
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005632:	b112      	cbz	r2, 800563a <_raise_r+0x1e>
 8005634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005638:	b94b      	cbnz	r3, 800564e <_raise_r+0x32>
 800563a:	4620      	mov	r0, r4
 800563c:	f000 f830 	bl	80056a0 <_getpid_r>
 8005640:	462a      	mov	r2, r5
 8005642:	4601      	mov	r1, r0
 8005644:	4620      	mov	r0, r4
 8005646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800564a:	f000 b817 	b.w	800567c <_kill_r>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d00a      	beq.n	8005668 <_raise_r+0x4c>
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	d103      	bne.n	800565e <_raise_r+0x42>
 8005656:	2316      	movs	r3, #22
 8005658:	6003      	str	r3, [r0, #0]
 800565a:	2001      	movs	r0, #1
 800565c:	e7e7      	b.n	800562e <_raise_r+0x12>
 800565e:	2400      	movs	r4, #0
 8005660:	4628      	mov	r0, r5
 8005662:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005666:	4798      	blx	r3
 8005668:	2000      	movs	r0, #0
 800566a:	e7e0      	b.n	800562e <_raise_r+0x12>

0800566c <raise>:
 800566c:	4b02      	ldr	r3, [pc, #8]	; (8005678 <raise+0xc>)
 800566e:	4601      	mov	r1, r0
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f7ff bfd3 	b.w	800561c <_raise_r>
 8005676:	bf00      	nop
 8005678:	2000000c 	.word	0x2000000c

0800567c <_kill_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	2300      	movs	r3, #0
 8005680:	4d06      	ldr	r5, [pc, #24]	; (800569c <_kill_r+0x20>)
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	f7fb fbb6 	bl	8000dfa <_kill>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d102      	bne.n	8005698 <_kill_r+0x1c>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	b103      	cbz	r3, 8005698 <_kill_r+0x1c>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	bd38      	pop	{r3, r4, r5, pc}
 800569a:	bf00      	nop
 800569c:	20000254 	.word	0x20000254

080056a0 <_getpid_r>:
 80056a0:	f7fb bba4 	b.w	8000dec <_getpid>

080056a4 <_init>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr

080056b0 <_fini>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	bf00      	nop
 80056b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056b6:	bc08      	pop	{r3}
 80056b8:	469e      	mov	lr, r3
 80056ba:	4770      	bx	lr
