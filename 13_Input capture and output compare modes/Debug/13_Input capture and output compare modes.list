
13_Input capture and output compare modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004448  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800464c  0800464c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800464c  0800464c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800464c  0800464c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000074  080046c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080046c8  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3fe  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9d  00000000  00000000  0002b49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186a7  00000000  00000000  0002e950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c758  00000000  00000000  00046ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba75  00000000  00000000  0005374f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df1c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000df214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800453c 	.word	0x0800453c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800453c 	.word	0x0800453c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd55 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f865 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9db 	bl	8000514 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f8a7 	bl	80002b0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000162:	f000 f9ad 	bl	80004c0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000166:	f000 f913 	bl	8000390 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t Ticks = 0;
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
  uint32_t Frequency = 0;
 800016e:	2300      	movs	r3, #0
 8000170:	603b      	str	r3, [r7, #0]

  RetargetInit(&huart1);
 8000172:	4822      	ldr	r0, [pc, #136]	; (80001fc <main+0xb0>)
 8000174:	f000 fcf0 	bl	8000b58 <RetargetInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000178:	4821      	ldr	r0, [pc, #132]	; (8000200 <main+0xb4>)
 800017a:	f001 fc9f 	bl	8001abc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800017e:	2100      	movs	r1, #0
 8000180:	481f      	ldr	r0, [pc, #124]	; (8000200 <main+0xb4>)
 8000182:	f001 fe85 	bl	8001e90 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000186:	481f      	ldr	r0, [pc, #124]	; (8000204 <main+0xb8>)
 8000188:	f001 fc98 	bl	8001abc <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800018c:	2100      	movs	r1, #0
 800018e:	481d      	ldr	r0, [pc, #116]	; (8000204 <main+0xb8>)
 8000190:	f001 fd3e 	bl	8001c10 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000194:	2104      	movs	r1, #4
 8000196:	481b      	ldr	r0, [pc, #108]	; (8000204 <main+0xb8>)
 8000198:	f001 fd3a 	bl	8001c10 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_3);
 800019c:	2108      	movs	r1, #8
 800019e:	4819      	ldr	r0, [pc, #100]	; (8000204 <main+0xb8>)
 80001a0:	f001 fd36 	bl	8001c10 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_4);
 80001a4:	210c      	movs	r1, #12
 80001a6:	4817      	ldr	r0, [pc, #92]	; (8000204 <main+0xb8>)
 80001a8:	f001 fd32 	bl	8001c10 <HAL_TIM_OC_Start_IT>

  printf("begin! \r\n");
 80001ac:	4816      	ldr	r0, [pc, #88]	; (8000208 <main+0xbc>)
 80001ae:	f003 f973 	bl	8003498 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	// compute and print the input signal's frquency, whenever 2 captures occur
	  	if(captureState == SecondCapture)
 80001b2:	4b16      	ldr	r3, [pc, #88]	; (800020c <main+0xc0>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	d1fa      	bne.n	80001b2 <main+0x66>
	    {
	        Ticks = (T2 + (TIM2_overFlowCnt * 65536)) - T1;
 80001bc:	4b14      	ldr	r3, [pc, #80]	; (8000210 <main+0xc4>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	041b      	lsls	r3, r3, #16
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b13      	ldr	r3, [pc, #76]	; (8000214 <main+0xc8>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	441a      	add	r2, r3
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <main+0xcc>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	1ad3      	subs	r3, r2, r3
 80001d2:	607b      	str	r3, [r7, #4]
	        Frequency = (uint32_t)(F_CLK/Ticks);
 80001d4:	4a11      	ldr	r2, [pc, #68]	; (800021c <main+0xd0>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80001dc:	603b      	str	r3, [r7, #0]
	        if(Frequency)
 80001de:	683b      	ldr	r3, [r7, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d007      	beq.n	80001f4 <main+0xa8>
	        {
	        	printf("Frequency = %lu Hz Overflow count = %u\n\r", Frequency,TIM2_overFlowCnt);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <main+0xc4>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	461a      	mov	r2, r3
 80001ec:	6839      	ldr	r1, [r7, #0]
 80001ee:	480c      	ldr	r0, [pc, #48]	; (8000220 <main+0xd4>)
 80001f0:	f003 f8cc 	bl	800338c <iprintf>
	        }
	        captureState = AwaitingCapture;
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <main+0xc0>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	701a      	strb	r2, [r3, #0]
	  	if(captureState == SecondCapture)
 80001fa:	e7da      	b.n	80001b2 <main+0x66>
 80001fc:	20000120 	.word	0x20000120
 8000200:	20000090 	.word	0x20000090
 8000204:	200000d8 	.word	0x200000d8
 8000208:	08004554 	.word	0x08004554
 800020c:	20000164 	.word	0x20000164
 8000210:	20000166 	.word	0x20000166
 8000214:	2000016c 	.word	0x2000016c
 8000218:	20000168 	.word	0x20000168
 800021c:	044aa200 	.word	0x044aa200
 8000220:	08004560 	.word	0x08004560

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 f8a2 	bl	800337c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f000 ffbb 	bl	80011e8 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 fa70 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fa28 	bl	80016ec <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 fa5b 	bl	800075c <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08a      	sub	sp, #40	; 0x28
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80002ce:	463b      	mov	r3, r7
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002da:	4b2c      	ldr	r3, [pc, #176]	; (800038c <MX_TIM2_Init+0xdc>)
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e2:	4b2a      	ldr	r3, [pc, #168]	; (800038c <MX_TIM2_Init+0xdc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <MX_TIM2_Init+0xdc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002ee:	4b27      	ldr	r3, [pc, #156]	; (800038c <MX_TIM2_Init+0xdc>)
 80002f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <MX_TIM2_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <MX_TIM2_Init+0xdc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000302:	4822      	ldr	r0, [pc, #136]	; (800038c <MX_TIM2_Init+0xdc>)
 8000304:	f001 fb8a 	bl	8001a1c <HAL_TIM_Base_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800030e:	f000 fa25 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000316:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4619      	mov	r1, r3
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <MX_TIM2_Init+0xdc>)
 8000320:	f002 f8b0 	bl	8002484 <HAL_TIM_ConfigClockSource>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800032a:	f000 fa17 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800032e:	4817      	ldr	r0, [pc, #92]	; (800038c <MX_TIM2_Init+0xdc>)
 8000330:	f001 fd56 	bl	8001de0 <HAL_TIM_IC_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800033a:	f000 fa0f 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800033e:	2300      	movs	r3, #0
 8000340:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000342:	2300      	movs	r3, #0
 8000344:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480f      	ldr	r0, [pc, #60]	; (800038c <MX_TIM2_Init+0xdc>)
 800034e:	f002 fd21 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000358:	f000 fa00 	bl	800075c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800035c:	2300      	movs	r3, #0
 800035e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000360:	2301      	movs	r3, #1
 8000362:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	4619      	mov	r1, r3
 8000372:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_TIM2_Init+0xdc>)
 8000374:	f001 fff2 	bl	800235c <HAL_TIM_IC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800037e:	f000 f9ed 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	3728      	adds	r7, #40	; 0x28
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000090 	.word	0x20000090

08000390 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a4:	f107 0320 	add.w	r3, r7, #32
 80003a8:	2200      	movs	r2, #0
 80003aa:	601a      	str	r2, [r3, #0]
 80003ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	605a      	str	r2, [r3, #4]
 80003b6:	609a      	str	r2, [r3, #8]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	611a      	str	r2, [r3, #16]
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003c0:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003c2:	4a3e      	ldr	r2, [pc, #248]	; (80004bc <MX_TIM3_Init+0x12c>)
 80003c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 143;
 80003c6:	4b3c      	ldr	r3, [pc, #240]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003c8:	228f      	movs	r2, #143	; 0x8f
 80003ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003d2:	4b39      	ldr	r3, [pc, #228]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	4b37      	ldr	r3, [pc, #220]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003e6:	4834      	ldr	r0, [pc, #208]	; (80004b8 <MX_TIM3_Init+0x128>)
 80003e8:	f001 fb18 	bl	8001a1c <HAL_TIM_Base_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80003f2:	f000 f9b3 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000400:	4619      	mov	r1, r3
 8000402:	482d      	ldr	r0, [pc, #180]	; (80004b8 <MX_TIM3_Init+0x128>)
 8000404:	f002 f83e 	bl	8002484 <HAL_TIM_ConfigClockSource>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800040e:	f000 f9a5 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000412:	4829      	ldr	r0, [pc, #164]	; (80004b8 <MX_TIM3_Init+0x128>)
 8000414:	f001 fba4 	bl	8001b60 <HAL_TIM_OC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800041e:	f000 f99d 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000422:	2300      	movs	r3, #0
 8000424:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800042a:	f107 0320 	add.w	r3, r7, #32
 800042e:	4619      	mov	r1, r3
 8000430:	4821      	ldr	r0, [pc, #132]	; (80004b8 <MX_TIM3_Init+0x128>)
 8000432:	f002 fcaf 	bl	8002d94 <HAL_TIMEx_MasterConfigSynchronization>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800043c:	f000 f98e 	bl	800075c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000440:	2330      	movs	r3, #48	; 0x30
 8000442:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <MX_TIM3_Init+0x128>)
 8000458:	f001 ff28 	bl	80022ac <HAL_TIM_OC_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000462:	f000 f97b 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	2204      	movs	r2, #4
 800046a:	4619      	mov	r1, r3
 800046c:	4812      	ldr	r0, [pc, #72]	; (80004b8 <MX_TIM3_Init+0x128>)
 800046e:	f001 ff1d 	bl	80022ac <HAL_TIM_OC_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000478:	f000 f970 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2208      	movs	r2, #8
 8000480:	4619      	mov	r1, r3
 8000482:	480d      	ldr	r0, [pc, #52]	; (80004b8 <MX_TIM3_Init+0x128>)
 8000484:	f001 ff12 	bl	80022ac <HAL_TIM_OC_ConfigChannel>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800048e:	f000 f965 	bl	800075c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	220c      	movs	r2, #12
 8000496:	4619      	mov	r1, r3
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <MX_TIM3_Init+0x128>)
 800049a:	f001 ff07 	bl	80022ac <HAL_TIM_OC_ConfigChannel>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80004a4:	f000 f95a 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <MX_TIM3_Init+0x128>)
 80004aa:	f000 f9ef 	bl	800088c <HAL_TIM_MspPostInit>

}
 80004ae:	bf00      	nop
 80004b0:	3738      	adds	r7, #56	; 0x38
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200000d8 	.word	0x200000d8
 80004bc:	40000400 	.word	0x40000400

080004c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <MX_USART1_UART_Init+0x50>)
 80004c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ca:	4b10      	ldr	r3, [pc, #64]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004e6:	220c      	movs	r2, #12
 80004e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_USART1_UART_Init+0x4c>)
 80004f8:	f002 fcbc 	bl	8002e74 <HAL_UART_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000502:	f000 f92b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000120 	.word	0x20000120
 8000510:	40013800 	.word	0x40013800

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_GPIO_Init+0x58>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <MX_GPIO_Init+0x58>)
 8000520:	f043 0320 	orr.w	r3, r3, #32
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_GPIO_Init+0x58>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0320 	and.w	r3, r3, #32
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_GPIO_Init+0x58>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <MX_GPIO_Init+0x58>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <MX_GPIO_Init+0x58>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <MX_GPIO_Init+0x58>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a07      	ldr	r2, [pc, #28]	; (800056c <MX_GPIO_Init+0x58>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b05      	ldr	r3, [pc, #20]	; (800056c <MX_GPIO_Init+0x58>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
/*********************  TIM2 (Input Capture)  ********************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
    if(captureState == AwaitingCapture)
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x58>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d10b      	bne.n	800059a <HAL_TIM_IC_CaptureCallback+0x2a>
    {
    	TIM2_overFlowCnt = 0;
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000584:	2200      	movs	r2, #0
 8000586:	801a      	strh	r2, [r3, #0]
	    T1 = TIM2->CCR1;
 8000588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000590:	6013      	str	r3, [r2, #0]
        captureState = FirstCapture;
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
    {
    	T2 = TIM2->CCR1;
        captureState = SecondCapture;
        __HAL_TIM_SetCounter(&htim2, 0);
    }
}
 8000598:	e010      	b.n	80005bc <HAL_TIM_IC_CaptureCallback+0x4c>
    else if(captureState == FirstCapture)
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x58>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d10b      	bne.n	80005bc <HAL_TIM_IC_CaptureCallback+0x4c>
    	T2 = TIM2->CCR1;
 80005a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <HAL_TIM_IC_CaptureCallback+0x64>)
 80005ac:	6013      	str	r3, [r2, #0]
        captureState = SecondCapture;
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_TIM_IC_CaptureCallback+0x58>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
        __HAL_TIM_SetCounter(&htim2, 0);
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <HAL_TIM_IC_CaptureCallback+0x68>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000164 	.word	0x20000164
 80005cc:	20000166 	.word	0x20000166
 80005d0:	20000168 	.word	0x20000168
 80005d4:	2000016c 	.word	0x2000016c
 80005d8:	20000090 	.word	0x20000090

080005dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	TIM2_overFlowCnt++;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	3301      	adds	r3, #1
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b03      	ldr	r3, [pc, #12]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005f0:	801a      	strh	r2, [r3, #0]
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	20000166 	.word	0x20000166

08000600 <HAL_TIM_OC_DelayElapsedCallback>:

/********************  TIM3 (Output Compare)  ********************/
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	static uint8_t i1 = 1, i2 = 1, i3 = 1, i4 = 1;

	if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) != RESET)
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	2b02      	cmp	r3, #2
 8000614:	d11d      	bne.n	8000652 <HAL_TIM_OC_DelayElapsedCallback+0x52>
	{
		TIM3->CCR1 = ((i1*((__HAL_TIM_GetAutoreload(&htim3) - 2) / 5)) + 2);
 8000616:	4b4a      	ldr	r3, [pc, #296]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	4b47      	ldr	r3, [pc, #284]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	3b02      	subs	r3, #2
 8000624:	4a47      	ldr	r2, [pc, #284]	; (8000744 <HAL_TIM_OC_DelayElapsedCallback+0x144>)
 8000626:	fba2 2303 	umull	r2, r3, r2, r3
 800062a:	089b      	lsrs	r3, r3, #2
 800062c:	fb01 f303 	mul.w	r3, r1, r3
 8000630:	4a45      	ldr	r2, [pc, #276]	; (8000748 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000632:	3302      	adds	r3, #2
 8000634:	6353      	str	r3, [r2, #52]	; 0x34

		if(i1 == 5)
 8000636:	4b42      	ldr	r3, [pc, #264]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d103      	bne.n	8000646 <HAL_TIM_OC_DelayElapsedCallback+0x46>
			i1 = 0;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	e005      	b.n	8000652 <HAL_TIM_OC_DelayElapsedCallback+0x52>
		else
			i1++;
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8000650:	701a      	strb	r2, [r3, #0]
	}
	if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC2) != RESET)
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	2b04      	cmp	r3, #4
 800065e:	d11d      	bne.n	800069c <HAL_TIM_OC_DelayElapsedCallback+0x9c>
	{
		TIM3->CCR2 = ((i2*((__HAL_TIM_GetAutoreload(&htim3) - 2) / 25)) + 2);
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4b35      	ldr	r3, [pc, #212]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066c:	3b02      	subs	r3, #2
 800066e:	4a38      	ldr	r2, [pc, #224]	; (8000750 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000670:	fba2 2303 	umull	r2, r3, r2, r3
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4a33      	ldr	r2, [pc, #204]	; (8000748 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 800067c:	3302      	adds	r3, #2
 800067e:	6393      	str	r3, [r2, #56]	; 0x38

		if(i2 == 25)
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b19      	cmp	r3, #25
 8000686:	d103      	bne.n	8000690 <HAL_TIM_OC_DelayElapsedCallback+0x90>
			i2 = 0;
 8000688:	4b30      	ldr	r3, [pc, #192]	; (800074c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e005      	b.n	800069c <HAL_TIM_OC_DelayElapsedCallback+0x9c>
		else
			i2++;
 8000690:	4b2e      	ldr	r3, [pc, #184]	; (800074c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <HAL_TIM_OC_DelayElapsedCallback+0x14c>)
 800069a:	701a      	strb	r2, [r3, #0]
	}
	if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC3) != RESET)
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	f003 0308 	and.w	r3, r3, #8
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d11d      	bne.n	80006e6 <HAL_TIM_OC_DelayElapsedCallback+0xe6>
	{
		TIM3->CCR3 = ((i3*((__HAL_TIM_GetAutoreload(&htim3) - 2) / 50)) + 2);
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b6:	3b02      	subs	r3, #2
 80006b8:	4a25      	ldr	r2, [pc, #148]	; (8000750 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 80006ba:	fba2 2303 	umull	r2, r3, r2, r3
 80006be:	091b      	lsrs	r3, r3, #4
 80006c0:	fb01 f303 	mul.w	r3, r1, r3
 80006c4:	4a20      	ldr	r2, [pc, #128]	; (8000748 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 80006c6:	3302      	adds	r3, #2
 80006c8:	63d3      	str	r3, [r2, #60]	; 0x3c

		if(i3 == 50)
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b32      	cmp	r3, #50	; 0x32
 80006d0:	d103      	bne.n	80006da <HAL_TIM_OC_DelayElapsedCallback+0xda>
			i3 = 0;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e005      	b.n	80006e6 <HAL_TIM_OC_DelayElapsedCallback+0xe6>
		else
			i3++;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_TIM_OC_DelayElapsedCallback+0x154>)
 80006e4:	701a      	strb	r2, [r3, #0]
	}
	if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC4) != RESET)
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	f003 0310 	and.w	r3, r3, #16
 80006f0:	2b10      	cmp	r3, #16
 80006f2:	d11d      	bne.n	8000730 <HAL_TIM_OC_DelayElapsedCallback+0x130>
	{
		TIM3->CCR4 = ((i4*((__HAL_TIM_GetAutoreload(&htim3) - 2) / 100)) + 2);
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000700:	3b02      	subs	r3, #2
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <HAL_TIM_OC_DelayElapsedCallback+0x150>)
 8000704:	fba2 2303 	umull	r2, r3, r2, r3
 8000708:	095b      	lsrs	r3, r3, #5
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_TIM_OC_DelayElapsedCallback+0x148>)
 8000710:	3302      	adds	r3, #2
 8000712:	6413      	str	r3, [r2, #64]	; 0x40

		if(i4 == 100)
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b64      	cmp	r3, #100	; 0x64
 800071a:	d103      	bne.n	8000724 <HAL_TIM_OC_DelayElapsedCallback+0x124>
			i4 = 0;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
		else
			i4++;
	}
}
 8000722:	e005      	b.n	8000730 <HAL_TIM_OC_DelayElapsedCallback+0x130>
			i4++;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3301      	adds	r3, #1
 800072a:	b2da      	uxtb	r2, r3
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_TIM_OC_DelayElapsedCallback+0x158>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200000d8 	.word	0x200000d8
 8000740:	20000000 	.word	0x20000000
 8000744:	cccccccd 	.word	0xcccccccd
 8000748:	40000400 	.word	0x40000400
 800074c:	20000001 	.word	0x20000001
 8000750:	51eb851f 	.word	0x51eb851f
 8000754:	20000002 	.word	0x20000002
 8000758:	20000003 	.word	0x20000003

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007ea:	d12c      	bne.n	8000846 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	4a23      	ldr	r2, [pc, #140]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 80007f2:	f043 0301 	orr.w	r3, r3, #1
 80007f6:	61d3      	str	r3, [r2, #28]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 80007fa:	69db      	ldr	r3, [r3, #28]
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 800080a:	f043 0304 	orr.w	r3, r3, #4
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0304 	and.w	r3, r3, #4
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4619      	mov	r1, r3
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <HAL_TIM_Base_MspInit+0xb8>)
 8000830:	f000 fb56 	bl	8000ee0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	201c      	movs	r0, #28
 800083a:	f000 fb1a 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800083e:	201c      	movs	r0, #28
 8000840:	f000 fb33 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000844:	e018      	b.n	8000878 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_TIM_Base_MspInit+0xbc>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d113      	bne.n	8000878 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 8000852:	69db      	ldr	r3, [r3, #28]
 8000854:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	61d3      	str	r3, [r2, #28]
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0xb4>)
 800085e:	69db      	ldr	r3, [r3, #28]
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	201d      	movs	r0, #29
 800086e:	f000 fb00 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000872:	201d      	movs	r0, #29
 8000874:	f000 fb19 	bl	8000eaa <HAL_NVIC_EnableIRQ>
}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800
 8000888:	40000400 	.word	0x40000400

0800088c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <HAL_TIM_MspPostInit+0x88>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d12f      	bne.n	800090c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_TIM_MspPostInit+0x8c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008dc:	23c0      	movs	r3, #192	; 0xc0
 80008de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <HAL_TIM_MspPostInit+0x90>)
 80008f0:	f000 faf6 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008f4:	2303      	movs	r3, #3
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_TIM_MspPostInit+0x94>)
 8000908:	f000 faea 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40000400 	.word	0x40000400
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	40010c00 	.word	0x40010c00

08000924 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_UART_MspInit+0x8c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d131      	bne.n	80009a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_UART_MspInit+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <HAL_UART_MspInit+0x90>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x90>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_UART_MspInit+0x90>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0x90>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_UART_MspInit+0x90>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <HAL_UART_MspInit+0x94>)
 800098a:	f000 faa9 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_UART_MspInit+0x94>)
 80009a4:	f000 fa9c 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bc80      	pop	{r7}
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a02:	f000 f943 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <TIM2_IRQHandler+0x10>)
 8000a12:	f001 fb43 	bl	800209c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000090 	.word	0x20000090

08000a20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM3_IRQHandler+0x10>)
 8000a26:	f001 fb39 	bl	800209c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000d8 	.word	0x200000d8

08000a34 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <_isatty>:

int _isatty(int file)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	return 1;
 8000a70:	2301      	movs	r3, #1
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac4:	f002 fc30 	bl	8003328 <__errno>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	220c      	movs	r2, #12
 8000acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad2:	e009      	b.n	8000ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	4a05      	ldr	r2, [pc, #20]	; (8000af8 <_sbrk+0x64>)
 8000ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20005000 	.word	0x20005000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	20000170 	.word	0x20000170
 8000afc:	20000190 	.word	0x20000190

08000b00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b32:	f7ff ffe5 	bl	8000b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fbfd 	bl	8003334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fb07 	bl	800014c <main>
  bx lr
 8000b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b48:	08004654 	.word	0x08004654
  ldr r2, =_sbss
 8000b4c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b50:	2000018c 	.word	0x2000018c

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>
	...

08000b58 <RetargetInit>:


UART_HandleTypeDef *gHuart;

//Initialization function sets the uart handler
void RetargetInit(UART_HandleTypeDef *huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <RetargetInit+0x28>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <RetargetInit+0x2c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6898      	ldr	r0, [r3, #8]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2202      	movs	r2, #2
 8000b70:	2100      	movs	r1, #0
 8000b72:	f002 fc99 	bl	80034a8 <setvbuf>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000174 	.word	0x20000174
 8000b84:	20000010 	.word	0x20000010

08000b88 <_write>:

//Definition of the underlying function for std out
int _write(int fd, char* ptr, int len) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <_write+0x38>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	f002 f9b4 	bl	8002f0e <HAL_UART_Transmit>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <_write+0x2c>
    	return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	e001      	b.n	8000bb8 <_write+0x30>
    else
    	return -1;
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000174 	.word	0x20000174

08000bc4 <_read>:

//Definition of the underlying function for std in
int _read(int fd, char* ptr, int len) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <_read+0x38>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	2201      	movs	r2, #1
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	f002 fa29 	bl	8003032 <HAL_UART_Receive>
 8000be0:	4603      	mov	r3, r0
 8000be2:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <_read+0x2a>
    	return 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e001      	b.n	8000bf2 <_read+0x2e>
    else
    	return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000174 	.word	0x20000174

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x28>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x28>)
 8000c0a:	f043 0310 	orr.w	r3, r3, #16
 8000c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f923 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff fda4 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40022000 	.word	0x40022000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f93b 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f903 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000004 	.word	0x20000004
 8000c84:	2000000c 	.word	0x2000000c
 8000c88:	20000008 	.word	0x20000008

08000c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_IncTick+0x1c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <HAL_IncTick+0x20>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a03      	ldr	r2, [pc, #12]	; (8000cac <HAL_IncTick+0x20>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000178 	.word	0x20000178

08000cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b02      	ldr	r3, [pc, #8]	; (8000cc0 <HAL_GetTick+0x10>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	20000178 	.word	0x20000178

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <__NVIC_EnableIRQ+0x34>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff90 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff2d 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff42 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff35 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e169      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8158 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a9a      	ldr	r2, [pc, #616]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a98      	ldr	r2, [pc, #608]	; (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a98      	ldr	r2, [pc, #608]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a96      	ldr	r2, [pc, #600]	; (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a96      	ldr	r2, [pc, #600]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a94      	ldr	r2, [pc, #592]	; (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a94      	ldr	r2, [pc, #592]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a92      	ldr	r2, [pc, #584]	; (800118c <HAL_GPIO_Init+0x2ac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a92      	ldr	r2, [pc, #584]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a90      	ldr	r2, [pc, #576]	; (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a79      	ldr	r2, [pc, #484]	; (8001194 <HAL_GPIO_Init+0x2b4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	; 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80b1 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b4d      	ldr	r3, [pc, #308]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b4a      	ldr	r3, [pc, #296]	; (8001198 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a48      	ldr	r2, [pc, #288]	; (800119c <HAL_GPIO_Init+0x2bc>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3e      	ldr	r2, [pc, #248]	; (80011a8 <HAL_GPIO_Init+0x2c8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3d      	ldr	r2, [pc, #244]	; (80011ac <HAL_GPIO_Init+0x2cc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1e0>
 80010bc:	2303      	movs	r3, #3
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010cc:	2300      	movs	r3, #0
 80010ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010de:	492f      	ldr	r1, [pc, #188]	; (800119c <HAL_GPIO_Init+0x2bc>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f8:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	492c      	ldr	r1, [pc, #176]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4928      	ldr	r1, [pc, #160]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001120:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	4922      	ldr	r1, [pc, #136]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	491e      	ldr	r1, [pc, #120]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	4918      	ldr	r1, [pc, #96]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4914      	ldr	r1, [pc, #80]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	490e      	ldr	r1, [pc, #56]	; (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	60cb      	str	r3, [r1, #12]
 800117c:	e021      	b.n	80011c2 <HAL_GPIO_Init+0x2e2>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4909      	ldr	r1, [pc, #36]	; (80011e4 <HAL_GPIO_Init+0x304>)
 80011be:	4013      	ands	r3, r2
 80011c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	3301      	adds	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae8e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	372c      	adds	r7, #44	; 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e272      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00c      	beq.n	800122e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001214:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d112      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
 8001220:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_RCC_OscConfig+0x12c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d168      	bne.n	8001314 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e24c      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x76>
 8001250:	4b80      	ldr	r3, [pc, #512]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a7f      	ldr	r2, [pc, #508]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e02e      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x98>
 8001266:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7a      	ldr	r2, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b78      	ldr	r3, [pc, #480]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a77      	ldr	r2, [pc, #476]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xbc>
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a71      	ldr	r2, [pc, #452]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b6f      	ldr	r3, [pc, #444]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a6e      	ldr	r2, [pc, #440]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd4>
 80012a4:	4b6b      	ldr	r3, [pc, #428]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6a      	ldr	r2, [pc, #424]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a67      	ldr	r2, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff fcf4 	bl	8000cb0 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fcf0 	bl	8000cb0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e200      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b5d      	ldr	r3, [pc, #372]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe4>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fce0 	bl	8000cb0 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fcdc 	bl	8000cb0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e1ec      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x10c>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001322:	4b4c      	ldr	r3, [pc, #304]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800132e:	4b49      	ldr	r3, [pc, #292]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
 800133a:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1c0      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4939      	ldr	r1, [pc, #228]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e03a      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <HAL_RCC_OscConfig+0x270>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff fc95 	bl	8000cb0 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800138a:	f7ff fc91 	bl	8000cb0 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4927      	ldr	r1, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_RCC_OscConfig+0x270>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c4:	f7ff fc74 	bl	8000cb0 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc70 	bl	8000cb0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e180      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f0      	bne.n	80013cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03a      	beq.n	800146c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d019      	beq.n	8001432 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_RCC_OscConfig+0x274>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001404:	f7ff fc54 	bl	8000cb0 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc50 	bl	8000cb0 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e160      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_RCC_OscConfig+0x26c>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800142a:	2001      	movs	r0, #1
 800142c:	f000 fad8 	bl	80019e0 <RCC_Delay>
 8001430:	e01c      	b.n	800146c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_RCC_OscConfig+0x274>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff fc3a 	bl	8000cb0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143e:	e00f      	b.n	8001460 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc36 	bl	8000cb0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d908      	bls.n	8001460 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e146      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	42420000 	.word	0x42420000
 800145c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	4b92      	ldr	r3, [pc, #584]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e9      	bne.n	8001440 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a6 	beq.w	80015c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147e:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10d      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b88      	ldr	r3, [pc, #544]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a87      	ldr	r2, [pc, #540]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b85      	ldr	r3, [pc, #532]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b2:	4b7f      	ldr	r3, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a7e      	ldr	r2, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff fbf7 	bl	8000cb0 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff fbf3 	bl	8000cb0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e103      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b75      	ldr	r3, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x4c8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_OscConfig+0x312>
 80014ec:	4b6f      	ldr	r3, [pc, #444]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e02d      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x334>
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4a69      	ldr	r2, [pc, #420]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	6213      	str	r3, [r2, #32]
 800150e:	4b67      	ldr	r3, [pc, #412]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4a66      	ldr	r2, [pc, #408]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	6213      	str	r3, [r2, #32]
 800151a:	e01c      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x356>
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a60      	ldr	r2, [pc, #384]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6213      	str	r3, [r2, #32]
 8001530:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a5d      	ldr	r2, [pc, #372]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	e00b      	b.n	8001556 <HAL_RCC_OscConfig+0x36e>
 800153e:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a5a      	ldr	r2, [pc, #360]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	4b58      	ldr	r3, [pc, #352]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4a57      	ldr	r2, [pc, #348]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d015      	beq.n	800158a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fba7 	bl	8000cb0 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fba3 	bl	8000cb0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	4b4b      	ldr	r3, [pc, #300]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ee      	beq.n	8001566 <HAL_RCC_OscConfig+0x37e>
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb91 	bl	8000cb0 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb8d 	bl	8000cb0 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e09b      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	4b40      	ldr	r3, [pc, #256]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	4a3b      	ldr	r2, [pc, #236]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8087 	beq.w	80016de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d061      	beq.n	80016a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d146      	bne.n	8001672 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb61 	bl	8000cb0 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fb5d 	bl	8000cb0 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e06d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001618:	d108      	bne.n	800162c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4921      	ldr	r1, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800162c:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a19      	ldr	r1, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	430b      	orrs	r3, r1
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fb31 	bl	8000cb0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001652:	f7ff fb2d 	bl	8000cb0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e03d      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x46a>
 8001670:	e035      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_RCC_OscConfig+0x4cc>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fb1a 	bl	8000cb0 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fb16 	bl	8000cb0 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e026      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_RCC_OscConfig+0x4c4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x498>
 800169e:	e01e      	b.n	80016de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e019      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40007000 	.word	0x40007000
 80016b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_RCC_OscConfig+0x500>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016de:	2300      	movs	r3, #0
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0d0      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001700:	4b6a      	ldr	r3, [pc, #424]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d910      	bls.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4965      	ldr	r1, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800176a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d040      	beq.n	800180c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d115      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b41      	ldr	r3, [pc, #260]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d109      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e073      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e06b      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ca:	4b39      	ldr	r3, [pc, #228]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f023 0203 	bic.w	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4936      	ldr	r1, [pc, #216]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fa68 	bl	8000cb0 <HAL_GetTick>
 80017e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e4:	f7ff fa64 	bl	8000cb0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e053      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 020c 	and.w	r2, r3, #12
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	429a      	cmp	r2, r3
 800180a:	d1eb      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d210      	bcs.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4922      	ldr	r1, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f821 	bl	80018c0 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1d0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f9c6 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40022000 	.word	0x40022000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	0800459c 	.word	0x0800459c
 80018b8:	20000004 	.word	0x20000004
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c0:	b490      	push	{r4, r7}
 80018c2:	b08a      	sub	sp, #40	; 0x28
 80018c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018c6:	4b29      	ldr	r3, [pc, #164]	; (800196c <HAL_RCC_GetSysClockFreq+0xac>)
 80018c8:	1d3c      	adds	r4, r7, #4
 80018ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d0:	f240 2301 	movw	r3, #513	; 0x201
 80018d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d002      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0x40>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x46>
 80018fe:	e02b      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001902:	623b      	str	r3, [r7, #32]
      break;
 8001904:	e02b      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	0c9b      	lsrs	r3, r3, #18
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3328      	adds	r3, #40	; 0x28
 8001910:	443b      	add	r3, r7
 8001912:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001916:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d012      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	0c5b      	lsrs	r3, r3, #17
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	3328      	adds	r3, #40	; 0x28
 800192e:	443b      	add	r3, r7
 8001930:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001934:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 800193a:	fb03 f202 	mul.w	r2, r3, r2
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	e004      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <HAL_RCC_GetSysClockFreq+0xb8>)
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	623b      	str	r3, [r7, #32]
      break;
 8001956:	e002      	b.n	800195e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195a:	623b      	str	r3, [r7, #32]
      break;
 800195c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800195e:	6a3b      	ldr	r3, [r7, #32]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bc90      	pop	{r4, r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	0800458c 	.word	0x0800458c
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	003d0900 	.word	0x003d0900

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b02      	ldr	r3, [pc, #8]	; (800198c <HAL_RCC_GetHCLKFreq+0x10>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001994:	f7ff fff2 	bl	800197c <HAL_RCC_GetHCLKFreq>
 8001998:	4602      	mov	r2, r0
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0a1b      	lsrs	r3, r3, #8
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	4903      	ldr	r1, [pc, #12]	; (80019b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019a6:	5ccb      	ldrb	r3, [r1, r3]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021000 	.word	0x40021000
 80019b4:	080045ac 	.word	0x080045ac

080019b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019bc:	f7ff ffde 	bl	800197c <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0adb      	lsrs	r3, r3, #11
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	080045ac 	.word	0x080045ac

080019e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <RCC_Delay+0x34>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <RCC_Delay+0x38>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	0a5b      	lsrs	r3, r3, #9
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019fc:	bf00      	nop
  }
  while (Delay --);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	60fa      	str	r2, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f9      	bne.n	80019fc <RCC_Delay+0x1c>
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000004 	.word	0x20000004
 8001a18:	10624dd3 	.word	0x10624dd3

08001a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e041      	b.n	8001ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe fec2 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f000 fde8 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d001      	beq.n	8001ad4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e03a      	b.n	8001b4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <HAL_TIM_Base_Start_IT+0x98>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d00e      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x58>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afe:	d009      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x58>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_TIM_Base_Start_IT+0x58>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	; (8001b5c <HAL_TIM_Base_Start_IT+0xa0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d111      	bne.n	8001b38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d010      	beq.n	8001b48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b36:	e007      	b.n	8001b48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40012c00 	.word	0x40012c00
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800

08001b60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e041      	b.n	8001bf6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f839 	bl	8001bfe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f000 fd46 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d109      	bne.n	8001c34 <HAL_TIM_OC_Start_IT+0x24>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e022      	b.n	8001c7a <HAL_TIM_OC_Start_IT+0x6a>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d109      	bne.n	8001c4e <HAL_TIM_OC_Start_IT+0x3e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	e015      	b.n	8001c7a <HAL_TIM_OC_Start_IT+0x6a>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d109      	bne.n	8001c68 <HAL_TIM_OC_Start_IT+0x58>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	bf14      	ite	ne
 8001c60:	2301      	movne	r3, #1
 8001c62:	2300      	moveq	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	e008      	b.n	8001c7a <HAL_TIM_OC_Start_IT+0x6a>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a4      	b.n	8001dcc <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d104      	bne.n	8001c92 <HAL_TIM_OC_Start_IT+0x82>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c90:	e013      	b.n	8001cba <HAL_TIM_OC_Start_IT+0xaa>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d104      	bne.n	8001ca2 <HAL_TIM_OC_Start_IT+0x92>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca0:	e00b      	b.n	8001cba <HAL_TIM_OC_Start_IT+0xaa>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d104      	bne.n	8001cb2 <HAL_TIM_OC_Start_IT+0xa2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb0:	e003      	b.n	8001cba <HAL_TIM_OC_Start_IT+0xaa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d841      	bhi.n	8001d44 <HAL_TIM_OC_Start_IT+0x134>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_TIM_OC_Start_IT+0xb8>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	08001d45 	.word	0x08001d45
 8001cd0:	08001d45 	.word	0x08001d45
 8001cd4:	08001d45 	.word	0x08001d45
 8001cd8:	08001d0f 	.word	0x08001d0f
 8001cdc:	08001d45 	.word	0x08001d45
 8001ce0:	08001d45 	.word	0x08001d45
 8001ce4:	08001d45 	.word	0x08001d45
 8001ce8:	08001d21 	.word	0x08001d21
 8001cec:	08001d45 	.word	0x08001d45
 8001cf0:	08001d45 	.word	0x08001d45
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d33 	.word	0x08001d33
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0202 	orr.w	r2, r2, #2
 8001d0a:	60da      	str	r2, [r3, #12]
      break;
 8001d0c:	e01b      	b.n	8001d46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	60da      	str	r2, [r3, #12]
      break;
 8001d1e:	e012      	b.n	8001d46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0208 	orr.w	r2, r2, #8
 8001d2e:	60da      	str	r2, [r3, #12]
      break;
 8001d30:	e009      	b.n	8001d46 <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f042 0210 	orr.w	r2, r2, #16
 8001d40:	60da      	str	r2, [r3, #12]
      break;
 8001d42:	e000      	b.n	8001d46 <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8001d44:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	6839      	ldr	r1, [r7, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fffb 	bl	8002d4a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_TIM_OC_Start_IT+0x1c4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d107      	bne.n	8001d6e <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_TIM_OC_Start_IT+0x1c4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d00e      	beq.n	8001d96 <HAL_TIM_OC_Start_IT+0x186>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d80:	d009      	beq.n	8001d96 <HAL_TIM_OC_Start_IT+0x186>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_TIM_OC_Start_IT+0x1c8>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d004      	beq.n	8001d96 <HAL_TIM_OC_Start_IT+0x186>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_TIM_OC_Start_IT+0x1cc>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d111      	bne.n	8001dba <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d010      	beq.n	8001dca <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	e007      	b.n	8001dca <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800

08001de0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f839 	bl	8001e7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 fc06 	bl	8002630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d104      	bne.n	8001eaa <HAL_TIM_IC_Start_IT+0x1a>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	e013      	b.n	8001ed2 <HAL_TIM_IC_Start_IT+0x42>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d104      	bne.n	8001eba <HAL_TIM_IC_Start_IT+0x2a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	e00b      	b.n	8001ed2 <HAL_TIM_IC_Start_IT+0x42>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d104      	bne.n	8001eca <HAL_TIM_IC_Start_IT+0x3a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e003      	b.n	8001ed2 <HAL_TIM_IC_Start_IT+0x42>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d104      	bne.n	8001ee4 <HAL_TIM_IC_Start_IT+0x54>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e013      	b.n	8001f0c <HAL_TIM_IC_Start_IT+0x7c>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d104      	bne.n	8001ef4 <HAL_TIM_IC_Start_IT+0x64>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	e00b      	b.n	8001f0c <HAL_TIM_IC_Start_IT+0x7c>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d104      	bne.n	8001f04 <HAL_TIM_IC_Start_IT+0x74>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	e003      	b.n	8001f0c <HAL_TIM_IC_Start_IT+0x7c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d001      	beq.n	8001f1e <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0b3      	b.n	8002086 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_IC_Start_IT+0x9e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f2c:	e013      	b.n	8001f56 <HAL_TIM_IC_Start_IT+0xc6>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d104      	bne.n	8001f3e <HAL_TIM_IC_Start_IT+0xae>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3c:	e00b      	b.n	8001f56 <HAL_TIM_IC_Start_IT+0xc6>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d104      	bne.n	8001f4e <HAL_TIM_IC_Start_IT+0xbe>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f4c:	e003      	b.n	8001f56 <HAL_TIM_IC_Start_IT+0xc6>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d104      	bne.n	8001f66 <HAL_TIM_IC_Start_IT+0xd6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f64:	e013      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xfe>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d104      	bne.n	8001f76 <HAL_TIM_IC_Start_IT+0xe6>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f74:	e00b      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xfe>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d104      	bne.n	8001f86 <HAL_TIM_IC_Start_IT+0xf6>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f84:	e003      	b.n	8001f8e <HAL_TIM_IC_Start_IT+0xfe>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b0c      	cmp	r3, #12
 8001f92:	d841      	bhi.n	8002018 <HAL_TIM_IC_Start_IT+0x188>
 8001f94:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <HAL_TIM_IC_Start_IT+0x10c>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	08001fd1 	.word	0x08001fd1
 8001fa0:	08002019 	.word	0x08002019
 8001fa4:	08002019 	.word	0x08002019
 8001fa8:	08002019 	.word	0x08002019
 8001fac:	08001fe3 	.word	0x08001fe3
 8001fb0:	08002019 	.word	0x08002019
 8001fb4:	08002019 	.word	0x08002019
 8001fb8:	08002019 	.word	0x08002019
 8001fbc:	08001ff5 	.word	0x08001ff5
 8001fc0:	08002019 	.word	0x08002019
 8001fc4:	08002019 	.word	0x08002019
 8001fc8:	08002019 	.word	0x08002019
 8001fcc:	08002007 	.word	0x08002007
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0202 	orr.w	r2, r2, #2
 8001fde:	60da      	str	r2, [r3, #12]
      break;
 8001fe0:	e01b      	b.n	800201a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0204 	orr.w	r2, r2, #4
 8001ff0:	60da      	str	r2, [r3, #12]
      break;
 8001ff2:	e012      	b.n	800201a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0208 	orr.w	r2, r2, #8
 8002002:	60da      	str	r2, [r3, #12]
      break;
 8002004:	e009      	b.n	800201a <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0210 	orr.w	r2, r2, #16
 8002014:	60da      	str	r2, [r3, #12]
      break;
 8002016:	e000      	b.n	800201a <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002018:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 fe91 	bl	8002d4a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_TIM_IC_Start_IT+0x200>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00e      	beq.n	8002050 <HAL_TIM_IC_Start_IT+0x1c0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d009      	beq.n	8002050 <HAL_TIM_IC_Start_IT+0x1c0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_TIM_IC_Start_IT+0x204>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d004      	beq.n	8002050 <HAL_TIM_IC_Start_IT+0x1c0>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a13      	ldr	r2, [pc, #76]	; (8002098 <HAL_TIM_IC_Start_IT+0x208>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d111      	bne.n	8002074 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b06      	cmp	r3, #6
 8002060:	d010      	beq.n	8002084 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002072:	e007      	b.n	8002084 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800

0800209c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0202 	mvn.w	r2, #2
 80020c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fa46 	bl	8000570 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7fe fa8a 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa8d 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b04      	cmp	r3, #4
 8002104:	d122      	bne.n	800214c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11b      	bne.n	800214c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0204 	mvn.w	r2, #4
 800211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fa1c 	bl	8000570 <HAL_TIM_IC_CaptureCallback>
 8002138:	e005      	b.n	8002146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fa60 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fa63 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b08      	cmp	r3, #8
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b08      	cmp	r3, #8
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0208 	mvn.w	r2, #8
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2204      	movs	r2, #4
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe f9f2 	bl	8000570 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe fa36 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa39 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d122      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b10      	cmp	r3, #16
 80021ba:	d11b      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0210 	mvn.w	r2, #16
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2208      	movs	r2, #8
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe f9c8 	bl	8000570 <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fa0c 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fa0f 	bl	800260c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0201 	mvn.w	r2, #1
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe f9de 	bl	80005dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fe0b 	bl	8002e62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	2b40      	cmp	r3, #64	; 0x40
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f9d3 	bl	800261e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b20      	cmp	r3, #32
 8002284:	d10e      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b20      	cmp	r3, #32
 8002292:	d107      	bne.n	80022a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0220 	mvn.w	r2, #32
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fdd6 	bl	8002e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e046      	b.n	8002354 <HAL_TIM_OC_ConfigChannel+0xa8>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d839      	bhi.n	8002348 <HAL_TIM_OC_ConfigChannel+0x9c>
 80022d4:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <HAL_TIM_OC_ConfigChannel+0x30>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	08002311 	.word	0x08002311
 80022e0:	08002349 	.word	0x08002349
 80022e4:	08002349 	.word	0x08002349
 80022e8:	08002349 	.word	0x08002349
 80022ec:	0800231f 	.word	0x0800231f
 80022f0:	08002349 	.word	0x08002349
 80022f4:	08002349 	.word	0x08002349
 80022f8:	08002349 	.word	0x08002349
 80022fc:	0800232d 	.word	0x0800232d
 8002300:	08002349 	.word	0x08002349
 8002304:	08002349 	.word	0x08002349
 8002308:	08002349 	.word	0x08002349
 800230c:	0800233b 	.word	0x0800233b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f9ec 	bl	80026f4 <TIM_OC1_SetConfig>
      break;
 800231c:	e015      	b.n	800234a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68b9      	ldr	r1, [r7, #8]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fa4b 	bl	80027c0 <TIM_OC2_SetConfig>
      break;
 800232a:	e00e      	b.n	800234a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 faae 	bl	8002894 <TIM_OC3_SetConfig>
      break;
 8002338:	e007      	b.n	800234a <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fb11 	bl	8002968 <TIM_OC4_SetConfig>
      break;
 8002346:	e000      	b.n	800234a <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8002348:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002372:	2302      	movs	r3, #2
 8002374:	e082      	b.n	800247c <HAL_TIM_IC_ConfigChannel+0x120>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11b      	bne.n	80023bc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f000 fb36 	bl	8002a04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 020c 	bic.w	r2, r2, #12
 80023a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6999      	ldr	r1, [r3, #24]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	619a      	str	r2, [r3, #24]
 80023ba:	e05a      	b.n	8002472 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d11c      	bne.n	80023fc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f000 fb9f 	bl	8002b14 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6999      	ldr	r1, [r3, #24]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	021a      	lsls	r2, r3, #8
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	619a      	str	r2, [r3, #24]
 80023fa:	e03a      	b.n	8002472 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d11b      	bne.n	800243a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f000 fbea 	bl	8002bea <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 020c 	bic.w	r2, r2, #12
 8002424:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
 8002438:	e01b      	b.n	8002472 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f000 fc09 	bl	8002c60 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69da      	ldr	r2, [r3, #28]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800245c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	69d9      	ldr	r1, [r3, #28]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	021a      	lsls	r2, r3, #8
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_TIM_ConfigClockSource+0x18>
 8002498:	2302      	movs	r3, #2
 800249a:	e0b3      	b.n	8002604 <HAL_TIM_ConfigClockSource+0x180>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024d4:	d03e      	beq.n	8002554 <HAL_TIM_ConfigClockSource+0xd0>
 80024d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024da:	f200 8087 	bhi.w	80025ec <HAL_TIM_ConfigClockSource+0x168>
 80024de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024e2:	f000 8085 	beq.w	80025f0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d87f      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 80024ec:	2b70      	cmp	r3, #112	; 0x70
 80024ee:	d01a      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0xa2>
 80024f0:	2b70      	cmp	r3, #112	; 0x70
 80024f2:	d87b      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 80024f4:	2b60      	cmp	r3, #96	; 0x60
 80024f6:	d050      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x116>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d877      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 80024fc:	2b50      	cmp	r3, #80	; 0x50
 80024fe:	d03c      	beq.n	800257a <HAL_TIM_ConfigClockSource+0xf6>
 8002500:	2b50      	cmp	r3, #80	; 0x50
 8002502:	d873      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d058      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x136>
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d86f      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 800250c:	2b30      	cmp	r3, #48	; 0x30
 800250e:	d064      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x156>
 8002510:	2b30      	cmp	r3, #48	; 0x30
 8002512:	d86b      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 8002514:	2b20      	cmp	r3, #32
 8002516:	d060      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x156>
 8002518:	2b20      	cmp	r3, #32
 800251a:	d867      	bhi.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d05c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x156>
 8002520:	2b10      	cmp	r3, #16
 8002522:	d05a      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002524:	e062      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f000 fbe9 	bl	8002d0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002548:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	609a      	str	r2, [r3, #8]
      break;
 8002552:	e04e      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6899      	ldr	r1, [r3, #8]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f000 fbd2 	bl	8002d0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002576:	609a      	str	r2, [r3, #8]
      break;
 8002578:	e03b      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	461a      	mov	r2, r3
 8002588:	f000 fa96 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2150      	movs	r1, #80	; 0x50
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fba0 	bl	8002cd8 <TIM_ITRx_SetConfig>
      break;
 8002598:	e02b      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 faf0 	bl	8002b8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2160      	movs	r1, #96	; 0x60
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fb90 	bl	8002cd8 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e01b      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 fa76 	bl	8002ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2140      	movs	r1, #64	; 0x40
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fb80 	bl	8002cd8 <TIM_ITRx_SetConfig>
      break;
 80025d8:	e00b      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f000 fb77 	bl	8002cd8 <TIM_ITRx_SetConfig>
        break;
 80025ea:	e002      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80025f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a29      	ldr	r2, [pc, #164]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00b      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264e:	d007      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_Base_SetConfig+0x30>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <TIM_Base_SetConfig+0xc0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d108      	bne.n	8002672 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00b      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002680:	d007      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a19      	ldr	r2, [pc, #100]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d003      	beq.n	8002692 <TIM_Base_SetConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <TIM_Base_SetConfig+0xc0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <TIM_Base_SetConfig+0xb8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	615a      	str	r2, [r3, #20]
}
 80026de:	bf00      	nop
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800

080026f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0201 	bic.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0303 	bic.w	r3, r3, #3
 800272a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 0302 	bic.w	r3, r3, #2
 800273c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <TIM_OC1_SetConfig+0xc8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d10c      	bne.n	800276a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0308 	bic.w	r3, r3, #8
 8002756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a13      	ldr	r2, [pc, #76]	; (80027bc <TIM_OC1_SetConfig+0xc8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d111      	bne.n	8002796 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	621a      	str	r2, [r3, #32]
}
 80027b0:	bf00      	nop
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40012c00 	.word	0x40012c00

080027c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b087      	sub	sp, #28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0210 	bic.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0320 	bic.w	r3, r3, #32
 800280a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <TIM_OC2_SetConfig+0xd0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10d      	bne.n	800283c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800283a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <TIM_OC2_SetConfig+0xd0>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d113      	bne.n	800286c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800284a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	621a      	str	r2, [r3, #32]
}
 8002886:	bf00      	nop
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00

08002894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a1d      	ldr	r2, [pc, #116]	; (8002964 <TIM_OC3_SetConfig+0xd0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d10d      	bne.n	800290e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	021b      	lsls	r3, r3, #8
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800290c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <TIM_OC3_SetConfig+0xd0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d113      	bne.n	800293e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800291c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	031b      	lsls	r3, r3, #12
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <TIM_OC4_SetConfig+0x98>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d109      	bne.n	80029dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	019b      	lsls	r3, r3, #6
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00

08002a04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <TIM_TI1_SetConfig+0xa8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <TIM_TI1_SetConfig+0x46>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d007      	beq.n	8002a4a <TIM_TI1_SetConfig+0x46>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <TIM_TI1_SetConfig+0xac>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d003      	beq.n	8002a4a <TIM_TI1_SetConfig+0x46>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <TIM_TI1_SetConfig+0xb0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <TIM_TI1_SetConfig+0x4a>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <TIM_TI1_SetConfig+0x4c>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0303 	bic.w	r3, r3, #3
 8002a5a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e003      	b.n	8002a6e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f023 030a 	bic.w	r3, r3, #10
 8002a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f003 030a 	and.w	r3, r3, #10
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40012c00 	.word	0x40012c00
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	40000800 	.word	0x40000800

08002ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f023 0201 	bic.w	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 030a 	bic.w	r3, r3, #10
 8002af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f023 0210 	bic.w	r2, r3, #16
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	031b      	lsls	r3, r3, #12
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	621a      	str	r2, [r3, #32]
}
 8002b82:	bf00      	nop
 8002b84:	371c      	adds	r7, #28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b087      	sub	sp, #28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f023 0210 	bic.w	r2, r3, #16
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	031b      	lsls	r3, r3, #12
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b087      	sub	sp, #28
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0303 	bic.w	r3, r3, #3
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	621a      	str	r2, [r3, #32]
}
 8002cce:	bf00      	nop
 8002cd0:	371c      	adds	r7, #28
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f043 0307 	orr.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	021a      	lsls	r2, r3, #8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b087      	sub	sp, #28
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	401a      	ands	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	431a      	orrs	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr
	...

08002d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e046      	b.n	8002e3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d009      	beq.n	8002e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10c      	bne.n	8002e28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800

08002e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc80      	pop	{r7}
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e03f      	b.n	8002f06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd fd42 	bl	8000924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	; 0x24
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f9a7 	bl	800320c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08a      	sub	sp, #40	; 0x28
 8002f12:	af02      	add	r7, sp, #8
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d17c      	bne.n	8003028 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_UART_Transmit+0x2c>
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e075      	b.n	800302a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x3e>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e06e      	b.n	800302a <HAL_UART_Transmit+0x11c>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2221      	movs	r2, #33	; 0x21
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f62:	f7fd fea5 	bl	8000cb0 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	88fa      	ldrh	r2, [r7, #6]
 8002f6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	88fa      	ldrh	r2, [r7, #6]
 8002f72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7c:	d108      	bne.n	8002f90 <HAL_UART_Transmit+0x82>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d104      	bne.n	8002f90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e003      	b.n	8002f98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fa0:	e02a      	b.n	8002ff8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f8e2 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e036      	b.n	800302a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	e007      	b.n	8002fea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1cf      	bne.n	8002fa2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f8b2 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e006      	b.n	800302a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b08a      	sub	sp, #40	; 0x28
 8003036:	af02      	add	r7, sp, #8
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	603b      	str	r3, [r7, #0]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b20      	cmp	r3, #32
 8003050:	f040 808c 	bne.w	800316c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_UART_Receive+0x2e>
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e084      	b.n	800316e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306a:	2b01      	cmp	r3, #1
 800306c:	d101      	bne.n	8003072 <HAL_UART_Receive+0x40>
 800306e:	2302      	movs	r3, #2
 8003070:	e07d      	b.n	800316e <HAL_UART_Receive+0x13c>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2222      	movs	r2, #34	; 0x22
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308e:	f7fd fe0f 	bl	8000cb0 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	88fa      	ldrh	r2, [r7, #6]
 800309e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a8:	d108      	bne.n	80030bc <HAL_UART_Receive+0x8a>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d104      	bne.n	80030bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	e003      	b.n	80030c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030cc:	e043      	b.n	8003156 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2120      	movs	r1, #32
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 f84c 	bl	8003176 <UART_WaitOnFlagUntilTimeout>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e042      	b.n	800316e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	3302      	adds	r3, #2
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e01f      	b.n	8003148 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003110:	d007      	beq.n	8003122 <HAL_UART_Receive+0xf0>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10a      	bne.n	8003130 <HAL_UART_Receive+0xfe>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	b2da      	uxtb	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e008      	b.n	8003142 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800313c:	b2da      	uxtb	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1b6      	bne.n	80030ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003186:	e02c      	b.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318e:	d028      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003196:	f7fd fd8b 	bl	8000cb0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d21d      	bcs.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e00f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d0c3      	beq.n	8003188 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003246:	f023 030c 	bic.w	r3, r3, #12
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6812      	ldr	r2, [r2, #0]
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	430b      	orrs	r3, r1
 8003252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <UART_SetConfig+0x114>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d103      	bne.n	800327c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7fe fba0 	bl	80019b8 <HAL_RCC_GetPCLK2Freq>
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	e002      	b.n	8003282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7fe fb88 	bl	8001990 <HAL_RCC_GetPCLK1Freq>
 8003280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	4a22      	ldr	r2, [pc, #136]	; (8003324 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	0119      	lsls	r1, r3, #4
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009a      	lsls	r2, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <UART_SetConfig+0x118>)
 80032ba:	fba3 0302 	umull	r0, r3, r3, r2
 80032be:	095b      	lsrs	r3, r3, #5
 80032c0:	2064      	movs	r0, #100	; 0x64
 80032c2:	fb00 f303 	mul.w	r3, r0, r3
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	3332      	adds	r3, #50	; 0x32
 80032cc:	4a15      	ldr	r2, [pc, #84]	; (8003324 <UART_SetConfig+0x118>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d8:	4419      	add	r1, r3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	441a      	add	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <UART_SetConfig+0x118>)
 80032f2:	fba3 0302 	umull	r0, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2064      	movs	r0, #100	; 0x64
 80032fa:	fb00 f303 	mul.w	r3, r0, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	3332      	adds	r3, #50	; 0x32
 8003304:	4a07      	ldr	r2, [pc, #28]	; (8003324 <UART_SetConfig+0x118>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	440a      	add	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40013800 	.word	0x40013800
 8003324:	51eb851f 	.word	0x51eb851f

08003328 <__errno>:
 8003328:	4b01      	ldr	r3, [pc, #4]	; (8003330 <__errno+0x8>)
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000010 	.word	0x20000010

08003334 <__libc_init_array>:
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	2600      	movs	r6, #0
 8003338:	4d0c      	ldr	r5, [pc, #48]	; (800336c <__libc_init_array+0x38>)
 800333a:	4c0d      	ldr	r4, [pc, #52]	; (8003370 <__libc_init_array+0x3c>)
 800333c:	1b64      	subs	r4, r4, r5
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	42a6      	cmp	r6, r4
 8003342:	d109      	bne.n	8003358 <__libc_init_array+0x24>
 8003344:	f001 f8fa 	bl	800453c <_init>
 8003348:	2600      	movs	r6, #0
 800334a:	4d0a      	ldr	r5, [pc, #40]	; (8003374 <__libc_init_array+0x40>)
 800334c:	4c0a      	ldr	r4, [pc, #40]	; (8003378 <__libc_init_array+0x44>)
 800334e:	1b64      	subs	r4, r4, r5
 8003350:	10a4      	asrs	r4, r4, #2
 8003352:	42a6      	cmp	r6, r4
 8003354:	d105      	bne.n	8003362 <__libc_init_array+0x2e>
 8003356:	bd70      	pop	{r4, r5, r6, pc}
 8003358:	f855 3b04 	ldr.w	r3, [r5], #4
 800335c:	4798      	blx	r3
 800335e:	3601      	adds	r6, #1
 8003360:	e7ee      	b.n	8003340 <__libc_init_array+0xc>
 8003362:	f855 3b04 	ldr.w	r3, [r5], #4
 8003366:	4798      	blx	r3
 8003368:	3601      	adds	r6, #1
 800336a:	e7f2      	b.n	8003352 <__libc_init_array+0x1e>
 800336c:	0800464c 	.word	0x0800464c
 8003370:	0800464c 	.word	0x0800464c
 8003374:	0800464c 	.word	0x0800464c
 8003378:	08004650 	.word	0x08004650

0800337c <memset>:
 800337c:	4603      	mov	r3, r0
 800337e:	4402      	add	r2, r0
 8003380:	4293      	cmp	r3, r2
 8003382:	d100      	bne.n	8003386 <memset+0xa>
 8003384:	4770      	bx	lr
 8003386:	f803 1b01 	strb.w	r1, [r3], #1
 800338a:	e7f9      	b.n	8003380 <memset+0x4>

0800338c <iprintf>:
 800338c:	b40f      	push	{r0, r1, r2, r3}
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <iprintf+0x2c>)
 8003390:	b513      	push	{r0, r1, r4, lr}
 8003392:	681c      	ldr	r4, [r3, #0]
 8003394:	b124      	cbz	r4, 80033a0 <iprintf+0x14>
 8003396:	69a3      	ldr	r3, [r4, #24]
 8003398:	b913      	cbnz	r3, 80033a0 <iprintf+0x14>
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fb20 	bl	80039e0 <__sinit>
 80033a0:	ab05      	add	r3, sp, #20
 80033a2:	4620      	mov	r0, r4
 80033a4:	9a04      	ldr	r2, [sp, #16]
 80033a6:	68a1      	ldr	r1, [r4, #8]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	f000 fd2b 	bl	8003e04 <_vfiprintf_r>
 80033ae:	b002      	add	sp, #8
 80033b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b4:	b004      	add	sp, #16
 80033b6:	4770      	bx	lr
 80033b8:	20000010 	.word	0x20000010

080033bc <_puts_r>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	460e      	mov	r6, r1
 80033c0:	4605      	mov	r5, r0
 80033c2:	b118      	cbz	r0, 80033cc <_puts_r+0x10>
 80033c4:	6983      	ldr	r3, [r0, #24]
 80033c6:	b90b      	cbnz	r3, 80033cc <_puts_r+0x10>
 80033c8:	f000 fb0a 	bl	80039e0 <__sinit>
 80033cc:	69ab      	ldr	r3, [r5, #24]
 80033ce:	68ac      	ldr	r4, [r5, #8]
 80033d0:	b913      	cbnz	r3, 80033d8 <_puts_r+0x1c>
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 fb04 	bl	80039e0 <__sinit>
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <_puts_r+0xd0>)
 80033da:	429c      	cmp	r4, r3
 80033dc:	d120      	bne.n	8003420 <_puts_r+0x64>
 80033de:	686c      	ldr	r4, [r5, #4]
 80033e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033e2:	07db      	lsls	r3, r3, #31
 80033e4:	d405      	bmi.n	80033f2 <_puts_r+0x36>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	0598      	lsls	r0, r3, #22
 80033ea:	d402      	bmi.n	80033f2 <_puts_r+0x36>
 80033ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ee:	f000 fb95 	bl	8003b1c <__retarget_lock_acquire_recursive>
 80033f2:	89a3      	ldrh	r3, [r4, #12]
 80033f4:	0719      	lsls	r1, r3, #28
 80033f6:	d51d      	bpl.n	8003434 <_puts_r+0x78>
 80033f8:	6923      	ldr	r3, [r4, #16]
 80033fa:	b1db      	cbz	r3, 8003434 <_puts_r+0x78>
 80033fc:	3e01      	subs	r6, #1
 80033fe:	68a3      	ldr	r3, [r4, #8]
 8003400:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003404:	3b01      	subs	r3, #1
 8003406:	60a3      	str	r3, [r4, #8]
 8003408:	bb39      	cbnz	r1, 800345a <_puts_r+0x9e>
 800340a:	2b00      	cmp	r3, #0
 800340c:	da38      	bge.n	8003480 <_puts_r+0xc4>
 800340e:	4622      	mov	r2, r4
 8003410:	210a      	movs	r1, #10
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f90e 	bl	8003634 <__swbuf_r>
 8003418:	3001      	adds	r0, #1
 800341a:	d011      	beq.n	8003440 <_puts_r+0x84>
 800341c:	250a      	movs	r5, #10
 800341e:	e011      	b.n	8003444 <_puts_r+0x88>
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <_puts_r+0xd4>)
 8003422:	429c      	cmp	r4, r3
 8003424:	d101      	bne.n	800342a <_puts_r+0x6e>
 8003426:	68ac      	ldr	r4, [r5, #8]
 8003428:	e7da      	b.n	80033e0 <_puts_r+0x24>
 800342a:	4b1a      	ldr	r3, [pc, #104]	; (8003494 <_puts_r+0xd8>)
 800342c:	429c      	cmp	r4, r3
 800342e:	bf08      	it	eq
 8003430:	68ec      	ldreq	r4, [r5, #12]
 8003432:	e7d5      	b.n	80033e0 <_puts_r+0x24>
 8003434:	4621      	mov	r1, r4
 8003436:	4628      	mov	r0, r5
 8003438:	f000 f94e 	bl	80036d8 <__swsetup_r>
 800343c:	2800      	cmp	r0, #0
 800343e:	d0dd      	beq.n	80033fc <_puts_r+0x40>
 8003440:	f04f 35ff 	mov.w	r5, #4294967295
 8003444:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003446:	07da      	lsls	r2, r3, #31
 8003448:	d405      	bmi.n	8003456 <_puts_r+0x9a>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	059b      	lsls	r3, r3, #22
 800344e:	d402      	bmi.n	8003456 <_puts_r+0x9a>
 8003450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003452:	f000 fb64 	bl	8003b1e <__retarget_lock_release_recursive>
 8003456:	4628      	mov	r0, r5
 8003458:	bd70      	pop	{r4, r5, r6, pc}
 800345a:	2b00      	cmp	r3, #0
 800345c:	da04      	bge.n	8003468 <_puts_r+0xac>
 800345e:	69a2      	ldr	r2, [r4, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	dc06      	bgt.n	8003472 <_puts_r+0xb6>
 8003464:	290a      	cmp	r1, #10
 8003466:	d004      	beq.n	8003472 <_puts_r+0xb6>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	6022      	str	r2, [r4, #0]
 800346e:	7019      	strb	r1, [r3, #0]
 8003470:	e7c5      	b.n	80033fe <_puts_r+0x42>
 8003472:	4622      	mov	r2, r4
 8003474:	4628      	mov	r0, r5
 8003476:	f000 f8dd 	bl	8003634 <__swbuf_r>
 800347a:	3001      	adds	r0, #1
 800347c:	d1bf      	bne.n	80033fe <_puts_r+0x42>
 800347e:	e7df      	b.n	8003440 <_puts_r+0x84>
 8003480:	250a      	movs	r5, #10
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	6022      	str	r2, [r4, #0]
 8003488:	701d      	strb	r5, [r3, #0]
 800348a:	e7db      	b.n	8003444 <_puts_r+0x88>
 800348c:	080045d8 	.word	0x080045d8
 8003490:	080045f8 	.word	0x080045f8
 8003494:	080045b8 	.word	0x080045b8

08003498 <puts>:
 8003498:	4b02      	ldr	r3, [pc, #8]	; (80034a4 <puts+0xc>)
 800349a:	4601      	mov	r1, r0
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	f7ff bf8d 	b.w	80033bc <_puts_r>
 80034a2:	bf00      	nop
 80034a4:	20000010 	.word	0x20000010

080034a8 <setvbuf>:
 80034a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034ac:	461d      	mov	r5, r3
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <setvbuf+0x17c>)
 80034b0:	4604      	mov	r4, r0
 80034b2:	681f      	ldr	r7, [r3, #0]
 80034b4:	460e      	mov	r6, r1
 80034b6:	4690      	mov	r8, r2
 80034b8:	b127      	cbz	r7, 80034c4 <setvbuf+0x1c>
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	b913      	cbnz	r3, 80034c4 <setvbuf+0x1c>
 80034be:	4638      	mov	r0, r7
 80034c0:	f000 fa8e 	bl	80039e0 <__sinit>
 80034c4:	4b58      	ldr	r3, [pc, #352]	; (8003628 <setvbuf+0x180>)
 80034c6:	429c      	cmp	r4, r3
 80034c8:	d167      	bne.n	800359a <setvbuf+0xf2>
 80034ca:	687c      	ldr	r4, [r7, #4]
 80034cc:	f1b8 0f02 	cmp.w	r8, #2
 80034d0:	d006      	beq.n	80034e0 <setvbuf+0x38>
 80034d2:	f1b8 0f01 	cmp.w	r8, #1
 80034d6:	f200 809f 	bhi.w	8003618 <setvbuf+0x170>
 80034da:	2d00      	cmp	r5, #0
 80034dc:	f2c0 809c 	blt.w	8003618 <setvbuf+0x170>
 80034e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034e2:	07db      	lsls	r3, r3, #31
 80034e4:	d405      	bmi.n	80034f2 <setvbuf+0x4a>
 80034e6:	89a3      	ldrh	r3, [r4, #12]
 80034e8:	0598      	lsls	r0, r3, #22
 80034ea:	d402      	bmi.n	80034f2 <setvbuf+0x4a>
 80034ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034ee:	f000 fb15 	bl	8003b1c <__retarget_lock_acquire_recursive>
 80034f2:	4621      	mov	r1, r4
 80034f4:	4638      	mov	r0, r7
 80034f6:	f000 f9df 	bl	80038b8 <_fflush_r>
 80034fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034fc:	b141      	cbz	r1, 8003510 <setvbuf+0x68>
 80034fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003502:	4299      	cmp	r1, r3
 8003504:	d002      	beq.n	800350c <setvbuf+0x64>
 8003506:	4638      	mov	r0, r7
 8003508:	f000 fb78 	bl	8003bfc <_free_r>
 800350c:	2300      	movs	r3, #0
 800350e:	6363      	str	r3, [r4, #52]	; 0x34
 8003510:	2300      	movs	r3, #0
 8003512:	61a3      	str	r3, [r4, #24]
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	0619      	lsls	r1, r3, #24
 800351a:	d503      	bpl.n	8003524 <setvbuf+0x7c>
 800351c:	4638      	mov	r0, r7
 800351e:	6921      	ldr	r1, [r4, #16]
 8003520:	f000 fb6c 	bl	8003bfc <_free_r>
 8003524:	89a3      	ldrh	r3, [r4, #12]
 8003526:	f1b8 0f02 	cmp.w	r8, #2
 800352a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	81a3      	strh	r3, [r4, #12]
 8003534:	d06c      	beq.n	8003610 <setvbuf+0x168>
 8003536:	ab01      	add	r3, sp, #4
 8003538:	466a      	mov	r2, sp
 800353a:	4621      	mov	r1, r4
 800353c:	4638      	mov	r0, r7
 800353e:	f000 faef 	bl	8003b20 <__swhatbuf_r>
 8003542:	89a3      	ldrh	r3, [r4, #12]
 8003544:	4318      	orrs	r0, r3
 8003546:	81a0      	strh	r0, [r4, #12]
 8003548:	2d00      	cmp	r5, #0
 800354a:	d130      	bne.n	80035ae <setvbuf+0x106>
 800354c:	9d00      	ldr	r5, [sp, #0]
 800354e:	4628      	mov	r0, r5
 8003550:	f000 fb4c 	bl	8003bec <malloc>
 8003554:	4606      	mov	r6, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	d155      	bne.n	8003606 <setvbuf+0x15e>
 800355a:	f8dd 9000 	ldr.w	r9, [sp]
 800355e:	45a9      	cmp	r9, r5
 8003560:	d14a      	bne.n	80035f8 <setvbuf+0x150>
 8003562:	f04f 35ff 	mov.w	r5, #4294967295
 8003566:	2200      	movs	r2, #0
 8003568:	60a2      	str	r2, [r4, #8]
 800356a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800356e:	6022      	str	r2, [r4, #0]
 8003570:	6122      	str	r2, [r4, #16]
 8003572:	2201      	movs	r2, #1
 8003574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003578:	6162      	str	r2, [r4, #20]
 800357a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	07d2      	lsls	r2, r2, #31
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	d405      	bmi.n	8003592 <setvbuf+0xea>
 8003586:	f413 7f00 	tst.w	r3, #512	; 0x200
 800358a:	d102      	bne.n	8003592 <setvbuf+0xea>
 800358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358e:	f000 fac6 	bl	8003b1e <__retarget_lock_release_recursive>
 8003592:	4628      	mov	r0, r5
 8003594:	b003      	add	sp, #12
 8003596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <setvbuf+0x184>)
 800359c:	429c      	cmp	r4, r3
 800359e:	d101      	bne.n	80035a4 <setvbuf+0xfc>
 80035a0:	68bc      	ldr	r4, [r7, #8]
 80035a2:	e793      	b.n	80034cc <setvbuf+0x24>
 80035a4:	4b22      	ldr	r3, [pc, #136]	; (8003630 <setvbuf+0x188>)
 80035a6:	429c      	cmp	r4, r3
 80035a8:	bf08      	it	eq
 80035aa:	68fc      	ldreq	r4, [r7, #12]
 80035ac:	e78e      	b.n	80034cc <setvbuf+0x24>
 80035ae:	2e00      	cmp	r6, #0
 80035b0:	d0cd      	beq.n	800354e <setvbuf+0xa6>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	b913      	cbnz	r3, 80035bc <setvbuf+0x114>
 80035b6:	4638      	mov	r0, r7
 80035b8:	f000 fa12 	bl	80039e0 <__sinit>
 80035bc:	f1b8 0f01 	cmp.w	r8, #1
 80035c0:	bf08      	it	eq
 80035c2:	89a3      	ldrheq	r3, [r4, #12]
 80035c4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80035c8:	bf04      	itt	eq
 80035ca:	f043 0301 	orreq.w	r3, r3, #1
 80035ce:	81a3      	strheq	r3, [r4, #12]
 80035d0:	89a2      	ldrh	r2, [r4, #12]
 80035d2:	6026      	str	r6, [r4, #0]
 80035d4:	f012 0308 	ands.w	r3, r2, #8
 80035d8:	d01c      	beq.n	8003614 <setvbuf+0x16c>
 80035da:	07d3      	lsls	r3, r2, #31
 80035dc:	bf41      	itttt	mi
 80035de:	2300      	movmi	r3, #0
 80035e0:	426d      	negmi	r5, r5
 80035e2:	60a3      	strmi	r3, [r4, #8]
 80035e4:	61a5      	strmi	r5, [r4, #24]
 80035e6:	bf58      	it	pl
 80035e8:	60a5      	strpl	r5, [r4, #8]
 80035ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80035ec:	f015 0501 	ands.w	r5, r5, #1
 80035f0:	d115      	bne.n	800361e <setvbuf+0x176>
 80035f2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80035f6:	e7c8      	b.n	800358a <setvbuf+0xe2>
 80035f8:	4648      	mov	r0, r9
 80035fa:	f000 faf7 	bl	8003bec <malloc>
 80035fe:	4606      	mov	r6, r0
 8003600:	2800      	cmp	r0, #0
 8003602:	d0ae      	beq.n	8003562 <setvbuf+0xba>
 8003604:	464d      	mov	r5, r9
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	e7d0      	b.n	80035b2 <setvbuf+0x10a>
 8003610:	2500      	movs	r5, #0
 8003612:	e7a8      	b.n	8003566 <setvbuf+0xbe>
 8003614:	60a3      	str	r3, [r4, #8]
 8003616:	e7e8      	b.n	80035ea <setvbuf+0x142>
 8003618:	f04f 35ff 	mov.w	r5, #4294967295
 800361c:	e7b9      	b.n	8003592 <setvbuf+0xea>
 800361e:	2500      	movs	r5, #0
 8003620:	e7b7      	b.n	8003592 <setvbuf+0xea>
 8003622:	bf00      	nop
 8003624:	20000010 	.word	0x20000010
 8003628:	080045d8 	.word	0x080045d8
 800362c:	080045f8 	.word	0x080045f8
 8003630:	080045b8 	.word	0x080045b8

08003634 <__swbuf_r>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	460e      	mov	r6, r1
 8003638:	4614      	mov	r4, r2
 800363a:	4605      	mov	r5, r0
 800363c:	b118      	cbz	r0, 8003646 <__swbuf_r+0x12>
 800363e:	6983      	ldr	r3, [r0, #24]
 8003640:	b90b      	cbnz	r3, 8003646 <__swbuf_r+0x12>
 8003642:	f000 f9cd 	bl	80039e0 <__sinit>
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <__swbuf_r+0x98>)
 8003648:	429c      	cmp	r4, r3
 800364a:	d12b      	bne.n	80036a4 <__swbuf_r+0x70>
 800364c:	686c      	ldr	r4, [r5, #4]
 800364e:	69a3      	ldr	r3, [r4, #24]
 8003650:	60a3      	str	r3, [r4, #8]
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	071a      	lsls	r2, r3, #28
 8003656:	d52f      	bpl.n	80036b8 <__swbuf_r+0x84>
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	b36b      	cbz	r3, 80036b8 <__swbuf_r+0x84>
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	b2f6      	uxtb	r6, r6
 8003662:	1ac0      	subs	r0, r0, r3
 8003664:	6963      	ldr	r3, [r4, #20]
 8003666:	4637      	mov	r7, r6
 8003668:	4283      	cmp	r3, r0
 800366a:	dc04      	bgt.n	8003676 <__swbuf_r+0x42>
 800366c:	4621      	mov	r1, r4
 800366e:	4628      	mov	r0, r5
 8003670:	f000 f922 	bl	80038b8 <_fflush_r>
 8003674:	bb30      	cbnz	r0, 80036c4 <__swbuf_r+0x90>
 8003676:	68a3      	ldr	r3, [r4, #8]
 8003678:	3001      	adds	r0, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	60a3      	str	r3, [r4, #8]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	701e      	strb	r6, [r3, #0]
 8003686:	6963      	ldr	r3, [r4, #20]
 8003688:	4283      	cmp	r3, r0
 800368a:	d004      	beq.n	8003696 <__swbuf_r+0x62>
 800368c:	89a3      	ldrh	r3, [r4, #12]
 800368e:	07db      	lsls	r3, r3, #31
 8003690:	d506      	bpl.n	80036a0 <__swbuf_r+0x6c>
 8003692:	2e0a      	cmp	r6, #10
 8003694:	d104      	bne.n	80036a0 <__swbuf_r+0x6c>
 8003696:	4621      	mov	r1, r4
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f90d 	bl	80038b8 <_fflush_r>
 800369e:	b988      	cbnz	r0, 80036c4 <__swbuf_r+0x90>
 80036a0:	4638      	mov	r0, r7
 80036a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <__swbuf_r+0x9c>)
 80036a6:	429c      	cmp	r4, r3
 80036a8:	d101      	bne.n	80036ae <__swbuf_r+0x7a>
 80036aa:	68ac      	ldr	r4, [r5, #8]
 80036ac:	e7cf      	b.n	800364e <__swbuf_r+0x1a>
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <__swbuf_r+0xa0>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	bf08      	it	eq
 80036b4:	68ec      	ldreq	r4, [r5, #12]
 80036b6:	e7ca      	b.n	800364e <__swbuf_r+0x1a>
 80036b8:	4621      	mov	r1, r4
 80036ba:	4628      	mov	r0, r5
 80036bc:	f000 f80c 	bl	80036d8 <__swsetup_r>
 80036c0:	2800      	cmp	r0, #0
 80036c2:	d0cb      	beq.n	800365c <__swbuf_r+0x28>
 80036c4:	f04f 37ff 	mov.w	r7, #4294967295
 80036c8:	e7ea      	b.n	80036a0 <__swbuf_r+0x6c>
 80036ca:	bf00      	nop
 80036cc:	080045d8 	.word	0x080045d8
 80036d0:	080045f8 	.word	0x080045f8
 80036d4:	080045b8 	.word	0x080045b8

080036d8 <__swsetup_r>:
 80036d8:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <__swsetup_r+0xcc>)
 80036da:	b570      	push	{r4, r5, r6, lr}
 80036dc:	681d      	ldr	r5, [r3, #0]
 80036de:	4606      	mov	r6, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	b125      	cbz	r5, 80036ee <__swsetup_r+0x16>
 80036e4:	69ab      	ldr	r3, [r5, #24]
 80036e6:	b913      	cbnz	r3, 80036ee <__swsetup_r+0x16>
 80036e8:	4628      	mov	r0, r5
 80036ea:	f000 f979 	bl	80039e0 <__sinit>
 80036ee:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <__swsetup_r+0xd0>)
 80036f0:	429c      	cmp	r4, r3
 80036f2:	d10f      	bne.n	8003714 <__swsetup_r+0x3c>
 80036f4:	686c      	ldr	r4, [r5, #4]
 80036f6:	89a3      	ldrh	r3, [r4, #12]
 80036f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036fc:	0719      	lsls	r1, r3, #28
 80036fe:	d42c      	bmi.n	800375a <__swsetup_r+0x82>
 8003700:	06dd      	lsls	r5, r3, #27
 8003702:	d411      	bmi.n	8003728 <__swsetup_r+0x50>
 8003704:	2309      	movs	r3, #9
 8003706:	6033      	str	r3, [r6, #0]
 8003708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	81a3      	strh	r3, [r4, #12]
 8003712:	e03e      	b.n	8003792 <__swsetup_r+0xba>
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <__swsetup_r+0xd4>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <__swsetup_r+0x46>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7eb      	b.n	80036f6 <__swsetup_r+0x1e>
 800371e:	4b24      	ldr	r3, [pc, #144]	; (80037b0 <__swsetup_r+0xd8>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7e6      	b.n	80036f6 <__swsetup_r+0x1e>
 8003728:	0758      	lsls	r0, r3, #29
 800372a:	d512      	bpl.n	8003752 <__swsetup_r+0x7a>
 800372c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800372e:	b141      	cbz	r1, 8003742 <__swsetup_r+0x6a>
 8003730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003734:	4299      	cmp	r1, r3
 8003736:	d002      	beq.n	800373e <__swsetup_r+0x66>
 8003738:	4630      	mov	r0, r6
 800373a:	f000 fa5f 	bl	8003bfc <_free_r>
 800373e:	2300      	movs	r3, #0
 8003740:	6363      	str	r3, [r4, #52]	; 0x34
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	2300      	movs	r3, #0
 800374c:	6063      	str	r3, [r4, #4]
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	89a3      	ldrh	r3, [r4, #12]
 8003754:	f043 0308 	orr.w	r3, r3, #8
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	b94b      	cbnz	r3, 8003772 <__swsetup_r+0x9a>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d003      	beq.n	8003772 <__swsetup_r+0x9a>
 800376a:	4621      	mov	r1, r4
 800376c:	4630      	mov	r0, r6
 800376e:	f000 f9fd 	bl	8003b6c <__smakebuf_r>
 8003772:	89a0      	ldrh	r0, [r4, #12]
 8003774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003778:	f010 0301 	ands.w	r3, r0, #1
 800377c:	d00a      	beq.n	8003794 <__swsetup_r+0xbc>
 800377e:	2300      	movs	r3, #0
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	6963      	ldr	r3, [r4, #20]
 8003784:	425b      	negs	r3, r3
 8003786:	61a3      	str	r3, [r4, #24]
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	b943      	cbnz	r3, 800379e <__swsetup_r+0xc6>
 800378c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003790:	d1ba      	bne.n	8003708 <__swsetup_r+0x30>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	0781      	lsls	r1, r0, #30
 8003796:	bf58      	it	pl
 8003798:	6963      	ldrpl	r3, [r4, #20]
 800379a:	60a3      	str	r3, [r4, #8]
 800379c:	e7f4      	b.n	8003788 <__swsetup_r+0xb0>
 800379e:	2000      	movs	r0, #0
 80037a0:	e7f7      	b.n	8003792 <__swsetup_r+0xba>
 80037a2:	bf00      	nop
 80037a4:	20000010 	.word	0x20000010
 80037a8:	080045d8 	.word	0x080045d8
 80037ac:	080045f8 	.word	0x080045f8
 80037b0:	080045b8 	.word	0x080045b8

080037b4 <__sflush_r>:
 80037b4:	898a      	ldrh	r2, [r1, #12]
 80037b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b8:	4605      	mov	r5, r0
 80037ba:	0710      	lsls	r0, r2, #28
 80037bc:	460c      	mov	r4, r1
 80037be:	d457      	bmi.n	8003870 <__sflush_r+0xbc>
 80037c0:	684b      	ldr	r3, [r1, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dc04      	bgt.n	80037d0 <__sflush_r+0x1c>
 80037c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	dc01      	bgt.n	80037d0 <__sflush_r+0x1c>
 80037cc:	2000      	movs	r0, #0
 80037ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	d0fa      	beq.n	80037cc <__sflush_r+0x18>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037dc:	682f      	ldr	r7, [r5, #0]
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	d032      	beq.n	8003848 <__sflush_r+0x94>
 80037e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	075a      	lsls	r2, r3, #29
 80037e8:	d505      	bpl.n	80037f6 <__sflush_r+0x42>
 80037ea:	6863      	ldr	r3, [r4, #4]
 80037ec:	1ac0      	subs	r0, r0, r3
 80037ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037f0:	b10b      	cbz	r3, 80037f6 <__sflush_r+0x42>
 80037f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037f4:	1ac0      	subs	r0, r0, r3
 80037f6:	2300      	movs	r3, #0
 80037f8:	4602      	mov	r2, r0
 80037fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037fc:	4628      	mov	r0, r5
 80037fe:	6a21      	ldr	r1, [r4, #32]
 8003800:	47b0      	blx	r6
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	89a3      	ldrh	r3, [r4, #12]
 8003806:	d106      	bne.n	8003816 <__sflush_r+0x62>
 8003808:	6829      	ldr	r1, [r5, #0]
 800380a:	291d      	cmp	r1, #29
 800380c:	d82c      	bhi.n	8003868 <__sflush_r+0xb4>
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <__sflush_r+0x100>)
 8003810:	40ca      	lsrs	r2, r1
 8003812:	07d6      	lsls	r6, r2, #31
 8003814:	d528      	bpl.n	8003868 <__sflush_r+0xb4>
 8003816:	2200      	movs	r2, #0
 8003818:	6062      	str	r2, [r4, #4]
 800381a:	6922      	ldr	r2, [r4, #16]
 800381c:	04d9      	lsls	r1, r3, #19
 800381e:	6022      	str	r2, [r4, #0]
 8003820:	d504      	bpl.n	800382c <__sflush_r+0x78>
 8003822:	1c42      	adds	r2, r0, #1
 8003824:	d101      	bne.n	800382a <__sflush_r+0x76>
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	b903      	cbnz	r3, 800382c <__sflush_r+0x78>
 800382a:	6560      	str	r0, [r4, #84]	; 0x54
 800382c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800382e:	602f      	str	r7, [r5, #0]
 8003830:	2900      	cmp	r1, #0
 8003832:	d0cb      	beq.n	80037cc <__sflush_r+0x18>
 8003834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003838:	4299      	cmp	r1, r3
 800383a:	d002      	beq.n	8003842 <__sflush_r+0x8e>
 800383c:	4628      	mov	r0, r5
 800383e:	f000 f9dd 	bl	8003bfc <_free_r>
 8003842:	2000      	movs	r0, #0
 8003844:	6360      	str	r0, [r4, #52]	; 0x34
 8003846:	e7c2      	b.n	80037ce <__sflush_r+0x1a>
 8003848:	6a21      	ldr	r1, [r4, #32]
 800384a:	2301      	movs	r3, #1
 800384c:	4628      	mov	r0, r5
 800384e:	47b0      	blx	r6
 8003850:	1c41      	adds	r1, r0, #1
 8003852:	d1c7      	bne.n	80037e4 <__sflush_r+0x30>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0c4      	beq.n	80037e4 <__sflush_r+0x30>
 800385a:	2b1d      	cmp	r3, #29
 800385c:	d001      	beq.n	8003862 <__sflush_r+0xae>
 800385e:	2b16      	cmp	r3, #22
 8003860:	d101      	bne.n	8003866 <__sflush_r+0xb2>
 8003862:	602f      	str	r7, [r5, #0]
 8003864:	e7b2      	b.n	80037cc <__sflush_r+0x18>
 8003866:	89a3      	ldrh	r3, [r4, #12]
 8003868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386c:	81a3      	strh	r3, [r4, #12]
 800386e:	e7ae      	b.n	80037ce <__sflush_r+0x1a>
 8003870:	690f      	ldr	r7, [r1, #16]
 8003872:	2f00      	cmp	r7, #0
 8003874:	d0aa      	beq.n	80037cc <__sflush_r+0x18>
 8003876:	0793      	lsls	r3, r2, #30
 8003878:	bf18      	it	ne
 800387a:	2300      	movne	r3, #0
 800387c:	680e      	ldr	r6, [r1, #0]
 800387e:	bf08      	it	eq
 8003880:	694b      	ldreq	r3, [r1, #20]
 8003882:	1bf6      	subs	r6, r6, r7
 8003884:	600f      	str	r7, [r1, #0]
 8003886:	608b      	str	r3, [r1, #8]
 8003888:	2e00      	cmp	r6, #0
 800388a:	dd9f      	ble.n	80037cc <__sflush_r+0x18>
 800388c:	4633      	mov	r3, r6
 800388e:	463a      	mov	r2, r7
 8003890:	4628      	mov	r0, r5
 8003892:	6a21      	ldr	r1, [r4, #32]
 8003894:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003898:	47e0      	blx	ip
 800389a:	2800      	cmp	r0, #0
 800389c:	dc06      	bgt.n	80038ac <__sflush_r+0xf8>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	f04f 30ff 	mov.w	r0, #4294967295
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	e790      	b.n	80037ce <__sflush_r+0x1a>
 80038ac:	4407      	add	r7, r0
 80038ae:	1a36      	subs	r6, r6, r0
 80038b0:	e7ea      	b.n	8003888 <__sflush_r+0xd4>
 80038b2:	bf00      	nop
 80038b4:	20400001 	.word	0x20400001

080038b8 <_fflush_r>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	690b      	ldr	r3, [r1, #16]
 80038bc:	4605      	mov	r5, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	b913      	cbnz	r3, 80038c8 <_fflush_r+0x10>
 80038c2:	2500      	movs	r5, #0
 80038c4:	4628      	mov	r0, r5
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	b118      	cbz	r0, 80038d2 <_fflush_r+0x1a>
 80038ca:	6983      	ldr	r3, [r0, #24]
 80038cc:	b90b      	cbnz	r3, 80038d2 <_fflush_r+0x1a>
 80038ce:	f000 f887 	bl	80039e0 <__sinit>
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <_fflush_r+0x6c>)
 80038d4:	429c      	cmp	r4, r3
 80038d6:	d11b      	bne.n	8003910 <_fflush_r+0x58>
 80038d8:	686c      	ldr	r4, [r5, #4]
 80038da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <_fflush_r+0xa>
 80038e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038e4:	07d0      	lsls	r0, r2, #31
 80038e6:	d404      	bmi.n	80038f2 <_fflush_r+0x3a>
 80038e8:	0599      	lsls	r1, r3, #22
 80038ea:	d402      	bmi.n	80038f2 <_fflush_r+0x3a>
 80038ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ee:	f000 f915 	bl	8003b1c <__retarget_lock_acquire_recursive>
 80038f2:	4628      	mov	r0, r5
 80038f4:	4621      	mov	r1, r4
 80038f6:	f7ff ff5d 	bl	80037b4 <__sflush_r>
 80038fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038fc:	4605      	mov	r5, r0
 80038fe:	07da      	lsls	r2, r3, #31
 8003900:	d4e0      	bmi.n	80038c4 <_fflush_r+0xc>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	059b      	lsls	r3, r3, #22
 8003906:	d4dd      	bmi.n	80038c4 <_fflush_r+0xc>
 8003908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390a:	f000 f908 	bl	8003b1e <__retarget_lock_release_recursive>
 800390e:	e7d9      	b.n	80038c4 <_fflush_r+0xc>
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <_fflush_r+0x70>)
 8003912:	429c      	cmp	r4, r3
 8003914:	d101      	bne.n	800391a <_fflush_r+0x62>
 8003916:	68ac      	ldr	r4, [r5, #8]
 8003918:	e7df      	b.n	80038da <_fflush_r+0x22>
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <_fflush_r+0x74>)
 800391c:	429c      	cmp	r4, r3
 800391e:	bf08      	it	eq
 8003920:	68ec      	ldreq	r4, [r5, #12]
 8003922:	e7da      	b.n	80038da <_fflush_r+0x22>
 8003924:	080045d8 	.word	0x080045d8
 8003928:	080045f8 	.word	0x080045f8
 800392c:	080045b8 	.word	0x080045b8

08003930 <std>:
 8003930:	2300      	movs	r3, #0
 8003932:	b510      	push	{r4, lr}
 8003934:	4604      	mov	r4, r0
 8003936:	e9c0 3300 	strd	r3, r3, [r0]
 800393a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800393e:	6083      	str	r3, [r0, #8]
 8003940:	8181      	strh	r1, [r0, #12]
 8003942:	6643      	str	r3, [r0, #100]	; 0x64
 8003944:	81c2      	strh	r2, [r0, #14]
 8003946:	6183      	str	r3, [r0, #24]
 8003948:	4619      	mov	r1, r3
 800394a:	2208      	movs	r2, #8
 800394c:	305c      	adds	r0, #92	; 0x5c
 800394e:	f7ff fd15 	bl	800337c <memset>
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <std+0x38>)
 8003954:	6224      	str	r4, [r4, #32]
 8003956:	6263      	str	r3, [r4, #36]	; 0x24
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <std+0x3c>)
 800395a:	62a3      	str	r3, [r4, #40]	; 0x28
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <std+0x40>)
 800395e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003960:	4b04      	ldr	r3, [pc, #16]	; (8003974 <std+0x44>)
 8003962:	6323      	str	r3, [r4, #48]	; 0x30
 8003964:	bd10      	pop	{r4, pc}
 8003966:	bf00      	nop
 8003968:	080043b1 	.word	0x080043b1
 800396c:	080043d3 	.word	0x080043d3
 8003970:	0800440b 	.word	0x0800440b
 8003974:	0800442f 	.word	0x0800442f

08003978 <_cleanup_r>:
 8003978:	4901      	ldr	r1, [pc, #4]	; (8003980 <_cleanup_r+0x8>)
 800397a:	f000 b8af 	b.w	8003adc <_fwalk_reent>
 800397e:	bf00      	nop
 8003980:	080038b9 	.word	0x080038b9

08003984 <__sfmoreglue>:
 8003984:	2268      	movs	r2, #104	; 0x68
 8003986:	b570      	push	{r4, r5, r6, lr}
 8003988:	1e4d      	subs	r5, r1, #1
 800398a:	4355      	muls	r5, r2
 800398c:	460e      	mov	r6, r1
 800398e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003992:	f000 f99b 	bl	8003ccc <_malloc_r>
 8003996:	4604      	mov	r4, r0
 8003998:	b140      	cbz	r0, 80039ac <__sfmoreglue+0x28>
 800399a:	2100      	movs	r1, #0
 800399c:	e9c0 1600 	strd	r1, r6, [r0]
 80039a0:	300c      	adds	r0, #12
 80039a2:	60a0      	str	r0, [r4, #8]
 80039a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039a8:	f7ff fce8 	bl	800337c <memset>
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd70      	pop	{r4, r5, r6, pc}

080039b0 <__sfp_lock_acquire>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__sfp_lock_acquire+0x8>)
 80039b2:	f000 b8b3 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039b6:	bf00      	nop
 80039b8:	2000017d 	.word	0x2000017d

080039bc <__sfp_lock_release>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__sfp_lock_release+0x8>)
 80039be:	f000 b8ae 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039c2:	bf00      	nop
 80039c4:	2000017d 	.word	0x2000017d

080039c8 <__sinit_lock_acquire>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__sinit_lock_acquire+0x8>)
 80039ca:	f000 b8a7 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	2000017e 	.word	0x2000017e

080039d4 <__sinit_lock_release>:
 80039d4:	4801      	ldr	r0, [pc, #4]	; (80039dc <__sinit_lock_release+0x8>)
 80039d6:	f000 b8a2 	b.w	8003b1e <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	2000017e 	.word	0x2000017e

080039e0 <__sinit>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f7ff fff0 	bl	80039c8 <__sinit_lock_acquire>
 80039e8:	69a3      	ldr	r3, [r4, #24]
 80039ea:	b11b      	cbz	r3, 80039f4 <__sinit+0x14>
 80039ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039f0:	f7ff bff0 	b.w	80039d4 <__sinit_lock_release>
 80039f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039f8:	6523      	str	r3, [r4, #80]	; 0x50
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <__sinit+0x68>)
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <__sinit+0x6c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a02:	42a3      	cmp	r3, r4
 8003a04:	bf08      	it	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	bf08      	it	eq
 8003a0c:	61a3      	streq	r3, [r4, #24]
 8003a0e:	f000 f81f 	bl	8003a50 <__sfp>
 8003a12:	6060      	str	r0, [r4, #4]
 8003a14:	4620      	mov	r0, r4
 8003a16:	f000 f81b 	bl	8003a50 <__sfp>
 8003a1a:	60a0      	str	r0, [r4, #8]
 8003a1c:	4620      	mov	r0, r4
 8003a1e:	f000 f817 	bl	8003a50 <__sfp>
 8003a22:	2200      	movs	r2, #0
 8003a24:	2104      	movs	r1, #4
 8003a26:	60e0      	str	r0, [r4, #12]
 8003a28:	6860      	ldr	r0, [r4, #4]
 8003a2a:	f7ff ff81 	bl	8003930 <std>
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2109      	movs	r1, #9
 8003a32:	68a0      	ldr	r0, [r4, #8]
 8003a34:	f7ff ff7c 	bl	8003930 <std>
 8003a38:	2202      	movs	r2, #2
 8003a3a:	2112      	movs	r1, #18
 8003a3c:	68e0      	ldr	r0, [r4, #12]
 8003a3e:	f7ff ff77 	bl	8003930 <std>
 8003a42:	2301      	movs	r3, #1
 8003a44:	61a3      	str	r3, [r4, #24]
 8003a46:	e7d1      	b.n	80039ec <__sinit+0xc>
 8003a48:	080045b4 	.word	0x080045b4
 8003a4c:	08003979 	.word	0x08003979

08003a50 <__sfp>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	4607      	mov	r7, r0
 8003a54:	f7ff ffac 	bl	80039b0 <__sfp_lock_acquire>
 8003a58:	4b1e      	ldr	r3, [pc, #120]	; (8003ad4 <__sfp+0x84>)
 8003a5a:	681e      	ldr	r6, [r3, #0]
 8003a5c:	69b3      	ldr	r3, [r6, #24]
 8003a5e:	b913      	cbnz	r3, 8003a66 <__sfp+0x16>
 8003a60:	4630      	mov	r0, r6
 8003a62:	f7ff ffbd 	bl	80039e0 <__sinit>
 8003a66:	3648      	adds	r6, #72	; 0x48
 8003a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	d503      	bpl.n	8003a78 <__sfp+0x28>
 8003a70:	6833      	ldr	r3, [r6, #0]
 8003a72:	b30b      	cbz	r3, 8003ab8 <__sfp+0x68>
 8003a74:	6836      	ldr	r6, [r6, #0]
 8003a76:	e7f7      	b.n	8003a68 <__sfp+0x18>
 8003a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a7c:	b9d5      	cbnz	r5, 8003ab4 <__sfp+0x64>
 8003a7e:	4b16      	ldr	r3, [pc, #88]	; (8003ad8 <__sfp+0x88>)
 8003a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a84:	60e3      	str	r3, [r4, #12]
 8003a86:	6665      	str	r5, [r4, #100]	; 0x64
 8003a88:	f000 f847 	bl	8003b1a <__retarget_lock_init_recursive>
 8003a8c:	f7ff ff96 	bl	80039bc <__sfp_lock_release>
 8003a90:	2208      	movs	r2, #8
 8003a92:	4629      	mov	r1, r5
 8003a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a9c:	6025      	str	r5, [r4, #0]
 8003a9e:	61a5      	str	r5, [r4, #24]
 8003aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003aa4:	f7ff fc6a 	bl	800337c <memset>
 8003aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ab4:	3468      	adds	r4, #104	; 0x68
 8003ab6:	e7d9      	b.n	8003a6c <__sfp+0x1c>
 8003ab8:	2104      	movs	r1, #4
 8003aba:	4638      	mov	r0, r7
 8003abc:	f7ff ff62 	bl	8003984 <__sfmoreglue>
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	6030      	str	r0, [r6, #0]
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d1d5      	bne.n	8003a74 <__sfp+0x24>
 8003ac8:	f7ff ff78 	bl	80039bc <__sfp_lock_release>
 8003acc:	230c      	movs	r3, #12
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	e7ee      	b.n	8003ab0 <__sfp+0x60>
 8003ad2:	bf00      	nop
 8003ad4:	080045b4 	.word	0x080045b4
 8003ad8:	ffff0001 	.word	0xffff0001

08003adc <_fwalk_reent>:
 8003adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	4688      	mov	r8, r1
 8003ae4:	2700      	movs	r7, #0
 8003ae6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003aee:	f1b9 0901 	subs.w	r9, r9, #1
 8003af2:	d505      	bpl.n	8003b00 <_fwalk_reent+0x24>
 8003af4:	6824      	ldr	r4, [r4, #0]
 8003af6:	2c00      	cmp	r4, #0
 8003af8:	d1f7      	bne.n	8003aea <_fwalk_reent+0xe>
 8003afa:	4638      	mov	r0, r7
 8003afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b00:	89ab      	ldrh	r3, [r5, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d907      	bls.n	8003b16 <_fwalk_reent+0x3a>
 8003b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	d003      	beq.n	8003b16 <_fwalk_reent+0x3a>
 8003b0e:	4629      	mov	r1, r5
 8003b10:	4630      	mov	r0, r6
 8003b12:	47c0      	blx	r8
 8003b14:	4307      	orrs	r7, r0
 8003b16:	3568      	adds	r5, #104	; 0x68
 8003b18:	e7e9      	b.n	8003aee <_fwalk_reent+0x12>

08003b1a <__retarget_lock_init_recursive>:
 8003b1a:	4770      	bx	lr

08003b1c <__retarget_lock_acquire_recursive>:
 8003b1c:	4770      	bx	lr

08003b1e <__retarget_lock_release_recursive>:
 8003b1e:	4770      	bx	lr

08003b20 <__swhatbuf_r>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	460e      	mov	r6, r1
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	4614      	mov	r4, r2
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	b096      	sub	sp, #88	; 0x58
 8003b30:	da08      	bge.n	8003b44 <__swhatbuf_r+0x24>
 8003b32:	2200      	movs	r2, #0
 8003b34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b38:	602a      	str	r2, [r5, #0]
 8003b3a:	061a      	lsls	r2, r3, #24
 8003b3c:	d410      	bmi.n	8003b60 <__swhatbuf_r+0x40>
 8003b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b42:	e00e      	b.n	8003b62 <__swhatbuf_r+0x42>
 8003b44:	466a      	mov	r2, sp
 8003b46:	f000 fc99 	bl	800447c <_fstat_r>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	dbf1      	blt.n	8003b32 <__swhatbuf_r+0x12>
 8003b4e:	9a01      	ldr	r2, [sp, #4]
 8003b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b58:	425a      	negs	r2, r3
 8003b5a:	415a      	adcs	r2, r3
 8003b5c:	602a      	str	r2, [r5, #0]
 8003b5e:	e7ee      	b.n	8003b3e <__swhatbuf_r+0x1e>
 8003b60:	2340      	movs	r3, #64	; 0x40
 8003b62:	2000      	movs	r0, #0
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	b016      	add	sp, #88	; 0x58
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b6c <__smakebuf_r>:
 8003b6c:	898b      	ldrh	r3, [r1, #12]
 8003b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b70:	079d      	lsls	r5, r3, #30
 8003b72:	4606      	mov	r6, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	d507      	bpl.n	8003b88 <__smakebuf_r+0x1c>
 8003b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	6123      	str	r3, [r4, #16]
 8003b80:	2301      	movs	r3, #1
 8003b82:	6163      	str	r3, [r4, #20]
 8003b84:	b002      	add	sp, #8
 8003b86:	bd70      	pop	{r4, r5, r6, pc}
 8003b88:	466a      	mov	r2, sp
 8003b8a:	ab01      	add	r3, sp, #4
 8003b8c:	f7ff ffc8 	bl	8003b20 <__swhatbuf_r>
 8003b90:	9900      	ldr	r1, [sp, #0]
 8003b92:	4605      	mov	r5, r0
 8003b94:	4630      	mov	r0, r6
 8003b96:	f000 f899 	bl	8003ccc <_malloc_r>
 8003b9a:	b948      	cbnz	r0, 8003bb0 <__smakebuf_r+0x44>
 8003b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ba0:	059a      	lsls	r2, r3, #22
 8003ba2:	d4ef      	bmi.n	8003b84 <__smakebuf_r+0x18>
 8003ba4:	f023 0303 	bic.w	r3, r3, #3
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	81a3      	strh	r3, [r4, #12]
 8003bae:	e7e3      	b.n	8003b78 <__smakebuf_r+0xc>
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <__smakebuf_r+0x7c>)
 8003bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	6020      	str	r0, [r4, #0]
 8003bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbc:	81a3      	strh	r3, [r4, #12]
 8003bbe:	9b00      	ldr	r3, [sp, #0]
 8003bc0:	6120      	str	r0, [r4, #16]
 8003bc2:	6163      	str	r3, [r4, #20]
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	b15b      	cbz	r3, 8003be0 <__smakebuf_r+0x74>
 8003bc8:	4630      	mov	r0, r6
 8003bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bce:	f000 fc67 	bl	80044a0 <_isatty_r>
 8003bd2:	b128      	cbz	r0, 8003be0 <__smakebuf_r+0x74>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	89a0      	ldrh	r0, [r4, #12]
 8003be2:	4305      	orrs	r5, r0
 8003be4:	81a5      	strh	r5, [r4, #12]
 8003be6:	e7cd      	b.n	8003b84 <__smakebuf_r+0x18>
 8003be8:	08003979 	.word	0x08003979

08003bec <malloc>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <malloc+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f000 b86b 	b.w	8003ccc <_malloc_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000010 	.word	0x20000010

08003bfc <_free_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4605      	mov	r5, r0
 8003c00:	2900      	cmp	r1, #0
 8003c02:	d040      	beq.n	8003c86 <_free_r+0x8a>
 8003c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c08:	1f0c      	subs	r4, r1, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bfb8      	it	lt
 8003c0e:	18e4      	addlt	r4, r4, r3
 8003c10:	f000 fc76 	bl	8004500 <__malloc_lock>
 8003c14:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <_free_r+0x8c>)
 8003c16:	6813      	ldr	r3, [r2, #0]
 8003c18:	b933      	cbnz	r3, 8003c28 <_free_r+0x2c>
 8003c1a:	6063      	str	r3, [r4, #4]
 8003c1c:	6014      	str	r4, [r2, #0]
 8003c1e:	4628      	mov	r0, r5
 8003c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c24:	f000 bc72 	b.w	800450c <__malloc_unlock>
 8003c28:	42a3      	cmp	r3, r4
 8003c2a:	d908      	bls.n	8003c3e <_free_r+0x42>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	1821      	adds	r1, r4, r0
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf01      	itttt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	1809      	addeq	r1, r1, r0
 8003c3a:	6021      	streq	r1, [r4, #0]
 8003c3c:	e7ed      	b.n	8003c1a <_free_r+0x1e>
 8003c3e:	461a      	mov	r2, r3
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b10b      	cbz	r3, 8003c48 <_free_r+0x4c>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d9fa      	bls.n	8003c3e <_free_r+0x42>
 8003c48:	6811      	ldr	r1, [r2, #0]
 8003c4a:	1850      	adds	r0, r2, r1
 8003c4c:	42a0      	cmp	r0, r4
 8003c4e:	d10b      	bne.n	8003c68 <_free_r+0x6c>
 8003c50:	6820      	ldr	r0, [r4, #0]
 8003c52:	4401      	add	r1, r0
 8003c54:	1850      	adds	r0, r2, r1
 8003c56:	4283      	cmp	r3, r0
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	d1e0      	bne.n	8003c1e <_free_r+0x22>
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4401      	add	r1, r0
 8003c62:	6011      	str	r1, [r2, #0]
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	e7da      	b.n	8003c1e <_free_r+0x22>
 8003c68:	d902      	bls.n	8003c70 <_free_r+0x74>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	602b      	str	r3, [r5, #0]
 8003c6e:	e7d6      	b.n	8003c1e <_free_r+0x22>
 8003c70:	6820      	ldr	r0, [r4, #0]
 8003c72:	1821      	adds	r1, r4, r0
 8003c74:	428b      	cmp	r3, r1
 8003c76:	bf01      	itttt	eq
 8003c78:	6819      	ldreq	r1, [r3, #0]
 8003c7a:	685b      	ldreq	r3, [r3, #4]
 8003c7c:	1809      	addeq	r1, r1, r0
 8003c7e:	6021      	streq	r1, [r4, #0]
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	6054      	str	r4, [r2, #4]
 8003c84:	e7cb      	b.n	8003c1e <_free_r+0x22>
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	20000180 	.word	0x20000180

08003c8c <sbrk_aligned>:
 8003c8c:	b570      	push	{r4, r5, r6, lr}
 8003c8e:	4e0e      	ldr	r6, [pc, #56]	; (8003cc8 <sbrk_aligned+0x3c>)
 8003c90:	460c      	mov	r4, r1
 8003c92:	6831      	ldr	r1, [r6, #0]
 8003c94:	4605      	mov	r5, r0
 8003c96:	b911      	cbnz	r1, 8003c9e <sbrk_aligned+0x12>
 8003c98:	f000 fb7a 	bl	8004390 <_sbrk_r>
 8003c9c:	6030      	str	r0, [r6, #0]
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 fb75 	bl	8004390 <_sbrk_r>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d00a      	beq.n	8003cc0 <sbrk_aligned+0x34>
 8003caa:	1cc4      	adds	r4, r0, #3
 8003cac:	f024 0403 	bic.w	r4, r4, #3
 8003cb0:	42a0      	cmp	r0, r4
 8003cb2:	d007      	beq.n	8003cc4 <sbrk_aligned+0x38>
 8003cb4:	1a21      	subs	r1, r4, r0
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	f000 fb6a 	bl	8004390 <_sbrk_r>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d101      	bne.n	8003cc4 <sbrk_aligned+0x38>
 8003cc0:	f04f 34ff 	mov.w	r4, #4294967295
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	20000184 	.word	0x20000184

08003ccc <_malloc_r>:
 8003ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd0:	1ccd      	adds	r5, r1, #3
 8003cd2:	f025 0503 	bic.w	r5, r5, #3
 8003cd6:	3508      	adds	r5, #8
 8003cd8:	2d0c      	cmp	r5, #12
 8003cda:	bf38      	it	cc
 8003cdc:	250c      	movcc	r5, #12
 8003cde:	2d00      	cmp	r5, #0
 8003ce0:	4607      	mov	r7, r0
 8003ce2:	db01      	blt.n	8003ce8 <_malloc_r+0x1c>
 8003ce4:	42a9      	cmp	r1, r5
 8003ce6:	d905      	bls.n	8003cf4 <_malloc_r+0x28>
 8003ce8:	230c      	movs	r3, #12
 8003cea:	2600      	movs	r6, #0
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf4:	4e2e      	ldr	r6, [pc, #184]	; (8003db0 <_malloc_r+0xe4>)
 8003cf6:	f000 fc03 	bl	8004500 <__malloc_lock>
 8003cfa:	6833      	ldr	r3, [r6, #0]
 8003cfc:	461c      	mov	r4, r3
 8003cfe:	bb34      	cbnz	r4, 8003d4e <_malloc_r+0x82>
 8003d00:	4629      	mov	r1, r5
 8003d02:	4638      	mov	r0, r7
 8003d04:	f7ff ffc2 	bl	8003c8c <sbrk_aligned>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	d14d      	bne.n	8003daa <_malloc_r+0xde>
 8003d0e:	6834      	ldr	r4, [r6, #0]
 8003d10:	4626      	mov	r6, r4
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d140      	bne.n	8003d98 <_malloc_r+0xcc>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	eb04 0803 	add.w	r8, r4, r3
 8003d20:	f000 fb36 	bl	8004390 <_sbrk_r>
 8003d24:	4580      	cmp	r8, r0
 8003d26:	d13a      	bne.n	8003d9e <_malloc_r+0xd2>
 8003d28:	6821      	ldr	r1, [r4, #0]
 8003d2a:	3503      	adds	r5, #3
 8003d2c:	1a6d      	subs	r5, r5, r1
 8003d2e:	f025 0503 	bic.w	r5, r5, #3
 8003d32:	3508      	adds	r5, #8
 8003d34:	2d0c      	cmp	r5, #12
 8003d36:	bf38      	it	cc
 8003d38:	250c      	movcc	r5, #12
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7ff ffa5 	bl	8003c8c <sbrk_aligned>
 8003d42:	3001      	adds	r0, #1
 8003d44:	d02b      	beq.n	8003d9e <_malloc_r+0xd2>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	442b      	add	r3, r5
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	e00e      	b.n	8003d6c <_malloc_r+0xa0>
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	1b52      	subs	r2, r2, r5
 8003d52:	d41e      	bmi.n	8003d92 <_malloc_r+0xc6>
 8003d54:	2a0b      	cmp	r2, #11
 8003d56:	d916      	bls.n	8003d86 <_malloc_r+0xba>
 8003d58:	1961      	adds	r1, r4, r5
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	6025      	str	r5, [r4, #0]
 8003d5e:	bf18      	it	ne
 8003d60:	6059      	strne	r1, [r3, #4]
 8003d62:	6863      	ldr	r3, [r4, #4]
 8003d64:	bf08      	it	eq
 8003d66:	6031      	streq	r1, [r6, #0]
 8003d68:	5162      	str	r2, [r4, r5]
 8003d6a:	604b      	str	r3, [r1, #4]
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f104 060b 	add.w	r6, r4, #11
 8003d72:	f000 fbcb 	bl	800450c <__malloc_unlock>
 8003d76:	f026 0607 	bic.w	r6, r6, #7
 8003d7a:	1d23      	adds	r3, r4, #4
 8003d7c:	1af2      	subs	r2, r6, r3
 8003d7e:	d0b6      	beq.n	8003cee <_malloc_r+0x22>
 8003d80:	1b9b      	subs	r3, r3, r6
 8003d82:	50a3      	str	r3, [r4, r2]
 8003d84:	e7b3      	b.n	8003cee <_malloc_r+0x22>
 8003d86:	6862      	ldr	r2, [r4, #4]
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	bf0c      	ite	eq
 8003d8c:	6032      	streq	r2, [r6, #0]
 8003d8e:	605a      	strne	r2, [r3, #4]
 8003d90:	e7ec      	b.n	8003d6c <_malloc_r+0xa0>
 8003d92:	4623      	mov	r3, r4
 8003d94:	6864      	ldr	r4, [r4, #4]
 8003d96:	e7b2      	b.n	8003cfe <_malloc_r+0x32>
 8003d98:	4634      	mov	r4, r6
 8003d9a:	6876      	ldr	r6, [r6, #4]
 8003d9c:	e7b9      	b.n	8003d12 <_malloc_r+0x46>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	4638      	mov	r0, r7
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	f000 fbb2 	bl	800450c <__malloc_unlock>
 8003da8:	e7a1      	b.n	8003cee <_malloc_r+0x22>
 8003daa:	6025      	str	r5, [r4, #0]
 8003dac:	e7de      	b.n	8003d6c <_malloc_r+0xa0>
 8003dae:	bf00      	nop
 8003db0:	20000180 	.word	0x20000180

08003db4 <__sfputc_r>:
 8003db4:	6893      	ldr	r3, [r2, #8]
 8003db6:	b410      	push	{r4}
 8003db8:	3b01      	subs	r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	6093      	str	r3, [r2, #8]
 8003dbe:	da07      	bge.n	8003dd0 <__sfputc_r+0x1c>
 8003dc0:	6994      	ldr	r4, [r2, #24]
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	db01      	blt.n	8003dca <__sfputc_r+0x16>
 8003dc6:	290a      	cmp	r1, #10
 8003dc8:	d102      	bne.n	8003dd0 <__sfputc_r+0x1c>
 8003dca:	bc10      	pop	{r4}
 8003dcc:	f7ff bc32 	b.w	8003634 <__swbuf_r>
 8003dd0:	6813      	ldr	r3, [r2, #0]
 8003dd2:	1c58      	adds	r0, r3, #1
 8003dd4:	6010      	str	r0, [r2, #0]
 8003dd6:	7019      	strb	r1, [r3, #0]
 8003dd8:	4608      	mov	r0, r1
 8003dda:	bc10      	pop	{r4}
 8003ddc:	4770      	bx	lr

08003dde <__sfputs_r>:
 8003dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	4614      	mov	r4, r2
 8003de6:	18d5      	adds	r5, r2, r3
 8003de8:	42ac      	cmp	r4, r5
 8003dea:	d101      	bne.n	8003df0 <__sfputs_r+0x12>
 8003dec:	2000      	movs	r0, #0
 8003dee:	e007      	b.n	8003e00 <__sfputs_r+0x22>
 8003df0:	463a      	mov	r2, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df8:	f7ff ffdc 	bl	8003db4 <__sfputc_r>
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d1f3      	bne.n	8003de8 <__sfputs_r+0xa>
 8003e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e04 <_vfiprintf_r>:
 8003e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e08:	460d      	mov	r5, r1
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	4698      	mov	r8, r3
 8003e0e:	4606      	mov	r6, r0
 8003e10:	b09d      	sub	sp, #116	; 0x74
 8003e12:	b118      	cbz	r0, 8003e1c <_vfiprintf_r+0x18>
 8003e14:	6983      	ldr	r3, [r0, #24]
 8003e16:	b90b      	cbnz	r3, 8003e1c <_vfiprintf_r+0x18>
 8003e18:	f7ff fde2 	bl	80039e0 <__sinit>
 8003e1c:	4b89      	ldr	r3, [pc, #548]	; (8004044 <_vfiprintf_r+0x240>)
 8003e1e:	429d      	cmp	r5, r3
 8003e20:	d11b      	bne.n	8003e5a <_vfiprintf_r+0x56>
 8003e22:	6875      	ldr	r5, [r6, #4]
 8003e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e26:	07d9      	lsls	r1, r3, #31
 8003e28:	d405      	bmi.n	8003e36 <_vfiprintf_r+0x32>
 8003e2a:	89ab      	ldrh	r3, [r5, #12]
 8003e2c:	059a      	lsls	r2, r3, #22
 8003e2e:	d402      	bmi.n	8003e36 <_vfiprintf_r+0x32>
 8003e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e32:	f7ff fe73 	bl	8003b1c <__retarget_lock_acquire_recursive>
 8003e36:	89ab      	ldrh	r3, [r5, #12]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	d501      	bpl.n	8003e40 <_vfiprintf_r+0x3c>
 8003e3c:	692b      	ldr	r3, [r5, #16]
 8003e3e:	b9eb      	cbnz	r3, 8003e7c <_vfiprintf_r+0x78>
 8003e40:	4629      	mov	r1, r5
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7ff fc48 	bl	80036d8 <__swsetup_r>
 8003e48:	b1c0      	cbz	r0, 8003e7c <_vfiprintf_r+0x78>
 8003e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e4c:	07dc      	lsls	r4, r3, #31
 8003e4e:	d50e      	bpl.n	8003e6e <_vfiprintf_r+0x6a>
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	b01d      	add	sp, #116	; 0x74
 8003e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5a:	4b7b      	ldr	r3, [pc, #492]	; (8004048 <_vfiprintf_r+0x244>)
 8003e5c:	429d      	cmp	r5, r3
 8003e5e:	d101      	bne.n	8003e64 <_vfiprintf_r+0x60>
 8003e60:	68b5      	ldr	r5, [r6, #8]
 8003e62:	e7df      	b.n	8003e24 <_vfiprintf_r+0x20>
 8003e64:	4b79      	ldr	r3, [pc, #484]	; (800404c <_vfiprintf_r+0x248>)
 8003e66:	429d      	cmp	r5, r3
 8003e68:	bf08      	it	eq
 8003e6a:	68f5      	ldreq	r5, [r6, #12]
 8003e6c:	e7da      	b.n	8003e24 <_vfiprintf_r+0x20>
 8003e6e:	89ab      	ldrh	r3, [r5, #12]
 8003e70:	0598      	lsls	r0, r3, #22
 8003e72:	d4ed      	bmi.n	8003e50 <_vfiprintf_r+0x4c>
 8003e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e76:	f7ff fe52 	bl	8003b1e <__retarget_lock_release_recursive>
 8003e7a:	e7e9      	b.n	8003e50 <_vfiprintf_r+0x4c>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e80:	2320      	movs	r3, #32
 8003e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e86:	2330      	movs	r3, #48	; 0x30
 8003e88:	f04f 0901 	mov.w	r9, #1
 8003e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004050 <_vfiprintf_r+0x24c>
 8003e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e98:	4623      	mov	r3, r4
 8003e9a:	469a      	mov	sl, r3
 8003e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ea0:	b10a      	cbz	r2, 8003ea6 <_vfiprintf_r+0xa2>
 8003ea2:	2a25      	cmp	r2, #37	; 0x25
 8003ea4:	d1f9      	bne.n	8003e9a <_vfiprintf_r+0x96>
 8003ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8003eaa:	d00b      	beq.n	8003ec4 <_vfiprintf_r+0xc0>
 8003eac:	465b      	mov	r3, fp
 8003eae:	4622      	mov	r2, r4
 8003eb0:	4629      	mov	r1, r5
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f7ff ff93 	bl	8003dde <__sfputs_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	f000 80aa 	beq.w	8004012 <_vfiprintf_r+0x20e>
 8003ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ec0:	445a      	add	r2, fp
 8003ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80a2 	beq.w	8004012 <_vfiprintf_r+0x20e>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed8:	f10a 0a01 	add.w	sl, sl, #1
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	9307      	str	r3, [sp, #28]
 8003ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8003ee6:	4654      	mov	r4, sl
 8003ee8:	2205      	movs	r2, #5
 8003eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eee:	4858      	ldr	r0, [pc, #352]	; (8004050 <_vfiprintf_r+0x24c>)
 8003ef0:	f000 faf8 	bl	80044e4 <memchr>
 8003ef4:	9a04      	ldr	r2, [sp, #16]
 8003ef6:	b9d8      	cbnz	r0, 8003f30 <_vfiprintf_r+0x12c>
 8003ef8:	06d1      	lsls	r1, r2, #27
 8003efa:	bf44      	itt	mi
 8003efc:	2320      	movmi	r3, #32
 8003efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f02:	0713      	lsls	r3, r2, #28
 8003f04:	bf44      	itt	mi
 8003f06:	232b      	movmi	r3, #43	; 0x2b
 8003f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f10:	2b2a      	cmp	r3, #42	; 0x2a
 8003f12:	d015      	beq.n	8003f40 <_vfiprintf_r+0x13c>
 8003f14:	4654      	mov	r4, sl
 8003f16:	2000      	movs	r0, #0
 8003f18:	f04f 0c0a 	mov.w	ip, #10
 8003f1c:	9a07      	ldr	r2, [sp, #28]
 8003f1e:	4621      	mov	r1, r4
 8003f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f24:	3b30      	subs	r3, #48	; 0x30
 8003f26:	2b09      	cmp	r3, #9
 8003f28:	d94e      	bls.n	8003fc8 <_vfiprintf_r+0x1c4>
 8003f2a:	b1b0      	cbz	r0, 8003f5a <_vfiprintf_r+0x156>
 8003f2c:	9207      	str	r2, [sp, #28]
 8003f2e:	e014      	b.n	8003f5a <_vfiprintf_r+0x156>
 8003f30:	eba0 0308 	sub.w	r3, r0, r8
 8003f34:	fa09 f303 	lsl.w	r3, r9, r3
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	46a2      	mov	sl, r4
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	e7d2      	b.n	8003ee6 <_vfiprintf_r+0xe2>
 8003f40:	9b03      	ldr	r3, [sp, #12]
 8003f42:	1d19      	adds	r1, r3, #4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	9103      	str	r1, [sp, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bfbb      	ittet	lt
 8003f4c:	425b      	neglt	r3, r3
 8003f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f52:	9307      	strge	r3, [sp, #28]
 8003f54:	9307      	strlt	r3, [sp, #28]
 8003f56:	bfb8      	it	lt
 8003f58:	9204      	strlt	r2, [sp, #16]
 8003f5a:	7823      	ldrb	r3, [r4, #0]
 8003f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f5e:	d10c      	bne.n	8003f7a <_vfiprintf_r+0x176>
 8003f60:	7863      	ldrb	r3, [r4, #1]
 8003f62:	2b2a      	cmp	r3, #42	; 0x2a
 8003f64:	d135      	bne.n	8003fd2 <_vfiprintf_r+0x1ce>
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	3402      	adds	r4, #2
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9203      	str	r2, [sp, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bfb8      	it	lt
 8003f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f78:	9305      	str	r3, [sp, #20]
 8003f7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004054 <_vfiprintf_r+0x250>
 8003f7e:	2203      	movs	r2, #3
 8003f80:	4650      	mov	r0, sl
 8003f82:	7821      	ldrb	r1, [r4, #0]
 8003f84:	f000 faae 	bl	80044e4 <memchr>
 8003f88:	b140      	cbz	r0, 8003f9c <_vfiprintf_r+0x198>
 8003f8a:	2340      	movs	r3, #64	; 0x40
 8003f8c:	eba0 000a 	sub.w	r0, r0, sl
 8003f90:	fa03 f000 	lsl.w	r0, r3, r0
 8003f94:	9b04      	ldr	r3, [sp, #16]
 8003f96:	3401      	adds	r4, #1
 8003f98:	4303      	orrs	r3, r0
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	2206      	movs	r2, #6
 8003fa2:	482d      	ldr	r0, [pc, #180]	; (8004058 <_vfiprintf_r+0x254>)
 8003fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fa8:	f000 fa9c 	bl	80044e4 <memchr>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	d03f      	beq.n	8004030 <_vfiprintf_r+0x22c>
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	; (800405c <_vfiprintf_r+0x258>)
 8003fb2:	bb1b      	cbnz	r3, 8003ffc <_vfiprintf_r+0x1f8>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	3307      	adds	r3, #7
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	9303      	str	r3, [sp, #12]
 8003fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fc2:	443b      	add	r3, r7
 8003fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc6:	e767      	b.n	8003e98 <_vfiprintf_r+0x94>
 8003fc8:	460c      	mov	r4, r1
 8003fca:	2001      	movs	r0, #1
 8003fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd0:	e7a5      	b.n	8003f1e <_vfiprintf_r+0x11a>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f04f 0c0a 	mov.w	ip, #10
 8003fd8:	4619      	mov	r1, r3
 8003fda:	3401      	adds	r4, #1
 8003fdc:	9305      	str	r3, [sp, #20]
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fe4:	3a30      	subs	r2, #48	; 0x30
 8003fe6:	2a09      	cmp	r2, #9
 8003fe8:	d903      	bls.n	8003ff2 <_vfiprintf_r+0x1ee>
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0c5      	beq.n	8003f7a <_vfiprintf_r+0x176>
 8003fee:	9105      	str	r1, [sp, #20]
 8003ff0:	e7c3      	b.n	8003f7a <_vfiprintf_r+0x176>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ffa:	e7f0      	b.n	8003fde <_vfiprintf_r+0x1da>
 8003ffc:	ab03      	add	r3, sp, #12
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	462a      	mov	r2, r5
 8004002:	4630      	mov	r0, r6
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <_vfiprintf_r+0x25c>)
 8004006:	a904      	add	r1, sp, #16
 8004008:	f3af 8000 	nop.w
 800400c:	4607      	mov	r7, r0
 800400e:	1c78      	adds	r0, r7, #1
 8004010:	d1d6      	bne.n	8003fc0 <_vfiprintf_r+0x1bc>
 8004012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004014:	07d9      	lsls	r1, r3, #31
 8004016:	d405      	bmi.n	8004024 <_vfiprintf_r+0x220>
 8004018:	89ab      	ldrh	r3, [r5, #12]
 800401a:	059a      	lsls	r2, r3, #22
 800401c:	d402      	bmi.n	8004024 <_vfiprintf_r+0x220>
 800401e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004020:	f7ff fd7d 	bl	8003b1e <__retarget_lock_release_recursive>
 8004024:	89ab      	ldrh	r3, [r5, #12]
 8004026:	065b      	lsls	r3, r3, #25
 8004028:	f53f af12 	bmi.w	8003e50 <_vfiprintf_r+0x4c>
 800402c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800402e:	e711      	b.n	8003e54 <_vfiprintf_r+0x50>
 8004030:	ab03      	add	r3, sp, #12
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	462a      	mov	r2, r5
 8004036:	4630      	mov	r0, r6
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <_vfiprintf_r+0x25c>)
 800403a:	a904      	add	r1, sp, #16
 800403c:	f000 f882 	bl	8004144 <_printf_i>
 8004040:	e7e4      	b.n	800400c <_vfiprintf_r+0x208>
 8004042:	bf00      	nop
 8004044:	080045d8 	.word	0x080045d8
 8004048:	080045f8 	.word	0x080045f8
 800404c:	080045b8 	.word	0x080045b8
 8004050:	08004618 	.word	0x08004618
 8004054:	0800461e 	.word	0x0800461e
 8004058:	08004622 	.word	0x08004622
 800405c:	00000000 	.word	0x00000000
 8004060:	08003ddf 	.word	0x08003ddf

08004064 <_printf_common>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	4616      	mov	r6, r2
 800406a:	4699      	mov	r9, r3
 800406c:	688a      	ldr	r2, [r1, #8]
 800406e:	690b      	ldr	r3, [r1, #16]
 8004070:	4607      	mov	r7, r0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfb8      	it	lt
 8004076:	4613      	movlt	r3, r2
 8004078:	6033      	str	r3, [r6, #0]
 800407a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800407e:	460c      	mov	r4, r1
 8004080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004084:	b10a      	cbz	r2, 800408a <_printf_common+0x26>
 8004086:	3301      	adds	r3, #1
 8004088:	6033      	str	r3, [r6, #0]
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	0699      	lsls	r1, r3, #26
 800408e:	bf42      	ittt	mi
 8004090:	6833      	ldrmi	r3, [r6, #0]
 8004092:	3302      	addmi	r3, #2
 8004094:	6033      	strmi	r3, [r6, #0]
 8004096:	6825      	ldr	r5, [r4, #0]
 8004098:	f015 0506 	ands.w	r5, r5, #6
 800409c:	d106      	bne.n	80040ac <_printf_common+0x48>
 800409e:	f104 0a19 	add.w	sl, r4, #25
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	6832      	ldr	r2, [r6, #0]
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dc28      	bgt.n	80040fe <_printf_common+0x9a>
 80040ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040b0:	1e13      	subs	r3, r2, #0
 80040b2:	6822      	ldr	r2, [r4, #0]
 80040b4:	bf18      	it	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	0692      	lsls	r2, r2, #26
 80040ba:	d42d      	bmi.n	8004118 <_printf_common+0xb4>
 80040bc:	4649      	mov	r1, r9
 80040be:	4638      	mov	r0, r7
 80040c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040c4:	47c0      	blx	r8
 80040c6:	3001      	adds	r0, #1
 80040c8:	d020      	beq.n	800410c <_printf_common+0xa8>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	68e5      	ldr	r5, [r4, #12]
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf18      	it	ne
 80040d6:	2500      	movne	r5, #0
 80040d8:	6832      	ldr	r2, [r6, #0]
 80040da:	f04f 0600 	mov.w	r6, #0
 80040de:	68a3      	ldr	r3, [r4, #8]
 80040e0:	bf08      	it	eq
 80040e2:	1aad      	subeq	r5, r5, r2
 80040e4:	6922      	ldr	r2, [r4, #16]
 80040e6:	bf08      	it	eq
 80040e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfc4      	itt	gt
 80040f0:	1a9b      	subgt	r3, r3, r2
 80040f2:	18ed      	addgt	r5, r5, r3
 80040f4:	341a      	adds	r4, #26
 80040f6:	42b5      	cmp	r5, r6
 80040f8:	d11a      	bne.n	8004130 <_printf_common+0xcc>
 80040fa:	2000      	movs	r0, #0
 80040fc:	e008      	b.n	8004110 <_printf_common+0xac>
 80040fe:	2301      	movs	r3, #1
 8004100:	4652      	mov	r2, sl
 8004102:	4649      	mov	r1, r9
 8004104:	4638      	mov	r0, r7
 8004106:	47c0      	blx	r8
 8004108:	3001      	adds	r0, #1
 800410a:	d103      	bne.n	8004114 <_printf_common+0xb0>
 800410c:	f04f 30ff 	mov.w	r0, #4294967295
 8004110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004114:	3501      	adds	r5, #1
 8004116:	e7c4      	b.n	80040a2 <_printf_common+0x3e>
 8004118:	2030      	movs	r0, #48	; 0x30
 800411a:	18e1      	adds	r1, r4, r3
 800411c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004126:	4422      	add	r2, r4
 8004128:	3302      	adds	r3, #2
 800412a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800412e:	e7c5      	b.n	80040bc <_printf_common+0x58>
 8004130:	2301      	movs	r3, #1
 8004132:	4622      	mov	r2, r4
 8004134:	4649      	mov	r1, r9
 8004136:	4638      	mov	r0, r7
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d0e6      	beq.n	800410c <_printf_common+0xa8>
 800413e:	3601      	adds	r6, #1
 8004140:	e7d9      	b.n	80040f6 <_printf_common+0x92>
	...

08004144 <_printf_i>:
 8004144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	7e0f      	ldrb	r7, [r1, #24]
 800414a:	4691      	mov	r9, r2
 800414c:	2f78      	cmp	r7, #120	; 0x78
 800414e:	4680      	mov	r8, r0
 8004150:	460c      	mov	r4, r1
 8004152:	469a      	mov	sl, r3
 8004154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800415a:	d807      	bhi.n	800416c <_printf_i+0x28>
 800415c:	2f62      	cmp	r7, #98	; 0x62
 800415e:	d80a      	bhi.n	8004176 <_printf_i+0x32>
 8004160:	2f00      	cmp	r7, #0
 8004162:	f000 80d9 	beq.w	8004318 <_printf_i+0x1d4>
 8004166:	2f58      	cmp	r7, #88	; 0x58
 8004168:	f000 80a4 	beq.w	80042b4 <_printf_i+0x170>
 800416c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004174:	e03a      	b.n	80041ec <_printf_i+0xa8>
 8004176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800417a:	2b15      	cmp	r3, #21
 800417c:	d8f6      	bhi.n	800416c <_printf_i+0x28>
 800417e:	a101      	add	r1, pc, #4	; (adr r1, 8004184 <_printf_i+0x40>)
 8004180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004184:	080041dd 	.word	0x080041dd
 8004188:	080041f1 	.word	0x080041f1
 800418c:	0800416d 	.word	0x0800416d
 8004190:	0800416d 	.word	0x0800416d
 8004194:	0800416d 	.word	0x0800416d
 8004198:	0800416d 	.word	0x0800416d
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	0800416d 	.word	0x0800416d
 80041a4:	0800416d 	.word	0x0800416d
 80041a8:	0800416d 	.word	0x0800416d
 80041ac:	0800416d 	.word	0x0800416d
 80041b0:	080042ff 	.word	0x080042ff
 80041b4:	08004221 	.word	0x08004221
 80041b8:	080042e1 	.word	0x080042e1
 80041bc:	0800416d 	.word	0x0800416d
 80041c0:	0800416d 	.word	0x0800416d
 80041c4:	08004321 	.word	0x08004321
 80041c8:	0800416d 	.word	0x0800416d
 80041cc:	08004221 	.word	0x08004221
 80041d0:	0800416d 	.word	0x0800416d
 80041d4:	0800416d 	.word	0x0800416d
 80041d8:	080042e9 	.word	0x080042e9
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	602a      	str	r2, [r5, #0]
 80041e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0a4      	b.n	800433a <_printf_i+0x1f6>
 80041f0:	6820      	ldr	r0, [r4, #0]
 80041f2:	6829      	ldr	r1, [r5, #0]
 80041f4:	0606      	lsls	r6, r0, #24
 80041f6:	f101 0304 	add.w	r3, r1, #4
 80041fa:	d50a      	bpl.n	8004212 <_printf_i+0xce>
 80041fc:	680e      	ldr	r6, [r1, #0]
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	2e00      	cmp	r6, #0
 8004202:	da03      	bge.n	800420c <_printf_i+0xc8>
 8004204:	232d      	movs	r3, #45	; 0x2d
 8004206:	4276      	negs	r6, r6
 8004208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800420c:	230a      	movs	r3, #10
 800420e:	485e      	ldr	r0, [pc, #376]	; (8004388 <_printf_i+0x244>)
 8004210:	e019      	b.n	8004246 <_printf_i+0x102>
 8004212:	680e      	ldr	r6, [r1, #0]
 8004214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	bf18      	it	ne
 800421c:	b236      	sxthne	r6, r6
 800421e:	e7ef      	b.n	8004200 <_printf_i+0xbc>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	1d19      	adds	r1, r3, #4
 8004226:	6029      	str	r1, [r5, #0]
 8004228:	0601      	lsls	r1, r0, #24
 800422a:	d501      	bpl.n	8004230 <_printf_i+0xec>
 800422c:	681e      	ldr	r6, [r3, #0]
 800422e:	e002      	b.n	8004236 <_printf_i+0xf2>
 8004230:	0646      	lsls	r6, r0, #25
 8004232:	d5fb      	bpl.n	800422c <_printf_i+0xe8>
 8004234:	881e      	ldrh	r6, [r3, #0]
 8004236:	2f6f      	cmp	r7, #111	; 0x6f
 8004238:	bf0c      	ite	eq
 800423a:	2308      	moveq	r3, #8
 800423c:	230a      	movne	r3, #10
 800423e:	4852      	ldr	r0, [pc, #328]	; (8004388 <_printf_i+0x244>)
 8004240:	2100      	movs	r1, #0
 8004242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004246:	6865      	ldr	r5, [r4, #4]
 8004248:	2d00      	cmp	r5, #0
 800424a:	bfa8      	it	ge
 800424c:	6821      	ldrge	r1, [r4, #0]
 800424e:	60a5      	str	r5, [r4, #8]
 8004250:	bfa4      	itt	ge
 8004252:	f021 0104 	bicge.w	r1, r1, #4
 8004256:	6021      	strge	r1, [r4, #0]
 8004258:	b90e      	cbnz	r6, 800425e <_printf_i+0x11a>
 800425a:	2d00      	cmp	r5, #0
 800425c:	d04d      	beq.n	80042fa <_printf_i+0x1b6>
 800425e:	4615      	mov	r5, r2
 8004260:	fbb6 f1f3 	udiv	r1, r6, r3
 8004264:	fb03 6711 	mls	r7, r3, r1, r6
 8004268:	5dc7      	ldrb	r7, [r0, r7]
 800426a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800426e:	4637      	mov	r7, r6
 8004270:	42bb      	cmp	r3, r7
 8004272:	460e      	mov	r6, r1
 8004274:	d9f4      	bls.n	8004260 <_printf_i+0x11c>
 8004276:	2b08      	cmp	r3, #8
 8004278:	d10b      	bne.n	8004292 <_printf_i+0x14e>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	07de      	lsls	r6, r3, #31
 800427e:	d508      	bpl.n	8004292 <_printf_i+0x14e>
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	6861      	ldr	r1, [r4, #4]
 8004284:	4299      	cmp	r1, r3
 8004286:	bfde      	ittt	le
 8004288:	2330      	movle	r3, #48	; 0x30
 800428a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800428e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004292:	1b52      	subs	r2, r2, r5
 8004294:	6122      	str	r2, [r4, #16]
 8004296:	464b      	mov	r3, r9
 8004298:	4621      	mov	r1, r4
 800429a:	4640      	mov	r0, r8
 800429c:	f8cd a000 	str.w	sl, [sp]
 80042a0:	aa03      	add	r2, sp, #12
 80042a2:	f7ff fedf 	bl	8004064 <_printf_common>
 80042a6:	3001      	adds	r0, #1
 80042a8:	d14c      	bne.n	8004344 <_printf_i+0x200>
 80042aa:	f04f 30ff 	mov.w	r0, #4294967295
 80042ae:	b004      	add	sp, #16
 80042b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b4:	4834      	ldr	r0, [pc, #208]	; (8004388 <_printf_i+0x244>)
 80042b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042ba:	6829      	ldr	r1, [r5, #0]
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	f851 6b04 	ldr.w	r6, [r1], #4
 80042c2:	6029      	str	r1, [r5, #0]
 80042c4:	061d      	lsls	r5, r3, #24
 80042c6:	d514      	bpl.n	80042f2 <_printf_i+0x1ae>
 80042c8:	07df      	lsls	r7, r3, #31
 80042ca:	bf44      	itt	mi
 80042cc:	f043 0320 	orrmi.w	r3, r3, #32
 80042d0:	6023      	strmi	r3, [r4, #0]
 80042d2:	b91e      	cbnz	r6, 80042dc <_printf_i+0x198>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f023 0320 	bic.w	r3, r3, #32
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2310      	movs	r3, #16
 80042de:	e7af      	b.n	8004240 <_printf_i+0xfc>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	f043 0320 	orr.w	r3, r3, #32
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	2378      	movs	r3, #120	; 0x78
 80042ea:	4828      	ldr	r0, [pc, #160]	; (800438c <_printf_i+0x248>)
 80042ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f0:	e7e3      	b.n	80042ba <_printf_i+0x176>
 80042f2:	0659      	lsls	r1, r3, #25
 80042f4:	bf48      	it	mi
 80042f6:	b2b6      	uxthmi	r6, r6
 80042f8:	e7e6      	b.n	80042c8 <_printf_i+0x184>
 80042fa:	4615      	mov	r5, r2
 80042fc:	e7bb      	b.n	8004276 <_printf_i+0x132>
 80042fe:	682b      	ldr	r3, [r5, #0]
 8004300:	6826      	ldr	r6, [r4, #0]
 8004302:	1d18      	adds	r0, r3, #4
 8004304:	6961      	ldr	r1, [r4, #20]
 8004306:	6028      	str	r0, [r5, #0]
 8004308:	0635      	lsls	r5, r6, #24
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	d501      	bpl.n	8004312 <_printf_i+0x1ce>
 800430e:	6019      	str	r1, [r3, #0]
 8004310:	e002      	b.n	8004318 <_printf_i+0x1d4>
 8004312:	0670      	lsls	r0, r6, #25
 8004314:	d5fb      	bpl.n	800430e <_printf_i+0x1ca>
 8004316:	8019      	strh	r1, [r3, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	4615      	mov	r5, r2
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	e7ba      	b.n	8004296 <_printf_i+0x152>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	2100      	movs	r1, #0
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	602a      	str	r2, [r5, #0]
 8004328:	681d      	ldr	r5, [r3, #0]
 800432a:	6862      	ldr	r2, [r4, #4]
 800432c:	4628      	mov	r0, r5
 800432e:	f000 f8d9 	bl	80044e4 <memchr>
 8004332:	b108      	cbz	r0, 8004338 <_printf_i+0x1f4>
 8004334:	1b40      	subs	r0, r0, r5
 8004336:	6060      	str	r0, [r4, #4]
 8004338:	6863      	ldr	r3, [r4, #4]
 800433a:	6123      	str	r3, [r4, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004342:	e7a8      	b.n	8004296 <_printf_i+0x152>
 8004344:	462a      	mov	r2, r5
 8004346:	4649      	mov	r1, r9
 8004348:	4640      	mov	r0, r8
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	47d0      	blx	sl
 800434e:	3001      	adds	r0, #1
 8004350:	d0ab      	beq.n	80042aa <_printf_i+0x166>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	079b      	lsls	r3, r3, #30
 8004356:	d413      	bmi.n	8004380 <_printf_i+0x23c>
 8004358:	68e0      	ldr	r0, [r4, #12]
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	4298      	cmp	r0, r3
 800435e:	bfb8      	it	lt
 8004360:	4618      	movlt	r0, r3
 8004362:	e7a4      	b.n	80042ae <_printf_i+0x16a>
 8004364:	2301      	movs	r3, #1
 8004366:	4632      	mov	r2, r6
 8004368:	4649      	mov	r1, r9
 800436a:	4640      	mov	r0, r8
 800436c:	47d0      	blx	sl
 800436e:	3001      	adds	r0, #1
 8004370:	d09b      	beq.n	80042aa <_printf_i+0x166>
 8004372:	3501      	adds	r5, #1
 8004374:	68e3      	ldr	r3, [r4, #12]
 8004376:	9903      	ldr	r1, [sp, #12]
 8004378:	1a5b      	subs	r3, r3, r1
 800437a:	42ab      	cmp	r3, r5
 800437c:	dcf2      	bgt.n	8004364 <_printf_i+0x220>
 800437e:	e7eb      	b.n	8004358 <_printf_i+0x214>
 8004380:	2500      	movs	r5, #0
 8004382:	f104 0619 	add.w	r6, r4, #25
 8004386:	e7f5      	b.n	8004374 <_printf_i+0x230>
 8004388:	08004629 	.word	0x08004629
 800438c:	0800463a 	.word	0x0800463a

08004390 <_sbrk_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	2300      	movs	r3, #0
 8004394:	4d05      	ldr	r5, [pc, #20]	; (80043ac <_sbrk_r+0x1c>)
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	602b      	str	r3, [r5, #0]
 800439c:	f7fc fb7a 	bl	8000a94 <_sbrk>
 80043a0:	1c43      	adds	r3, r0, #1
 80043a2:	d102      	bne.n	80043aa <_sbrk_r+0x1a>
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	b103      	cbz	r3, 80043aa <_sbrk_r+0x1a>
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	bd38      	pop	{r3, r4, r5, pc}
 80043ac:	20000188 	.word	0x20000188

080043b0 <__sread>:
 80043b0:	b510      	push	{r4, lr}
 80043b2:	460c      	mov	r4, r1
 80043b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b8:	f000 f8ae 	bl	8004518 <_read_r>
 80043bc:	2800      	cmp	r0, #0
 80043be:	bfab      	itete	ge
 80043c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043c2:	89a3      	ldrhlt	r3, [r4, #12]
 80043c4:	181b      	addge	r3, r3, r0
 80043c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043ca:	bfac      	ite	ge
 80043cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80043ce:	81a3      	strhlt	r3, [r4, #12]
 80043d0:	bd10      	pop	{r4, pc}

080043d2 <__swrite>:
 80043d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d6:	461f      	mov	r7, r3
 80043d8:	898b      	ldrh	r3, [r1, #12]
 80043da:	4605      	mov	r5, r0
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	460c      	mov	r4, r1
 80043e0:	4616      	mov	r6, r2
 80043e2:	d505      	bpl.n	80043f0 <__swrite+0x1e>
 80043e4:	2302      	movs	r3, #2
 80043e6:	2200      	movs	r2, #0
 80043e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ec:	f000 f868 	bl	80044c0 <_lseek_r>
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	4632      	mov	r2, r6
 80043f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f8:	81a3      	strh	r3, [r4, #12]
 80043fa:	4628      	mov	r0, r5
 80043fc:	463b      	mov	r3, r7
 80043fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004406:	f000 b817 	b.w	8004438 <_write_r>

0800440a <__sseek>:
 800440a:	b510      	push	{r4, lr}
 800440c:	460c      	mov	r4, r1
 800440e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004412:	f000 f855 	bl	80044c0 <_lseek_r>
 8004416:	1c43      	adds	r3, r0, #1
 8004418:	89a3      	ldrh	r3, [r4, #12]
 800441a:	bf15      	itete	ne
 800441c:	6560      	strne	r0, [r4, #84]	; 0x54
 800441e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004426:	81a3      	strheq	r3, [r4, #12]
 8004428:	bf18      	it	ne
 800442a:	81a3      	strhne	r3, [r4, #12]
 800442c:	bd10      	pop	{r4, pc}

0800442e <__sclose>:
 800442e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004432:	f000 b813 	b.w	800445c <_close_r>
	...

08004438 <_write_r>:
 8004438:	b538      	push	{r3, r4, r5, lr}
 800443a:	4604      	mov	r4, r0
 800443c:	4608      	mov	r0, r1
 800443e:	4611      	mov	r1, r2
 8004440:	2200      	movs	r2, #0
 8004442:	4d05      	ldr	r5, [pc, #20]	; (8004458 <_write_r+0x20>)
 8004444:	602a      	str	r2, [r5, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f7fc fb9e 	bl	8000b88 <_write>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_write_r+0x1e>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_write_r+0x1e>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	20000188 	.word	0x20000188

0800445c <_close_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	2300      	movs	r3, #0
 8004460:	4d05      	ldr	r5, [pc, #20]	; (8004478 <_close_r+0x1c>)
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	602b      	str	r3, [r5, #0]
 8004468:	f7fc fae4 	bl	8000a34 <_close>
 800446c:	1c43      	adds	r3, r0, #1
 800446e:	d102      	bne.n	8004476 <_close_r+0x1a>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	b103      	cbz	r3, 8004476 <_close_r+0x1a>
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	bd38      	pop	{r3, r4, r5, pc}
 8004478:	20000188 	.word	0x20000188

0800447c <_fstat_r>:
 800447c:	b538      	push	{r3, r4, r5, lr}
 800447e:	2300      	movs	r3, #0
 8004480:	4d06      	ldr	r5, [pc, #24]	; (800449c <_fstat_r+0x20>)
 8004482:	4604      	mov	r4, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	602b      	str	r3, [r5, #0]
 800448a:	f7fc fade 	bl	8000a4a <_fstat>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d102      	bne.n	8004498 <_fstat_r+0x1c>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	b103      	cbz	r3, 8004498 <_fstat_r+0x1c>
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	bd38      	pop	{r3, r4, r5, pc}
 800449a:	bf00      	nop
 800449c:	20000188 	.word	0x20000188

080044a0 <_isatty_r>:
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	2300      	movs	r3, #0
 80044a4:	4d05      	ldr	r5, [pc, #20]	; (80044bc <_isatty_r+0x1c>)
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	602b      	str	r3, [r5, #0]
 80044ac:	f7fc fadc 	bl	8000a68 <_isatty>
 80044b0:	1c43      	adds	r3, r0, #1
 80044b2:	d102      	bne.n	80044ba <_isatty_r+0x1a>
 80044b4:	682b      	ldr	r3, [r5, #0]
 80044b6:	b103      	cbz	r3, 80044ba <_isatty_r+0x1a>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
 80044bc:	20000188 	.word	0x20000188

080044c0 <_lseek_r>:
 80044c0:	b538      	push	{r3, r4, r5, lr}
 80044c2:	4604      	mov	r4, r0
 80044c4:	4608      	mov	r0, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	2200      	movs	r2, #0
 80044ca:	4d05      	ldr	r5, [pc, #20]	; (80044e0 <_lseek_r+0x20>)
 80044cc:	602a      	str	r2, [r5, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f7fc fad4 	bl	8000a7c <_lseek>
 80044d4:	1c43      	adds	r3, r0, #1
 80044d6:	d102      	bne.n	80044de <_lseek_r+0x1e>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b103      	cbz	r3, 80044de <_lseek_r+0x1e>
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20000188 	.word	0x20000188

080044e4 <memchr>:
 80044e4:	4603      	mov	r3, r0
 80044e6:	b510      	push	{r4, lr}
 80044e8:	b2c9      	uxtb	r1, r1
 80044ea:	4402      	add	r2, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	d101      	bne.n	80044f6 <memchr+0x12>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e003      	b.n	80044fe <memchr+0x1a>
 80044f6:	7804      	ldrb	r4, [r0, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	428c      	cmp	r4, r1
 80044fc:	d1f6      	bne.n	80044ec <memchr+0x8>
 80044fe:	bd10      	pop	{r4, pc}

08004500 <__malloc_lock>:
 8004500:	4801      	ldr	r0, [pc, #4]	; (8004508 <__malloc_lock+0x8>)
 8004502:	f7ff bb0b 	b.w	8003b1c <__retarget_lock_acquire_recursive>
 8004506:	bf00      	nop
 8004508:	2000017c 	.word	0x2000017c

0800450c <__malloc_unlock>:
 800450c:	4801      	ldr	r0, [pc, #4]	; (8004514 <__malloc_unlock+0x8>)
 800450e:	f7ff bb06 	b.w	8003b1e <__retarget_lock_release_recursive>
 8004512:	bf00      	nop
 8004514:	2000017c 	.word	0x2000017c

08004518 <_read_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	4611      	mov	r1, r2
 8004520:	2200      	movs	r2, #0
 8004522:	4d05      	ldr	r5, [pc, #20]	; (8004538 <_read_r+0x20>)
 8004524:	602a      	str	r2, [r5, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	f7fc fb4c 	bl	8000bc4 <_read>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_read_r+0x1e>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_read_r+0x1e>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	20000188 	.word	0x20000188

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
